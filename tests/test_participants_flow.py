"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ flow –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""

import unittest
from unittest.mock import AsyncMock, MagicMock, patch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class TestParticipantsFlow(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""

    def test_participants_flow_logic(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ (–∞ –Ω–µ –∫ –≤—ã–±–æ—Ä—É LLM)
        """
        
        # –ò–º–∏—Ç–∞—Ü–∏—è state —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        mock_state_data = {
            'file_id': 'test_file_123',
            'file_name': 'test_meeting.mp3',
            'participants_list': [
                {'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 'role': '–º–µ–Ω–µ–¥–∂–µ—Ä'},
                {'name': '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', 'role': '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'}
            ],
            'meeting_topic': '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            'meeting_date': '22.10.2025',
            'meeting_time': '15:00'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –µ—Å—Ç—å –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.assertEqual(len(mock_state_data['participants_list']), 2)
        self.assertIsNotNone(mock_state_data.get('meeting_topic'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ template_id –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ)
        self.assertIsNone(mock_state_data.get('template_id'))
        
        # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞
        # (–∞ –Ω–µ –∫ –≤—ã–±–æ—Ä—É LLM, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è template_id)
        self.assertTrue(True)  # –õ–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞

    def test_state_data_preservation(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ state
        –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞
        """
        
        mock_state_data = {
            'file_id': 'test_file_123',
            'file_name': 'test_meeting.mp3',
            'participants_list': [
                {'name': '–¢–∏–º—á–µ–Ω–∫–æ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', 'role': ''},
                {'name': '–ù–æ—Å–æ–≤ –°—Ç–µ–ø–∞–Ω –ï–≤–≥–µ–Ω—å–µ–≤–∏—á', 'role': ''},
                {'name': '–ü–æ–ª—è–∫–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–Ω–¥—Ä–µ–µ–≤–∏—á', 'role': ''}
            ]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        participants = mock_state_data.get('participants_list', [])
        self.assertEqual(len(participants), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è template_id –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è
        mock_state_data['template_id'] = 1
        self.assertEqual(len(mock_state_data.get('participants_list', [])), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å LLM provider
        mock_state_data['llm_provider'] = 'openai'
        self.assertEqual(len(mock_state_data.get('participants_list', [])), 3)

    def test_participants_count_message(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        """
        
        participants = [
            {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 1', 'role': '—Ä–æ–ª—å 1'},
            {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 2', 'role': '—Ä–æ–ª—å 2'},
            {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 3', 'role': '—Ä–æ–ª—å 3'},
        ]
        
        participants_count = len(participants)
        expected_message = f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({participants_count} —á–µ–ª.)\n\nüìù –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:"
        
        self.assertIn(str(participants_count), expected_message)
        self.assertIn("–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", expected_message)


if __name__ == '__main__':
    unittest.main()

