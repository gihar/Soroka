"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
"""

from typing import Dict, List, Any, Optional
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram import Bot
from loguru import logger

from src.utils.telegram_safe import safe_send_message
from src.utils.message_utils import escape_markdown_v2


def extract_speaker_quotes(
    diarization_data: Dict[str, Any],
    speaker_id: str,
    num_quotes: int = 3
) -> List[str]:
    """
    –ò–∑–≤–ª–µ—á—å —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    
    Args:
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        speaker_id: ID —Å–ø–∏–∫–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "SPEAKER_1")
        num_quotes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º num_quotes —à—Ç—É–∫)
    """
    segments = diarization_data.get('segments', [])
    speaker_segments = [s for s in segments if s.get('speaker') == speaker_id]
    
    if not speaker_segments:
        return []
    
    if len(speaker_segments) <= num_quotes:
        # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–∞–ª–æ, –±–µ—Ä–µ–º –≤—Å–µ
        quotes = []
        for seg in speaker_segments:
            text = seg.get('text', '').strip()
            if text:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤
                if len(text) > 150:
                    quotes.append(text[:150] + '...')
                else:
                    quotes.append(text)
        return quotes
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–∏—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–π –¥–ª–∏–Ω–µ: –Ω–∞—á–∞–ª–æ, —Å–µ—Ä–µ–¥–∏–Ω–∞, –∫–æ–Ω–µ—Ü
    total = len(speaker_segments)
    indices = []
    
    if num_quotes >= 3:
        indices = [0, total // 2, total - 1]
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ 3
        if num_quotes > 3:
            step = total // (num_quotes - 1)
            for i in range(1, num_quotes - 1):
                idx = step * i
                if idx not in indices and idx < total:
                    indices.append(idx)
    else:
        # –î–ª—è 1-2 —Ü–∏—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
        step = total // num_quotes
        indices = [i * step for i in range(num_quotes)]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    indices = sorted(set(indices))
    
    quotes = []
    for idx in indices[:num_quotes]:
        if idx < total:
            text = speaker_segments[idx].get('text', '').strip()
            if text:
                if len(text) > 150:
                    quotes.append(text[:150] + '...')
                else:
                    quotes.append(text)
    
    return quotes


def format_mapping_message(
    speaker_mapping: Dict[str, str],
    diarization_data: Dict[str, Any],
    participants: List[Dict[str, str]],
    unmapped_speakers: Optional[List[str]] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
    
    Args:
        speaker_mapping: –°–ª–æ–≤–∞—Ä—å {speaker_id: participant_name}
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        unmapped_speakers: –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MarkdownV2
    """
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
    header_text = escape_markdown_v2("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤")
    lines = [f"üé≠ *{header_text}*\n"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    all_speakers = diarization_data.get('speakers', [])
    if not all_speakers:
        # –ï—Å–ª–∏ speakers –Ω–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ segments
        segments = diarization_data.get('segments', [])
        all_speakers = sorted(set(s.get('speaker') for s in segments if s.get('speaker')))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É (SPEAKER_1, SPEAKER_2, ...)
    all_speakers.sort(key=lambda x: int(x.split('_')[-1]) if x.split('_')[-1].isdigit() else 999)
    
    # –û—Ç–º–µ—á–∞–µ–º —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
    mapped_speakers = set(speaker_mapping.keys())
    if unmapped_speakers:
        unmapped_set = set(unmapped_speakers)
    else:
        unmapped_set = set(all_speakers) - mapped_speakers
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    quotes_label = escape_markdown_v2("–¶–∏—Ç–∞—Ç—ã:")
    not_defined_text = escape_markdown_v2("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
    from src.services.participants_service import participants_service
    
    for speaker_id in all_speakers:
        participant_name = speaker_mapping.get(speaker_id)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º speaker_id –¥–ª—è MarkdownV2
        escaped_speaker_id = escape_markdown_v2(speaker_id)
        
        if participant_name:
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è MarkdownV2
            short_name = participants_service.convert_full_name_to_short(participant_name)
            escaped_participant_name = escape_markdown_v2(short_name)
            lines.append(f"*{escaped_speaker_id}* ‚Üí {escaped_participant_name} ‚úì")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ç–∞—Ç—ã
            quotes = extract_speaker_quotes(diarization_data, speaker_id, num_quotes=3)
            if quotes:
                lines.append(quotes_label + ":")
                for quote in quotes:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è MarkdownV2
                    escaped_quote = escape_markdown_v2(quote)
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è MarkdownV2 (–∫–∞–≤—ã—á–∫–∏ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª)
                    lines.append(f"  ‚Ä¢ \\\"{escaped_quote}\\\"")
            lines.append("")
        else:
            # –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω - —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            lines.append(f"*{escaped_speaker_id}* ‚Üí {not_defined_text} ‚ùì")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
            quotes = extract_speaker_quotes(diarization_data, speaker_id, num_quotes=2)
            if quotes:
                lines.append(quotes_label + ":")
                for quote in quotes:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è MarkdownV2
                    escaped_quote = escape_markdown_v2(quote)
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è MarkdownV2 (–∫–∞–≤—ã—á–∫–∏ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª)
                    lines.append(f"  ‚Ä¢ \\\"{escaped_quote}\\\"")
            lines.append("")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¥–µ—Ñ–∏—Å—ã –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2)
    separator = escape_markdown_v2("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    lines.append(separator)
    
    return "\n".join(lines)


def _format_simple_mapping_message(
    speaker_mapping: Dict[str, str],
    diarization_data: Dict[str, Any],
    unmapped_speakers: Optional[List[str]] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏ (fallback)
    
    Args:
        speaker_mapping: –°–ª–æ–≤–∞—Ä—å {speaker_id: participant_name}
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        unmapped_speakers: –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
        
    Returns:
        –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
    """
    lines = ["üé≠ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤\n"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    all_speakers = diarization_data.get('speakers', [])
    if not all_speakers:
        segments = diarization_data.get('segments', [])
        all_speakers = sorted(set(s.get('speaker') for s in segments if s.get('speaker')))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
    all_speakers.sort(key=lambda x: int(x.split('_')[-1]) if x.split('_')[-1].isdigit() else 999)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
    from src.services.participants_service import participants_service
    
    for speaker_id in all_speakers:
        participant_name = speaker_mapping.get(speaker_id)
        
        if participant_name:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            short_name = participants_service.convert_full_name_to_short(participant_name)
            lines.append(f"{speaker_id} ‚Üí {short_name} ‚úì")
        else:
            lines.append(f"{speaker_id} ‚Üí –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ‚ùì")
    
    lines.append("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    lines.append("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.")
    
    return "\n".join(lines)


def create_mapping_keyboard(
    speaker_mapping: Dict[str, str],
    diarization_data: Dict[str, Any],
    participants: List[Dict[str, str]],
    user_id: int,
    current_editing_speaker: Optional[str] = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    
    Args:
        speaker_mapping: –¢–µ–∫—É—â–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_editing_speaker: ID —Å–ø–∏–∫–µ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard_buttons = []
    
    # –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    if current_editing_speaker:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
        all_speakers = diarization_data.get('speakers', [])
        if not all_speakers:
            segments = diarization_data.get('segments', [])
            all_speakers = sorted(set(s.get('speaker') for s in segments if s.get('speaker')))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        used_participants = set(speaker_mapping.values())
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–º–µ–Ω–∏"
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚ùå –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–º–µ–Ω–∏",
            callback_data=f"sm_select:{current_editing_speaker}:none:{user_id}"
        )])
        
        # –ö–Ω–æ–ø–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        for idx, participant in enumerate(participants):
            participant_name = participant.get('name', '')
            if not participant_name:
                continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
            from src.services.participants_service import participants_service
            short_name = participants_service.convert_full_name_to_short(participant_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫
            is_used = participant_name in used_participants
            button_text = f"{'‚úì ' if is_used else ''}{short_name}"
            
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"sm_select:{current_editing_speaker}:{idx}:{user_id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"sm_cancel:{user_id}"
        )])
        
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥: –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        all_speakers = diarization_data.get('speakers', [])
        if not all_speakers:
            segments = diarization_data.get('segments', [])
            all_speakers = sorted(set(s.get('speaker') for s in segments if s.get('speaker')))
        
        all_speakers.sort(key=lambda x: int(x.split('_')[-1]) if x.split('_')[-1].isdigit() else 999)
        
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞)
        for speaker_id in all_speakers:
            participant_name = speaker_mapping.get(speaker_id)
            if participant_name:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
                from src.services.participants_service import participants_service
                short_name = participants_service.convert_full_name_to_short(participant_name)
                button_text = f"‚úèÔ∏è {speaker_id}: {short_name}"
            else:
                button_text = f"‚ûï {speaker_id}"
            
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"sm_change:{speaker_id}:{user_id}"
            )])
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard_buttons.append([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            callback_data=f"sm_confirm:{user_id}"
        )])
        
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ",
            callback_data=f"sm_skip:{user_id}"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


async def show_mapping_confirmation(
    bot: Bot,
    chat_id: int,
    user_id: int,
    speaker_mapping: Dict[str, str],
    diarization_data: Dict[str, Any],
    participants: List[Dict[str, str]],
    unmapped_speakers: Optional[List[str]] = None
) -> Optional[Message]:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å UI –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        speaker_mapping: –¢–µ–∫—É—â–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        unmapped_speakers: –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
        
    Returns:
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = format_mapping_message(
            speaker_mapping,
            diarization_data,
            participants,
            unmapped_speakers
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_mapping_keyboard(
            speaker_mapping,
            diarization_data,
            participants,
            user_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2
        message = await safe_send_message(
            bot=bot,
            chat_id=chat_id,
            text=message_text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        
        if message is None:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å MarkdownV2 –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å UI —Å MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–±—É—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏")
            
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
            simple_text = _format_simple_mapping_message(
                speaker_mapping,
                diarization_data,
                unmapped_speakers
            )
            
            try:
                message = await safe_send_message(
                    bot=bot,
                    chat_id=chat_id,
                    text=simple_text,
                    parse_mode=None,  # –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                    reply_markup=keyboard
                )
                
                if message:
                    logger.info(f"UI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏")
                    return message
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é UI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return None
                    
            except Exception as fallback_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ UI: {fallback_error}", exc_info=True)
                return None
        else:
            logger.info(f"UI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ UI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        
        # –ü—Ä–æ–±—É–µ–º fallback –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        try:
            simple_text = _format_simple_mapping_message(
                speaker_mapping,
                diarization_data,
                unmapped_speakers
            )
            
            keyboard = create_mapping_keyboard(
                speaker_mapping,
                diarization_data,
                participants,
                user_id
            )
            
            message = await safe_send_message(
                bot=bot,
                chat_id=chat_id,
                text=simple_text,
                parse_mode=None,
                reply_markup=keyboard
            )
            
            if message:
                logger.info(f"UI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å fallback –º–µ—Ç–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return message
        except Exception as fallback_error:
            logger.error(f"Fallback —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {fallback_error}", exc_info=True)
        
        return None


async def update_mapping_message(
    message: Message,
    speaker_mapping: Dict[str, str],
    diarization_data: Dict[str, Any],
    participants: List[Dict[str, str]],
    user_id: int,
    current_editing_speaker: Optional[str] = None,
    unmapped_speakers: Optional[List[str]] = None
) -> bool:
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        speaker_mapping: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_editing_speaker: ID —Å–ø–∏–∫–µ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        unmapped_speakers: –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from src.utils.telegram_safe import safe_edit_text
        
        message_text = format_mapping_message(
            speaker_mapping,
            diarization_data,
            participants,
            unmapped_speakers
        )
        
        keyboard = create_mapping_keyboard(
            speaker_mapping,
            diarization_data,
            participants,
            user_id,
            current_editing_speaker
        )
        
        await safe_edit_text(
            message,
            message_text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        return False

