"""
–¢—Ä–µ–∫–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
"""

import asyncio
from typing import Optional
from datetime import datetime
from aiogram import Bot
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger


class QueuePositionTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    
    def __init__(self, bot: Bot, chat_id: int, task_id: str, message: Optional[Message] = None):
        self.bot = bot
        self.chat_id = chat_id
        self.task_id = task_id
        self.message = message
        self.message_id: Optional[int] = message.message_id if message else None
        self.last_position: Optional[int] = None
        self.last_total: Optional[int] = None
        self.is_active = True
        self._update_task: Optional[asyncio.Task] = None
        self._last_text = ""
    
    def create_cancel_button(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=f"cancel_task_{self.task_id}"
            )]
        ])
    
    def _format_queue_message(self, position: int, total_in_queue: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if position == 0:
            # –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ - —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            return (
                "üîÑ **–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
                "‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...\n"
                f"üìä –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {total_in_queue}"
            )
        elif position == 1:
            return (
                "üïê **–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏**\n\n"
                f"üìç –í–ø–µ—Ä–µ–¥–∏: **{position} –∑–∞–¥–∞—á–∞**\n"
                f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {total_in_queue}\n\n"
                "‚ö° –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É!"
            )
        elif position <= 3:
            return (
                "üïê **–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏**\n\n"
                f"üìç –í–ø–µ—Ä–µ–¥–∏: **{position} –∑–∞–¥–∞—á–∏**\n"
                f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {total_in_queue}\n\n"
                "‚ö° –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥–µ—Ç!"
            )
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 2-3 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–¥–∞—á—É)
            estimated_minutes = position * 2.5
            if estimated_minutes < 60:
                time_estimate = f"~{int(estimated_minutes)} –º–∏–Ω"
            else:
                hours = int(estimated_minutes / 60)
                minutes = int(estimated_minutes % 60)
                time_estimate = f"~{hours}—á {minutes}–º–∏–Ω" if minutes > 0 else f"~{hours}—á"
            
            tasks_word = "–∑–∞–¥–∞—á" if position % 10 == 0 or position % 10 >= 5 or (position % 100 >= 11 and position % 100 <= 14) else (
                "–∑–∞–¥–∞—á–∞" if position % 10 == 1 else "–∑–∞–¥–∞—á–∏"
            )
            
            return (
                "üïê **–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏**\n\n"
                f"üìç –í–ø–µ—Ä–µ–¥–∏: **{position} {tasks_word}**\n"
                f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {total_in_queue}\n"
                f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time_estimate}\n\n"
                "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ"
            )
    
    async def update_position(self, position: int, total_in_queue: int, force: bool = False):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)"""
        if not self.is_active:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ force=True
        if not force and position == self.last_position and total_in_queue == self.last_total:
            return
        
        self.last_position = position
        self.last_total = total_in_queue
        
        try:
            text = self._format_queue_message(position, total_in_queue)
            keyboard = self.create_cancel_button()
            
            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if text == self._last_text:
                return
            
            if self.message_id:
                try:
                    await self.bot.edit_message_text(
                        text=text,
                        chat_id=self.chat_id,
                        message_id=self.message_id,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    self._last_text = text
                except Exception as e:
                    if "message is not modified" in str(e).lower():
                        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: {e}")
            else:
                # –ï—Å–ª–∏ message_id –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                self.message_id = msg.message_id
                self._last_text = text
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def show_processing_started(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å"""
        if not self.is_active or not self.message_id:
            return
        
        try:
            text = (
                "üîÑ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞**\n\n"
                "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
            )
            
            await self.bot.edit_message_text(
                text=text,
                chat_id=self.chat_id,
                message_id=self.message_id,
                parse_mode="Markdown"
            )
            self._last_text = text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    async def show_cancelled(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"""
        if not self.is_active or not self.message_id:
            return
        
        self.is_active = False
        
        try:
            text = (
                "‚ùå **–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
            )
            
            await self.bot.edit_message_text(
                text=text,
                chat_id=self.chat_id,
                message_id=self.message_id,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã: {e}")
    
    async def show_error(self, error_message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        if not self.is_active or not self.message_id:
            return
        
        self.is_active = False
        
        try:
            text = (
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
                f"{error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–Ω–æ–≤–∞."
            )
            
            await self.bot.edit_message_text(
                text=text,
                chat_id=self.chat_id,
                message_id=self.message_id,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")
    
    async def delete_message(self):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"""
        if not self.message_id:
            return
        
        try:
            await self.bot.delete_message(
                chat_id=self.chat_id,
                message_id=self.message_id
            )
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ {self.message_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
        self.is_active = False
        if self._update_task:
            self._update_task.cancel()
            try:
                await self._update_task
            except asyncio.CancelledError:
                pass


class QueueTrackerFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤ –æ—á–µ—Ä–µ–¥–∏"""
    
    @staticmethod
    async def create_tracker(bot: Bot, chat_id: int, task_id: str, 
                           initial_position: int = 0, 
                           total_in_queue: int = 1) -> QueuePositionTracker:
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        tracker = QueuePositionTracker(bot, chat_id, task_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = tracker._format_queue_message(initial_position, total_in_queue)
        keyboard = tracker.create_cancel_button()
        
        try:
            msg = await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            tracker.message_id = msg.message_id
            tracker._last_text = text
            tracker.last_position = initial_position
            tracker.last_total = total_in_queue
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
        
        return tracker

