"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict
from datetime import datetime
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, 
    InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
)
from loguru import logger
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from database import db


@dataclass
class FeedbackEntry:
    """–ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    user_id: int
    timestamp: datetime
    rating: int  # 1-5
    feedback_type: str  # "protocol_quality", "processing_speed", "user_experience", "bug_report"
    comment: Optional[str] = None
    protocol_id: Optional[str] = None
    processing_time: Optional[float] = None
    file_format: Optional[str] = None
    file_size: Optional[int] = None


class FeedbackCollector:
    """–°–±–æ—Ä—â–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    def __init__(self):
        self.feedback_storage: List[FeedbackEntry] = []
        self._initialized = False
    
    async def initialize(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if self._initialized:
            return
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î
            feedbacks = await db.get_all_feedback(limit=1000)
            for feedback_dict in feedbacks:
                feedback = FeedbackEntry(
                    user_id=feedback_dict['user_id'],
                    timestamp=datetime.fromisoformat(feedback_dict['created_at']),
                    rating=feedback_dict['rating'],
                    feedback_type=feedback_dict['feedback_type'],
                    comment=feedback_dict.get('comment'),
                    protocol_id=feedback_dict.get('protocol_id'),
                    processing_time=feedback_dict.get('processing_time'),
                    file_format=feedback_dict.get('file_format'),
                    file_size=feedback_dict.get('file_size')
                )
                self.feedback_storage.append(feedback)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.feedback_storage)} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–∑ –ë–î")
            self._initialized = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–∑ –ë–î: {e}")
    
    def add_feedback(self, feedback: FeedbackEntry):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        self.feedback_storage.append(feedback)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {feedback.user_id}: {feedback.rating}/5")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        import asyncio
        try:
            loop = asyncio.get_event_loop()
            loop.create_task(self._save_feedback_to_db(feedback))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –ë–î: {e}")
    
    async def _save_feedback_to_db(self, feedback: FeedbackEntry):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –ë–î"""
        try:
            await db.save_feedback(
                user_id=feedback.user_id,
                rating=feedback.rating,
                feedback_type=feedback.feedback_type,
                comment=feedback.comment,
                protocol_id=feedback.protocol_id,
                processing_time=feedback.processing_time,
                file_format=feedback.file_format,
                file_size=feedback.file_size
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    async def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            return await db.get_feedback_stats()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
            # Fallback: —Å—á–∏—Ç–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            if not self.feedback_storage:
                return {"total": 0, "average_rating": 0, "by_type": {}}
            
            total = len(self.feedback_storage)
            average_rating = sum(f.rating for f in self.feedback_storage) / total
            
            by_type = {}
            for feedback in self.feedback_storage:
                feedback_type = feedback.feedback_type
                if feedback_type not in by_type:
                    by_type[feedback_type] = {"count": 0, "average_rating": 0}
                by_type[feedback_type]["count"] += 1
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ —Ç–∏–ø–∞–º
            for feedback_type in by_type:
                type_feedbacks = [f for f in self.feedback_storage if f.feedback_type == feedback_type]
                by_type[feedback_type]["average_rating"] = sum(f.rating for f in type_feedbacks) / len(type_feedbacks)
            
            return {
                "total": total,
                "average_rating": round(average_rating, 2),
                "by_type": by_type,
                "recent_comments": [
                    {"rating": f.rating, "comment": f.comment, "type": f.feedback_type}
                    for f in sorted(self.feedback_storage, key=lambda x: x.timestamp, reverse=True)[:5]
                    if f.comment
                ]
            }
    
    def export_feedback(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ JSON"""
        data = []
        for feedback in self.feedback_storage:
            feedback_dict = asdict(feedback)
            feedback_dict["timestamp"] = feedback.timestamp.isoformat()
            data.append(feedback_dict)
        return json.dumps(data, ensure_ascii=False, indent=2)


class FeedbackUI:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    @staticmethod
    def create_rating_keyboard(feedback_type: str = "protocol_quality") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        buttons = []
        
        # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5
        rating_row = []
        for i in range(1, 6):
            emoji = "‚≠ê" * i
            rating_row.append(
                InlineKeyboardButton(
                    text=f"{i} {emoji}",
                    callback_data=f"feedback_rating_{feedback_type}_{i}"
                )
            )
        buttons.append(rating_row)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        buttons.append([
            InlineKeyboardButton(
                text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É",
                callback_data=f"feedback_skip_{feedback_type}"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def create_feedback_type_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        buttons = [
            [
                InlineKeyboardButton(
                    text="üìã –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞",
                    callback_data="feedback_type_protocol_quality"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    callback_data="feedback_type_processing_speed"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé® –£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    callback_data="feedback_type_user_experience"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
                    callback_data="feedback_type_bug_report"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è",
                    callback_data="feedback_type_suggestion"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def format_feedback_request(feedback_type: str) -> str:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        type_messages = {
            "protocol_quality": (
                "üìã **–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞**\n\n"
                "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞?\n"
                "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."
            ),
            "processing_speed": (
                "‚ö° **–û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
                "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞?\n"
                "–ë—ã–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º—ã–º?"
            ),
            "user_experience": (
                "üé® **–û—Ü–µ–Ω–∫–∞ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**\n\n"
                "–ù–∞—Å–∫–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?\n"
                "–ü–æ–Ω—è—Ç–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã?"
            ),
            "bug_report": (
                "üêõ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ**\n\n"
                "–û—Ü–µ–Ω–∏—Ç–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.\n"
                "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏."
            ),
            "suggestion": (
                "üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è**\n\n"
                "–ï—Å—Ç—å –∏–¥–µ–∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ?\n"
                "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            )
        }
        
        return type_messages.get(feedback_type, "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:")


def setup_feedback_handlers(feedback_collector: FeedbackCollector) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    router = Router()
    
    @router.callback_query(F.data.startswith("feedback_rating_"))
    async def handle_rating(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º: feedback_rating_protocol_quality_5
            parts = callback.data.split("_")
            if len(parts) < 4:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å)
            rating_str = parts[-1]
            rating = int(rating_str)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–µ–π
            feedback_type = "_".join(parts[2:-1])  # protocol_quality
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            feedback = FeedbackEntry(
                user_id=callback.from_user.id,
                timestamp=datetime.now(),
                rating=rating,
                feedback_type=feedback_type
            )
            feedback_collector.add_feedback(feedback)
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            rating_emoji = "‚≠ê" * rating
            await callback.message.edit_text(
                f"üôè **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!**\n\n"
                f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}/5 {rating_emoji}\n\n",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")
    
    @router.callback_query(F.data.startswith("feedback_skip_"))
    async def handle_skip_feedback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
        await callback.message.edit_text(
            "üëå **–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞**\n\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∫–æ–º–∞–Ω–¥–æ–π /feedback"
        )
    
    @router.callback_query(F.data.startswith("feedback_type_"))
    async def handle_feedback_type(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º: feedback_type_protocol_quality –∏–ª–∏ feedback_type_bug_report
            parts = callback.data.split("_")
            if len(parts) < 3:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –ø–æ—Å–ª–µ "feedback_type_"
            feedback_type = "_".join(parts[2:])
            
            message_text = FeedbackUI.format_feedback_request(feedback_type)
            keyboard = FeedbackUI.create_rating_keyboard(feedback_type)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    return router


class QuickFeedbackManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, feedback_collector: FeedbackCollector):
        self.feedback_collector = feedback_collector
    
    async def request_quick_feedback(self, chat_id: int, bot, 
                                   protocol_result: Dict[str, Any]) -> None:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç", callback_data="quick_feedback_5"),
                    InlineKeyboardButton(text="üòê", callback_data="quick_feedback_3"),
                    InlineKeyboardButton(text="üëé", callback_data="quick_feedback_1")
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ü–µ–Ω–∫–∞", 
                        callback_data="feedback_detailed"
                    )
                ]
            ])
            
            await bot.send_message(
                chat_id,
                "üí¨ **–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?**\n\n"
                "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    def create_feedback_handlers(self) -> Router:
        """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        router = Router()
        
        @router.callback_query(F.data.startswith("quick_feedback_"))
        async def handle_quick_feedback(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
            try:
                rating = int(callback.data.split("_")[-1])
                
                feedback = FeedbackEntry(
                    user_id=callback.from_user.id,
                    timestamp=datetime.now(),
                    rating=rating,
                    feedback_type="protocol_quality"
                )
                self.feedback_collector.add_feedback(feedback)
                
                responses = {
                    5: "üéâ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
                    3: "üëå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
                    1: "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."
                }
                
                await callback.message.edit_text(
                    f"{responses.get(rating, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')}\n\n"
                    f"üí° –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        
        @router.callback_query(F.data == "feedback_detailed")
        async def handle_detailed_feedback(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
            keyboard = FeedbackUI.create_feedback_type_keyboard()
            
            await callback.message.edit_text(
                "üìã **–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ü–µ–Ω–∏—Ç—å:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        return router


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–±–æ—Ä—â–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
feedback_collector = FeedbackCollector()
