"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import asyncio
from typing import Dict, Any, Callable, Optional
from aiogram import Bot
from aiogram.types import Message
from loguru import logger
from datetime import datetime, timedelta


class ProgressStage:
    """–≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    def __init__(self, name: str, emoji: str, description: str, 
                 estimated_duration: int = 10):
        self.name = name
        self.emoji = emoji  
        self.description = description
        self.estimated_duration = estimated_duration  # —Å–µ–∫—É–Ω–¥—ã
        self.started_at: Optional[datetime] = None
        self.completed_at: Optional[datetime] = None
        self.is_active = False
        self.is_completed = False


class ProgressTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, bot: Bot, chat_id: int, message: Message):
        self.bot = bot
        self.chat_id = chat_id
        self.message = message
        self.stages: Dict[str, ProgressStage] = {}
        self.current_stage: Optional[str] = None
        self.start_time = datetime.now()
        self.update_task: Optional[asyncio.Task] = None
        self.update_interval = 3  # —Å–µ–∫—É–Ω–¥—ã
        
    def add_stage(self, stage_id: str, name: str, emoji: str, 
                  description: str, estimated_duration: int = 10):
        """–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.stages[stage_id] = ProgressStage(
            name, emoji, description, estimated_duration
        )
    
    def setup_default_stages(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç—Ç–∞–ø–æ–≤
        self.stages = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫
        
        self.add_stage(
            "download", "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", "‚¨áÔ∏è", 
            "–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram...", 5
        )
        self.add_stage(
            "validation", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "üîç", 
            "–ü—Ä–æ–≤–µ—Ä—è—é —Ñ–æ—Ä–º–∞—Ç –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞...", 2
        )
        self.add_stage(
            "conversion", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", "üîÑ", 
            "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...", 8
        )
        self.add_stage(
            "transcription", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", "üéØ", 
            "–ü—Ä–µ–æ–±—Ä–∞–∑—É—é –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç...", 30
        )
        self.add_stage(
            "diarization", "–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è", "üë•", 
            "–û–ø—Ä–µ–¥–µ–ª—è—é –≥–æ–≤–æ—Ä—è—â–∏—Ö...", 20
        )
        self.add_stage(
            "llm_processing", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "ü§ñ", 
            "–°–æ–∑–¥–∞—é –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –ø–æ–º–æ—â—å—é –ò–ò...", 15
        )
        self.add_stage(
            "formatting", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "üìù", 
            "–§–æ—Ä–º–∞—Ç–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...", 3
        )
    
    async def start_stage(self, stage_id: str):
        """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        if stage_id not in self.stages:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: {stage_id}")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
        if self.current_stage:
            await self.complete_stage(self.current_stage)
        
        stage = self.stages[stage_id]
        stage.is_active = True
        stage.started_at = datetime.now()
        self.current_stage = stage_id
        
        logger.info(f"–ù–∞—á–∞—Ç —ç—Ç–∞–ø: {stage.name}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if self.update_task:
            self.update_task.cancel()
        self.update_task = asyncio.create_task(self._auto_update())
        
        await self.update_display()
    
    async def complete_stage(self, stage_id: str):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø"""
        if stage_id not in self.stages:
            return
        
        stage = self.stages[stage_id]
        stage.is_active = False
        stage.is_completed = True
        stage.completed_at = datetime.now()
        
        if stage_id == self.current_stage:
            self.current_stage = None
            
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —ç—Ç–∞–ø: {stage.name}")
        await self.update_display()
    
    async def update_stage_progress(self, stage_id: str, progress_percent: float = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
        if stage_id not in self.stages or stage_id != self.current_stage:
            return
        
        await self.update_display()
    
    async def complete_all(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã"""
        if self.update_task:
            self.update_task.cancel()
            
        if self.current_stage:
            await self.complete_stage(self.current_stage)
        
        await self.update_display(final=True)
    
    async def update_display(self, final: bool = False):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            text = self._format_progress_text(final)
            await self.message.edit_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def _format_progress_text(self, final: bool = False) -> str:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        if final:
            total_time = datetime.now() - self.start_time
            return (
                "‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time.total_seconds():.1f} —Å–µ–∫\n\n"
                "üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –≥–æ—Ç–æ–≤ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ."
            )
        
        text = "üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞**\n\n"
        
        for stage_id, stage in self.stages.items():
            if stage.is_completed:
                duration = (stage.completed_at - stage.started_at).total_seconds() if stage.started_at else 0
                text += f"‚úÖ {stage.emoji} {stage.name} - {duration:.1f}—Å\n"
            elif stage.is_active:
                elapsed = (datetime.now() - stage.started_at).total_seconds() if stage.started_at else 0
                progress_bar = self._create_progress_bar(elapsed, stage.estimated_duration)
                text += f"üîÑ {stage.emoji} {stage.name} {progress_bar}\n"
                text += f"   _{stage.description}_\n"
            else:
                text += f"‚è≥ {stage.emoji} {stage.name}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        total_elapsed = (datetime.now() - self.start_time).total_seconds()
        text += f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_elapsed:.0f}—Å"
        
        return text
    
    def _create_progress_bar(self, elapsed: float, estimated: float) -> str:
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if estimated <= 0:
            return "..."
        
        progress = min(elapsed / estimated, 1.0)
        filled = int(progress * 10)
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        percentage = int(progress * 100)
        
        return f"[{bar}] {percentage}%"
    
    async def _auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è"""
        try:
            while self.current_stage:
                await asyncio.sleep(self.update_interval)
                if self.current_stage:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–Ω–∞
                    await self.update_display()
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    async def error(self, stage_id: str, error_message: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —ç—Ç–∞–ø–µ"""
        if self.update_task:
            self.update_task.cancel()
        
        stage = self.stages.get(stage_id)
        stage_name = stage.name if stage else stage_id
        
        text = (
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
            f"–≠—Ç–∞–ø: {stage_name}\n"
            f"–û—à–∏–±–∫–∞: {error_message}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑."
        )
        
        try:
            await self.message.edit_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")


class ProgressFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    @staticmethod
    async def create_file_processing_tracker(bot: Bot, chat_id: int, 
                                           enable_diarization: bool = True) -> ProgressTracker:
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = await bot.send_message(
            chat_id, 
            "üîÑ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...**\n\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
            parse_mode="Markdown"
        )
        
        tracker = ProgressTracker(bot, chat_id, initial_message)
        tracker.setup_default_stages()
        
        # –£–±–∏—Ä–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        if not enable_diarization and "diarization" in tracker.stages:
            del tracker.stages["diarization"]
        
        return tracker
