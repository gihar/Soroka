"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
"""

import asyncio
from typing import Dict, Optional
from aiogram import Bot
from aiogram.types import Message
from loguru import logger
from datetime import datetime

from src.utils.telegram_safe import safe_edit_text, safe_send_message


class ProgressStage:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, name: str, emoji: str, description: str):
        self.name = name
        self.emoji = emoji  
        self.description = description
        self.started_at: Optional[datetime] = None
        self.completed_at: Optional[datetime] = None
        self.is_active = False
        self.is_completed = False
        self.progress: Optional[float] = None  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)


class ProgressTracker:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    def __init__(self, bot: Bot, chat_id: int, message: Message):
        self.bot = bot
        self.chat_id = chat_id
        self.message = message
        self.stages: Dict[str, ProgressStage] = {}
        self.current_stage: Optional[str] = None
        self.start_time = datetime.now()
        self.update_task: Optional[asyncio.Task] = None
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–¥ —Å–ø–∏–Ω–Ω–µ—Ä –∏ –ª–µ–≥–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è UI)
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É ~1.5‚Äì3 —Å–µ–∫, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –∫–∞–∑–∞–ª–∞—Å—å –∂–∏–≤–æ–π,
        # –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Telegram API
        self.update_interval = 1.5
        self._spinner_frames = ["|", "/", "-", "\\"]  # –ö–∞–¥—Ä—ã —Å–ø–∏–Ω–Ω–µ—Ä–∞
        self._spinner_index = 0
        # –ü–æ–ª—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è
        self._last_text: str = ""
        self._last_edit_at: datetime = datetime.min
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self._min_edit_interval_seconds: float = 1.5
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
        self._adaptive_interval_base = 1.5
        self._adaptive_interval_max = 3.0
        self._adaptive_step_seconds = 60  # –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        self._edit_lock = asyncio.Lock()
    
    def _get_adaptive_interval(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        elapsed_seconds = (datetime.now() - self.start_time).total_seconds()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        steps = int(elapsed_seconds // self._adaptive_step_seconds)
        adaptive_interval = self._adaptive_interval_base + (steps * 0.5)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        return min(adaptive_interval, self._adaptive_interval_max)
        
    def add_stage(self, stage_id: str, name: str, emoji: str, description: str):
        """–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.stages[stage_id] = ProgressStage(name, emoji, description)
    
    def setup_default_stages(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.stages = {}
        
        # –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_stage(
            "preparation", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "üìÅ", 
            "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
        )
        self.add_stage(
            "transcription", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", "üéØ", 
            "–ü—Ä–µ–æ–±—Ä–∞–∑—É—é –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç..."
        )
        self.add_stage(
            "analysis", "–ê–Ω–∞–ª–∏–∑", "ü§ñ", 
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—é –ø—Ä–æ—Ç–æ–∫–æ–ª..."
        )
    
    async def start_stage(self, stage_id: str):
        """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        if stage_id not in self.stages:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: {stage_id}")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
        if self.current_stage:
            await self.complete_stage(self.current_stage)
        
        stage = self.stages[stage_id]
        stage.is_active = True
        stage.started_at = datetime.now()
        self.current_stage = stage_id
        
        logger.info(f"–ù–∞—á–∞—Ç —ç—Ç–∞–ø: {stage.name}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if self.update_task:
            self.update_task.cancel()
        self.update_task = asyncio.create_task(self._auto_update())
        
        await self.update_display(force=True)
    
    async def complete_stage(self, stage_id: str):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø"""
        if stage_id not in self.stages:
            return
        
        stage = self.stages[stage_id]
        stage.is_active = False
        stage.is_completed = True
        stage.completed_at = datetime.now()
        
        if stage_id == self.current_stage:
            self.current_stage = None
            
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —ç—Ç–∞–ø: {stage.name}")
        
        await self.update_display()
    
    
    async def update_stage_progress(self, stage_id: str, progress_percent: float = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
        if stage_id not in self.stages or stage_id != self.current_stage:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if progress_percent is not None:
            try:
                p = float(progress_percent)
            except (TypeError, ValueError):
                p = None
            if p is not None:
                if p < 0:
                    p = 0.0
                elif p > 100:
                    p = 100.0
                self.stages[stage_id].progress = p

        await self.update_display()
    
    async def complete_all(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã"""
        if self.update_task:
            task = self.update_task
            self.update_task = None
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
        if self.current_stage:
            await self.complete_stage(self.current_stage)
        
        await self.update_display(final=True)
    
    async def update_display(self, final: bool = False, force: bool = False):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.message is None:
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
                
            # –ò—Å–∫–ª—é—á–∞–µ–º –≥–æ–Ω–∫–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
            async with self._edit_lock:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä —Å–ø–∏–Ω–Ω–µ—Ä–∞, –Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                planned_index = None
                if not final and any(s.is_active for s in self.stages.values()):
                    planned_index = (self._spinner_index + 1) % len(self._spinner_frames)

                text = self._format_progress_text(final, spinner_index=planned_index)

                # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if text == self._last_text:
                    return

                # –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥: –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ _min_edit_interval (–∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
                now = datetime.now()
                if not final and not force and (now - self._last_edit_at).total_seconds() < self._min_edit_interval_seconds:
                    return

                await safe_edit_text(self.message, text, parse_mode="Markdown")
                self._last_text = text
                self._last_edit_at = now
                # –§–∏–∫—Å–∏—Ä—É–µ–º —Å–º–µ–Ω—É –∫–∞–¥—Ä–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if planned_index is not None:
                    self._spinner_index = planned_index
        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if "message is not modified" in str(e).lower():
                logger.debug("–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                return
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def _format_progress_text(self, final: bool = False, spinner_index: Optional[int] = None) -> str:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        if final:
            total_time = datetime.now() - self.start_time
            return (
                "‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time.total_seconds():.0f}—Å\n"
                "üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –≥–æ—Ç–æ–≤ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ."
            )
        
        text = "üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞**\n\n"
        
        for stage_id, stage in self.stages.items():
            if stage.is_completed:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                duration_text = ""
                if stage.started_at and stage.completed_at:
                    total_sec = int((stage.completed_at - stage.started_at).total_seconds())
                    if total_sec < 60:
                        duration_text = f" ¬∑ {total_sec}—Å"
                    else:
                        minutes = total_sec // 60
                        seconds = total_sec % 60
                        if minutes < 60:
                            duration_text = f" ¬∑ {minutes}–º" + (f" {seconds}—Å" if seconds else "")
                        else:
                            hours = minutes // 60
                            rem_min = minutes % 60
                            duration_text = f" ¬∑ {hours}—á" + (f" {rem_min}–º" if rem_min else "")

                text += f"‚úÖ {stage.emoji} {stage.name}{duration_text}\n"
            elif stage.is_active:
                idx = self._spinner_index if spinner_index is None else spinner_index
                spinner = self._spinner_frames[idx]
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ (–±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)
                text += f"üîÑ {stage.emoji} {stage.name} {spinner}\n"
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ (–±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
                text += f"   _{stage.description}_\n"
            else:
                text += f"‚è≥ {stage.emoji} {stage.name}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
        total_elapsed = (datetime.now() - self.start_time).total_seconds()
        if total_elapsed > 10:
            text += f"\n‚è±Ô∏è {total_elapsed:.0f}—Å"
        
        return text
    
    async def _auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è"""
        try:
            while self.current_stage:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                adaptive_interval = self._get_adaptive_interval()
                await asyncio.sleep(adaptive_interval)
                if self.current_stage:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–Ω–∞
                    # –°–¥–≤–∏–≥ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ update_display
                    # –§–æ—Ä—Å–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É—Ç–∏–ª–∞—Å—å –¥–∞–∂–µ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –∞–ø–¥–µ–π—Ç–∞—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    await self.update_display(force=True)
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    async def error(self, stage_id: str, error_message: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —ç—Ç–∞–ø–µ"""
        if self.update_task:
            task = self.update_task
            self.update_task = None
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        stage = self.stages.get(stage_id)
        stage_name = stage.name if stage else stage_id
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        safe_error_message = self._escape_markdown(error_message)
        
        text = (
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
            f"–≠—Ç–∞–ø: {stage_name}\n"
            f"–û—à–∏–±–∫–∞: {safe_error_message}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑."
        )
        
        try:
            if self.message is None:
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            await safe_edit_text(self.message, text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        return text


class ProgressFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    @staticmethod
    async def create_file_processing_tracker(bot: Bot, chat_id: int, 
                                           enable_diarization: bool = True) -> ProgressTracker:
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = await safe_send_message(
            bot, chat_id, 
            "üîÑ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...**\n\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
            parse_mode="Markdown"
        )
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if initial_message is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        
        tracker = ProgressTracker(bot, chat_id, initial_message)
        tracker.setup_default_stages()
        
        return tracker
