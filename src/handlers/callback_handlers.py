"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from services import UserService, TemplateService, EnhancedLLMService, OptimizedProcessingService
from src.utils.pdf_converter import convert_markdown_to_pdf
from src.utils.telegram_safe import safe_edit_text


async def _safe_callback_answer(callback: CallbackQuery, text: str = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        await callback.answer(text=text)
    except Exception as e:
        error_str = str(e).lower()
        if "query is too old" in error_str or "query id is invalid" in error_str:
            logger.debug(f"Callback query —É—Å—Ç–∞—Ä–µ–ª: {e}")
        else:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")


def setup_callback_handlers(user_service: UserService, template_service: TemplateService,
                           llm_service: EnhancedLLMService, processing_service: OptimizedProcessingService) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    router = Router()
    
    @router.callback_query(F.data.startswith("set_llm_"))
    async def set_llm_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ LLM"""
        try:
            llm_provider = callback.data.replace("set_llm_", "")
            
            await user_service.update_user_llm_preference(callback.from_user.id, llm_provider)
            
            available_providers = llm_service.get_available_providers()
            provider_name = available_providers.get(llm_provider, llm_provider)
            
            await safe_edit_text(callback.message, 
                f"‚úÖ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {provider_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç LLM –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫."
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_llm_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    @router.callback_query(F.data == "reset_llm_preference")
    async def reset_llm_preference_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π LLM"""
        try:
            await user_service.update_user_llm_preference(callback.from_user.id, None)
            
            await safe_edit_text(callback.message, 
                "üîÑ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è LLM —Å–±—Ä–æ—à–µ–Ω—ã.\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä LLM –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_llm_preference_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º select_template_)
    @router.callback_query(F.data == "select_template_once")
    async def select_template_once_callback(callback: CallbackQuery, state: FSMContext):
        """–†–∞–∑–æ–≤—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            templates = await template_service.get_all_templates()
            
            if not templates:
                await safe_edit_text(callback.message, 
                    "‚ùå **–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            from collections import defaultdict
            categories = defaultdict(list)
            for template in templates:
                category = template.category or 'general'
                categories[category].append(template)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_names = {
                'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                'general': 'üìã –û–±—â–∏–µ',
                'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
            }
            
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–£–º–Ω—ã–π –≤—ã–±–æ—Ä")
            for category, cat_templates in sorted(categories.items()):
                category_name = category_names.get(category, f'üìÅ {category.title()}')
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{category_name} ({len(cat_templates)})",
                    callback_data=f"select_category_{category}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìù –í—Å–µ —à–∞–±–ª–æ–Ω—ã",
                callback_data="select_category_all"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤:**\n\n"
                "–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_template_once_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("select_category_"))
    async def select_category_callback(callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            await _safe_callback_answer(callback)
            
            category = callback.data.replace("select_category_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "all":
                templates = all_templates
                category_title = "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            else:
                templates = [t for t in all_templates if (t.category or 'general') == category]
                category_names = {
                    'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                    'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    'general': 'üìã –û–±—â–∏–µ',
                    'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
                }
                category_title = category_names.get(category, category.title())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
            templates.sort(key=lambda t: (not t.is_default, t.name))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"select_template_id_{t.id}"
                )] for t in templates
            ]
            
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="select_template_once"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                f"üìã **{category_title}**\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω ({len(templates)}):",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_category_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("select_template_id_"))
    async def select_template_id_callback(callback: CallbackQuery, state: FSMContext):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            await _safe_callback_answer(callback)
            
            template_id = int(callback.data.replace("select_template_id_", ""))
            template = await template_service.get_template_by_id(template_id)
            
            if not template:
                await safe_edit_text(callback.message, 
                    "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                    "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="Markdown"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¢–û–õ–¨–ö–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ù–ï –∫–∞–∫ default_template_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            await state.update_data(template_id=template_id, use_smart_selection=False)
            
            await safe_edit_text(callback.message, 
                f"üìã **–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template.name}**\n\n"
                "–®–∞–±–ª–æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                parse_mode="Markdown"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_template_id_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data.startswith("select_template_"))
    async def select_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            template_id = int(callback.data.replace("select_template_", ""))
            await state.update_data(template_id=template_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_template_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data.startswith("use_default_template_"))
    async def use_default_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            template_id = int(callback.data.replace("use_default_template_", ""))
            await state.update_data(template_id=template_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ use_default_template_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    @router.callback_query(F.data == "show_all_templates")
    async def show_all_templates_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            from services import TemplateService
            template_service = TemplateService()
            
            templates = await template_service.get_all_templates()
            
            if not templates:
                await safe_edit_text(callback.message, "‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"select_template_{t.id}"
                )]
                for t in templates
            ])
            
            await safe_edit_text(callback.message, 
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_templates_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("select_llm_"))
    async def select_llm_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            llm_provider = callback.data.replace("select_llm_", "")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
            await user_service.update_user_llm_preference(callback.from_user.id, llm_provider)
            await state.update_data(llm_provider=llm_provider)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            await _process_file(callback, state, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_llm_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ LLM")
    
    @router.callback_query(F.data.startswith("set_transcription_mode_"))
    async def set_transcription_mode_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        try:
            mode = callback.data.replace("set_transcription_mode_", "")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from config import settings
            settings.transcription_mode = mode
            
            mode_names = {
                "local": "–õ–æ–∫–∞–ª—å–Ω–∞—è (Whisper)",
                "cloud": "–û–±–ª–∞—á–Ω–∞—è (Groq)",
                "hybrid": "–ì–∏–±—Ä–∏–¥–Ω–∞—è (Groq + –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è)",
                "speechmatics": "Speechmatics",
                "deepgram": "Deepgram",
                "leopard": "Leopard (Picovoice)"
            }
            
            mode_name = mode_names.get(mode, mode)
            
            await safe_edit_text(callback.message, 
                f"‚úÖ **–†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:** {mode_name}\n\n"
                f"–ù–æ–≤—ã–π —Ä–µ–∂–∏–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ —Ñ–∞–π–ª–æ–≤.",
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_transcription_mode_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    
    @router.callback_query(F.data.startswith("view_template_category_"))
    async def view_template_category_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            category = callback.data.replace("view_template_category_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "all":
                templates = all_templates
                category_title = "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            else:
                templates = [t for t in all_templates if (t.category or 'general') == category]
                category_names = {
                    'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                    'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    'general': 'üìã –û–±—â–∏–µ',
                    'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
                }
                category_title = category_names.get(category, category.title())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã: is_default —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
            templates.sort(key=lambda t: (not t.is_default, t.name))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"view_template_{t.id}"
                )] for t in templates
            ]
            
            keyboard_buttons.extend([
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data="back_to_templates"
                )]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                f"üìù **{category_title}**\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ view_template_category_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("view_template_"))
    async def view_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        try:
            template_id = int(callback.data.replace("view_template_", ""))
            template = await template_service.get_template_by_id(template_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è: –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –Ω–µ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            try:
                user = await user_service.get_user_by_telegram_id(callback.from_user.id)
                owned_ids = set()
                if user:
                    owned_ids.add(user.id)
                owned_ids.add(callback.from_user.id)  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ legacy-—à–∞–±–ª–æ–Ω–æ–≤
                can_delete = (not template.is_default) and (template.created_by in owned_ids)
            except Exception:
                can_delete = False
            
            text = f"üìù **{template.name}**\n\n"
            if template.description:
                text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {template.description}\n\n"
            
            text += f"```\n{template.content}\n```"
            
            # –ö–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
            rows = []
            if can_delete:
                rows.append([InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=f"delete_template_{template.id}"
                )])
            rows.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤",
                callback_data="back_to_templates"
            )])
            keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await safe_edit_text(callback.message, text, parse_mode="Markdown", reply_markup=keyboard)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ view_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —à–∞–±–ª–æ–Ω–∞")

    @router.callback_query(F.data.startswith("delete_template_"))
    async def delete_template_prompt_callback(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            template_id = int(callback.data.replace("delete_template_", ""))
            template = await template_service.get_template_by_id(template_id)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_template_{template_id}"),
                    InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"view_template_{template_id}")
                ]
            ])
            await safe_edit_text(callback.message, 
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω:\n\n‚Ä¢ {template.name}",
                reply_markup=keyboard
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_template_prompt_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")

    @router.callback_query(F.data.startswith("confirm_delete_template_"))
    async def confirm_delete_template_callback(callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            template_id = int(callback.data.replace("confirm_delete_template_", ""))
            success = await template_service.delete_template(callback.from_user.id, template_id)

            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                templates = await template_service.get_all_templates()
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                        callback_data=f"view_template_{t.id}"
                    )] for t in templates
                ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="add_template")]])

                await safe_edit_text(callback.message, 
                    "üóë –®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω.\n\nüìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                await callback.answer()
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_template_callback: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data == "back_to_templates")
    async def back_to_templates_callback(callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            templates = await template_service.get_all_templates()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            from collections import defaultdict
            categories = defaultdict(list)
            for template in templates:
                category = template.category or 'general'
                categories[category].append(template)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_names = {
                'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                'general': 'üìã –û–±—â–∏–µ',
                'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
            }
            
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category, cat_templates in sorted(categories.items()):
                category_name = category_names.get(category, f'üìÅ {category.title()}')
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{category_name} ({len(cat_templates)})",
                    callback_data=f"view_template_category_{category}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìù –í—Å–µ —à–∞–±–ª–æ–Ω—ã",
                callback_data="view_template_category_all"
            )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω",
                callback_data="add_template"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                f"üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:** {len(templates)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_templates_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @router.callback_query(F.data == "settings_preferred_llm")
    async def settings_preferred_llm_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ò–ò"""
        try:
            available_providers = llm_service.get_available_providers()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ LLM
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"ü§ñ {provider_name}",
                    callback_data=f"set_llm_{provider_key}"
                )] for provider_key, provider_name in available_providers.items()
            ] + [
                [InlineKeyboardButton(
                    text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ",
                    callback_data="reset_llm_preference"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])
            
            await safe_edit_text(callback.message, 
                "ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ò–ò**\n\n"
                "–≠—Ç–æ—Ç –ò–ò –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫:",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_preferred_llm_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data == "settings_openai_model")
    async def settings_openai_model_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenAI"""
        try:
            from config import settings as app_settings
            models = getattr(app_settings, 'openai_models', [])
            if not models or len(models) == 0:
                await safe_edit_text(callback.message, 
                    "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –º–æ–¥–µ–ª–∏ OpenAI.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è `OPENAI_MODELS` —Å –ø–µ—Ä–µ—á–Ω–µ–º –ø—Ä–µ—Å–µ—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                    ])
                )
                await callback.answer()
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≤—ã–±–æ—Ä
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            selected_key = getattr(user, 'preferred_openai_model_key', None) if user else None

            keyboard_rows = []
            for p in models:
                label = f"{'‚úÖ ' if selected_key == p.key else ''}{p.name}"
                keyboard_rows.append([InlineKeyboardButton(text=label, callback_data=f"set_openai_model_{p.key}")])
            keyboard_rows.append([InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", callback_data="reset_openai_model_preference")])
            keyboard_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")])

            await safe_edit_text(callback.message, 
                "üß† **–ú–æ–¥–µ–ª—å OpenAI**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ OpenAI:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_openai_model_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ OpenAI")

    @router.callback_query(F.data.startswith("set_openai_model_"))
    async def set_openai_model_callback(callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å OpenAI"""
        try:
            model_key = callback.data.replace("set_openai_model_", "")
            await user_service.update_user_openai_model_preference(callback.from_user.id, model_key)
            # –ù–∞—Ö–æ–¥–∏–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            try:
                from config import settings as app_settings
                preset = next((p for p in getattr(app_settings, 'openai_models', []) if p.key == model_key), None)
                model_name = preset.name if preset else model_key
            except Exception:
                model_name = model_key
            await safe_edit_text(callback.message, 
                f"‚úÖ –ú–æ–¥–µ–ª—å OpenAI –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {model_name}.\n\n"
                "–û–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ OpenAI.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ])
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_openai_model_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")

    @router.callback_query(F.data == "reset_openai_model_preference")
    async def reset_openai_model_preference_callback(callback: CallbackQuery):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å OpenAI"""
        try:
            await user_service.update_user_openai_model_preference(callback.from_user.id, None)
            await safe_edit_text(callback.message, 
                "üîÑ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI —Å–±—Ä–æ—à–µ–Ω.\n\n"
                "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ—Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ])
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_openai_model_preference_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    
    
    
    @router.callback_query(F.data == "settings_default_template")
    async def settings_default_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            if not all_templates:
                # –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìù –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω",
                        callback_data="create_template"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await safe_edit_text(callback.message, 
                    "üìù **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
                    reply_markup=keyboard
                )
            else:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                from collections import defaultdict
                categories = defaultdict(list)
                for template in all_templates:
                    category = template.category or 'general'
                    categories[category].append(template)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                category_names = {
                    'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                    'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    'general': 'üìã –û–±—â–∏–µ',
                    'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
                }
                
                keyboard_buttons = []
                
                # –ü–ï–†–í–ê–Ø –∫–Ω–æ–ø–∫–∞ - –£–º–Ω—ã–π –≤—ã–±–æ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
                keyboard_buttons.append([InlineKeyboardButton(
                    text="ü§ñ –£–º–Ω—ã–π –≤—ã–±–æ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                    callback_data="set_default_template_0"  # 0 = —É–º–Ω—ã–π –≤—ã–±–æ—Ä
                )])
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
                for category, templates in sorted(categories.items()):
                    category_name = category_names.get(category, f'üìÅ {category.title()}')
                    keyboard_buttons.append([InlineKeyboardButton(
                        text=f"{category_name} ({len(templates)})",
                        callback_data=f"template_category_{category}"
                    )])
                
                keyboard_buttons.extend([
                    [InlineKeyboardButton(
                        text="üìù –í—Å–µ —à–∞–±–ª–æ–Ω—ã",
                        callback_data="template_category_all"
                    )],
                    [InlineKeyboardButton(
                        text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                        callback_data="reset_default_template"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                
                await safe_edit_text(callback.message, 
                    "üìù **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**\n\n"
                    "ü§ñ **–£–º–Ω—ã–π –≤—ã–±–æ—Ä** - –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω\n"
                    "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏** - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    @router.callback_query(F.data.startswith("template_category_"))
    async def template_category_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            category = callback.data.replace("template_category_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "all":
                templates = all_templates
                category_title = "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            else:
                templates = [t for t in all_templates if (t.category or 'general') == category]
                category_names = {
                    'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                    'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    'general': 'üìã –û–±—â–∏–µ',
                    'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
                }
                category_title = category_names.get(category, category.title())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã: is_default —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
            templates.sort(key=lambda t: (not t.is_default, t.name))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"set_default_template_{t.id}"
                )] for t in templates
            ]
            
            keyboard_buttons.extend([
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data="settings_default_template"
                )]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                f"üìù **{category_title}**\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ template_category_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("file_template_category_"))
    async def file_template_category_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞"""
        try:
            category = callback.data.replace("file_template_category_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "all":
                templates = all_templates
                category_title = "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            else:
                templates = [t for t in all_templates if (t.category or 'general') == category]
                category_names = {
                    'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                    'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    'general': 'üìã –û–±—â–∏–µ',
                    'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
                }
                category_title = category_names.get(category, category.title())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã: is_default —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
            templates.sort(key=lambda t: (not t.is_default, t.name))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"select_template_{t.id}"
                )] for t in templates
            ]
            
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_template_categories"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                f"üìù **{category_title}**\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ file_template_category_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data == "back_to_template_categories")
    async def back_to_template_categories_callback(callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            templates = await template_service.get_all_templates()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            from collections import defaultdict
            categories = defaultdict(list)
            for template in templates:
                category = template.category or 'general'
                categories[category].append(template)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_names = {
                'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                'general': 'üìã –û–±—â–∏–µ',
                'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
            }
            
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            keyboard_buttons.append([InlineKeyboardButton(
                text="ü§ñ –£–º–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞",
                callback_data="smart_template_selection"
            )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category, cat_templates in sorted(categories.items()):
                category_name = category_names.get(category, f'üìÅ {category.title()}')
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{category_name} ({len(cat_templates)})",
                    callback_data=f"file_template_category_{category}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìù –í—Å–µ —à–∞–±–ª–æ–Ω—ã",
                callback_data="file_template_category_all"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                "üìù **–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:**\n\n"
                "ü§ñ **–£–º–Ω—ã–π –≤—ã–±–æ—Ä** - –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω\n"
                "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏** - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_template_categories_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.callback_query(F.data == "smart_template_selection")
    async def smart_template_selection_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ ML"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º template_id - –ø–æ–∑–≤–æ–ª—è–µ–º ML-—Å–µ–ª–µ–∫—Ç–æ—Ä—É –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            await state.update_data(template_id=0, use_smart_selection=True)
            
            await safe_edit_text(callback.message, 
                "ü§ñ **–£–º–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                "–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç "
                "–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
                "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                parse_mode="Markdown"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è callback
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ smart_template_selection_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞")
    
    @router.callback_query(F.data == "quick_smart_select")
    async def quick_smart_selection_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–º–Ω—ã–π –≤—ã–±–æ—Ä
            await state.update_data(template_id=0, use_smart_selection=True)
            
            await safe_edit_text(callback.message, 
                "ü§ñ **–£–º–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞**\n\n"
                "–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
                "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                parse_mode="Markdown"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ quick_smart_selection_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data == "use_saved_default")
    async def use_saved_default_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            
            if not user or not user.default_template_id:
                await safe_edit_text(callback.message, 
                    "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                    "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                    parse_mode="Markdown"
                )
                return
            
            # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É–º–Ω—ã–π –≤—ã–±–æ—Ä (template_id = 0)
            if user.default_template_id == 0:
                await state.update_data(template_id=0, use_smart_selection=True)
                await safe_edit_text(callback.message, 
                    "ü§ñ **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –£–º–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞**\n\n"
                    "–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
                    "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    parse_mode="Markdown"
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
                template = await template_service.get_template_by_id(user.default_template_id)
                if not template:
                    await safe_edit_text(callback.message, 
                        "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                        "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode="Markdown"
                    )
                    return
                
                await state.update_data(template_id=template.id, use_smart_selection=False)
                await safe_edit_text(callback.message, 
                    f"üìã **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω: {template.name}**\n\n"
                    "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    parse_mode="Markdown"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ use_saved_default_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data == "quick_set_default")
    async def quick_set_default_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _safe_callback_answer(callback)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            templates = await template_service.get_all_templates()
            
            if not templates:
                await safe_edit_text(callback.message, 
                    "‚ùå **–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            from collections import defaultdict
            categories = defaultdict(list)
            for template in templates:
                category = template.category or 'general'
                categories[category].append(template)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_names = {
                'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                'general': 'üìã –û–±—â–∏–µ',
                'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
            }
            
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–£–º–Ω—ã–π –≤—ã–±–æ—Ä" –ø–µ—Ä–≤–æ–π
            keyboard_buttons.append([InlineKeyboardButton(
                text="ü§ñ –£–º–Ω—ã–π –≤—ã–±–æ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                callback_data="quick_template_smart"
            )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category, cat_templates in sorted(categories.items()):
                category_name = category_names.get(category, f'üìÅ {category.title()}')
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{category_name} ({len(cat_templates)})",
                    callback_data=f"quick_category_{category}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìù –í—Å–µ —à–∞–±–ª–æ–Ω—ã",
                callback_data="quick_category_all"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                "‚öôÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n\n"
                "–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ quick_set_default_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("quick_category_"))
    async def quick_category_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞"""
        try:
            await _safe_callback_answer(callback)
            
            category = callback.data.replace("quick_category_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category == "all":
                templates = all_templates
                category_title = "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            else:
                templates = [t for t in all_templates if (t.category or 'general') == category]
                category_names = {
                    'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                    'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                    'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    'general': 'üìã –û–±—â–∏–µ',
                    'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
                }
                category_title = category_names.get(category, category.title())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
            templates.sort(key=lambda t: (not t.is_default, t.name))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"quick_template_{t.id}"
                )] for t in templates
            ]
            
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="quick_set_default"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await safe_edit_text(callback.message, 
                f"‚öôÔ∏è **{category_title}**\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω ({len(templates)}):",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ quick_category_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("quick_template_"))
    async def quick_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            await _safe_callback_answer(callback)
            
            template_ref = callback.data.replace("quick_template_", "")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π "smart"
            if template_ref == "smart":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–º–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–∫ —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (id = 0)
                await template_service.set_user_default_template(callback.from_user.id, 0)
                await state.update_data(template_id=0, use_smart_selection=True)
                
                await safe_edit_text(callback.message, 
                    "‚úÖ **–£–º–Ω—ã–π –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**\n\n"
                    "ü§ñ –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω.\n\n"
                    "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    parse_mode="Markdown"
                )
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                template_id = int(template_ref)
                template = await template_service.get_template_by_id(template_id)
                
                if not template:
                    await safe_edit_text(callback.message, 
                        "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                        "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode="Markdown"
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await template_service.set_user_default_template(callback.from_user.id, template_id)
                await state.update_data(template_id=template_id, use_smart_selection=False)
                
                await safe_edit_text(callback.message, 
                    f"‚úÖ **–®–∞–±–ª–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {template.name}**\n\n"
                    f"–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                    "‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    parse_mode="Markdown"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ quick_template_callback: {e}")
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data == "settings_reset")
    async def settings_reset_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_service.update_user_llm_preference(callback.from_user.id, None)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                await user_service.update_user_protocol_output_preference(callback.from_user.id, 'messages')
            except Exception:
                pass
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])
            
            await safe_edit_text(callback.message, 
                "üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã**\n\n"
                "–í—Å–µ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n\n"
                "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ò–ò —Å–±—Ä–æ—à–µ–Ω—ã\n"
                "‚Ä¢ –®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω\n"
                "‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_reset_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data == "settings_protocol_output")
    async def settings_protocol_output_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            current = getattr(user, 'protocol_output_mode', None) or 'messages'

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current == 'messages' else ''}üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏—è",
                    callback_data="set_protocol_output_messages"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current == 'file' else ''}üìé –í —Ñ–∞–π–ª md",
                    callback_data="set_protocol_output_file"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current == 'pdf' else ''}üìÑ –í —Ñ–∞–π–ª pdf",
                    callback_data="set_protocol_output_pdf"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])

            await safe_edit_text(callback.message, 
                "üì§ **–í—ã–≤–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª:\n"
                "‚Ä¢ üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
                "‚Ä¢ üìé –í —Ñ–∞–π–ª md ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (.md)\n"
                "‚Ä¢ üìÑ –í —Ñ–∞–π–ª pdf ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (.pdf)",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_protocol_output_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data.in_({"set_protocol_output_messages", "set_protocol_output_file", "set_protocol_output_pdf"}))
    async def set_protocol_output_mode_callback(callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        try:
            if callback.data.endswith('messages'):
                mode = 'messages'
                mode_text = "üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏—è"
            elif callback.data.endswith('pdf'):
                mode = 'pdf'
                mode_text = "üìÑ –í —Ñ–∞–π–ª pdf"
            else:
                mode = 'file'
                mode_text = "üìé –í —Ñ–∞–π–ª md"
            
            await user_service.update_user_protocol_output_preference(callback.from_user.id, mode)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])

            await safe_edit_text(callback.message, 
                f"‚úÖ –†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {mode_text}",
                reply_markup=keyboard
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_protocol_output_mode_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞")
    
    @router.callback_query(F.data == "back_to_settings")
    async def back_to_settings_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            from ux.quick_actions import QuickActionsUI
            
            keyboard = QuickActionsUI.create_settings_menu()
            
            await safe_edit_text(callback.message, 
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_settings_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
    
    
    
    @router.callback_query(F.data.startswith("set_default_template_"))
    async def set_default_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            template_id = int(callback.data.replace("set_default_template_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            success = await template_service.set_user_default_template(callback.from_user.id, template_id)
            
            if success:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                # –ï—Å–ª–∏ template_id = 0, —ç—Ç–æ "–£–º–Ω—ã–π –≤—ã–±–æ—Ä"
                if template_id == 0:
                    await safe_edit_text(callback.message, 
                        "‚úÖ **–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: –£–º–Ω—ã–π –≤—ã–±–æ—Ä**\n\n"
                        "ü§ñ –ò–ò –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω "
                        "–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –≤—Å—Ç—Ä–µ—á–∏.\n\n"
                        "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:\n"
                        "‚Ä¢ –¢–µ–º–∞—Ç–∏–∫–∞ –≤—Å—Ç—Ä–µ—á–∏\n"
                        "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
                        "–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                        "üí° –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.",
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                    template = await template_service.get_template_by_id(template_id)
                    
                    await safe_edit_text(callback.message, 
                        f"‚úÖ **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                        f"–¢–µ–ø–µ—Ä—å —à–∞–±–ª–æ–Ω **{template.name}** –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
                        f"–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await safe_edit_text(callback.message, 
                    "‚ùå **–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —à–∞–±–ª–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                    reply_markup=keyboard
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à–∞–±–ª–æ–Ω–∞")
    
    
    
    @router.callback_query(F.data == "reset_default_template")
    async def reset_default_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ template_service
            success = await template_service.reset_user_default_template(callback.from_user.id)
            
            if success:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await safe_edit_text(callback.message, 
                    "üîÑ **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω**\n\n"
                    "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n\n"
                    "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'ü§ñ –£–º–Ω—ã–π –≤—ã–±–æ—Ä' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ "
                    "–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                await callback.answer()
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —à–∞–±–ª–æ–Ω–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    @router.callback_query(F.data.startswith("cancel_task_"))
    async def cancel_task_handler(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
        await _cancel_task_callback(callback, state)
    
    # ============================================================================
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤
    # ============================================================================
    
    @router.callback_query(F.data.startswith("sm_change:"))
    async def speaker_mapping_change_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞"""
        try:
            await _safe_callback_answer(callback)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: sm_change:{speaker_id}:{user_id}
            parts = callback.data.split(":")
            if len(parts) < 3:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            speaker_id = parts[1]
            user_id_from_callback = int(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if callback.from_user.id != user_id_from_callback:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from src.services.mapping_state_cache import mapping_state_cache
            state_data = await mapping_state_cache.load_state(user_id_from_callback)
            
            if not state_data:
                await safe_edit_text(
                    callback.message,
                    "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
                )
                await callback.answer()
                return
            
            speaker_mapping = state_data.get('speaker_mapping', {})
            diarization_data = state_data.get('diarization_data', {})
            participants = state_data.get('participants_list', [])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º speakers_text –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            transcription_result = state_data.get('transcription_result', {})
            speakers_text = transcription_result.get('speakers_text') if transcription_result else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
            from src.ux.speaker_mapping_ui import update_mapping_message
            await update_mapping_message(
                callback.message,
                speaker_mapping,
                diarization_data,
                participants,
                user_id_from_callback,
                current_editing_speaker=speaker_id,
                speakers_text=speakers_text
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ speaker_mapping_change_callback: {e}", exc_info=True)
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.callback_query(F.data.startswith("sm_select:"))
    async def speaker_mapping_select_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞"""
        try:
            await _safe_callback_answer(callback)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: sm_select:{speaker_id}:{participant_idx}:{user_id}
            parts = callback.data.split(":")
            if len(parts) < 4:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            speaker_id = parts[1]
            participant_idx_str = parts[2]
            user_id_from_callback = int(parts[3])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if callback.from_user.id != user_id_from_callback:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from src.services.mapping_state_cache import mapping_state_cache
            state_data = await mapping_state_cache.load_state(user_id_from_callback)
            
            if not state_data:
                await safe_edit_text(
                    callback.message,
                    "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
                )
                await callback.answer()
                return
            
            speaker_mapping = state_data.get('speaker_mapping', {}).copy()
            diarization_data = state_data.get('diarization_data', {})
            participants = state_data.get('participants_list', [])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            if participant_idx_str == "none":
                # –£–¥–∞–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                speaker_mapping.pop(speaker_id, None)
                await callback.answer("‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            else:
                try:
                    participant_idx = int(participant_idx_str)
                    if 0 <= participant_idx < len(participants):
                        participant_name = participants[participant_idx].get('name', '')
                        if participant_name:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –¥—Ä—É–≥–∏–º —Å–ø–∏–∫–µ—Ä–æ–º
                            used_by = None
                            for sid, pname in speaker_mapping.items():
                                if sid != speaker_id and pname == participant_name:
                                    used_by = sid
                                    break
                            
                            if used_by:
                                await callback.answer(
                                    f"‚ö†Ô∏è –≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω —Å {used_by}",
                                    show_alert=True
                                )
                                return
                            
                            speaker_mapping[speaker_id] = participant_name
                            await callback.answer("‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
                        else:
                            await callback.answer("‚ùå –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            return
                    else:
                        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                        return
                except ValueError:
                    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞")
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–µ—à–µ
            await mapping_state_cache.update_mapping(user_id_from_callback, speaker_mapping)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º speakers_text –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            transcription_result = state_data.get('transcription_result', {})
            speakers_text = transcription_result.get('speakers_text') if transcription_result else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∏–¥—É)
            from src.ux.speaker_mapping_ui import update_mapping_message
            await update_mapping_message(
                callback.message,
                speaker_mapping,
                diarization_data,
                participants,
                user_id_from_callback,
                current_editing_speaker=None,
                speakers_text=speakers_text
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ speaker_mapping_select_callback: {e}", exc_info=True)
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.callback_query(F.data.startswith("sm_cancel:"))
    async def speaker_mapping_cancel_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∏–¥—É)"""
        try:
            await _safe_callback_answer(callback)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: sm_cancel:{user_id}
            parts = callback.data.split(":")
            if len(parts) < 2:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            user_id_from_callback = int(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if callback.from_user.id != user_id_from_callback:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from src.services.mapping_state_cache import mapping_state_cache
            state_data = await mapping_state_cache.load_state(user_id_from_callback)
            
            if not state_data:
                await safe_edit_text(
                    callback.message,
                    "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
                )
                await callback.answer()
                return
            
            speaker_mapping = state_data.get('speaker_mapping', {})
            diarization_data = state_data.get('diarization_data', {})
            participants = state_data.get('participants_list', [])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º speakers_text –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            transcription_result = state_data.get('transcription_result', {})
            speakers_text = transcription_result.get('speakers_text') if transcription_result else None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∏–¥—É
            from src.ux.speaker_mapping_ui import update_mapping_message
            await update_mapping_message(
                callback.message,
                speaker_mapping,
                diarization_data,
                participants,
                user_id_from_callback,
                current_editing_speaker=None,
                speakers_text=speakers_text
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ speaker_mapping_cancel_callback: {e}", exc_info=True)
            await _safe_callback_answer(callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.callback_query(F.data.startswith("sm_confirm:"))
    async def speaker_mapping_confirm_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            await _safe_callback_answer(callback, "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: sm_confirm:{user_id}
            parts = callback.data.split(":")
            if len(parts) < 2:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            user_id_from_callback = int(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if callback.from_user.id != user_id_from_callback:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from src.services.mapping_state_cache import mapping_state_cache
            state_data = await mapping_state_cache.load_state(user_id_from_callback)
            
            if not state_data:
                await safe_edit_text(
                    callback.message,
                    "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
                )
                return
            
            speaker_mapping = state_data.get('speaker_mapping', {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_edit_text(
                callback.message,
                "‚úÖ **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ**\n\n"
                "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...",
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            await processing_service.continue_processing_after_mapping_confirmation(
                user_id=user_id_from_callback,
                confirmed_mapping=speaker_mapping,
                bot=callback.bot,
                chat_id=callback.message.chat.id
            )
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await mapping_state_cache.clear_state(user_id_from_callback)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ speaker_mapping_confirm_callback: {e}", exc_info=True)
            await safe_edit_text(
                callback.message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
            )
    
    @router.callback_query(F.data.startswith("sm_skip:"))
    async def speaker_mapping_skip_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ –∏–º–µ–Ω)"""
        try:
            await _safe_callback_answer(callback, "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: sm_skip:{user_id}
            parts = callback.data.split(":")
            if len(parts) < 2:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            user_id_from_callback = int(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if callback.from_user.id != user_id_from_callback:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from src.services.mapping_state_cache import mapping_state_cache
            state_data = await mapping_state_cache.load_state(user_id_from_callback)
            
            if not state_data:
                await safe_edit_text(
                    callback.message,
                    "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
                )
                return
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º mapping
            empty_mapping = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_edit_text(
                callback.message,
                "‚è≠Ô∏è **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ**\n\n"
                "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –±–µ–∑ –∑–∞–º–µ–Ω—ã –∏–º–µ–Ω —Å–ø–∏–∫–µ—Ä–æ–≤...",
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø—É—Å—Ç—ã–º mapping
            await processing_service.continue_processing_after_mapping_confirmation(
                user_id=user_id_from_callback,
                confirmed_mapping=empty_mapping,
                bot=callback.bot,
                chat_id=callback.message.chat.id
            )
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await mapping_state_cache.clear_state(user_id_from_callback)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ speaker_mapping_skip_callback: {e}", exc_info=True)
            await safe_edit_text(
                callback.message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
            )
    
    return router


async def _show_llm_selection(callback: CallbackQuery, state: FSMContext, 
                             user_service: UserService, llm_service: EnhancedLLMService,
                             processing_service: OptimizedProcessingService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä LLM –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    available_providers = llm_service.get_available_providers()
    
    if not available_providers:
        await safe_edit_text(callback.message, 
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if user and user.preferred_llm is not None:
        preferred_llm = user.preferred_llm
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –¥–æ—Å—Ç—É–ø–µ–Ω
        if preferred_llm in available_providers:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await state.update_data(llm_provider=preferred_llm)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: –¥–ª—è OpenAI –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            llm_display = available_providers[preferred_llm]
            if preferred_llm == 'openai':
                try:
                    from config import settings as app_settings
                    selected_key = getattr(user, 'preferred_openai_model_key', None)
                    preset = None
                    if selected_key:
                        preset = next((p for p in getattr(app_settings, 'openai_models', []) if p.key == selected_key), None)
                    if not preset:
                        models = getattr(app_settings, 'openai_models', [])
                        if models:
                            preset = models[0]
                    if preset and getattr(preset, 'name', None):
                        llm_display = preset.name
                except Exception:
                    pass
            await safe_edit_text(callback.message, 
                f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LLM: {llm_display}\n\n"
                "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –ø–µ—Ä–µ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            await _safe_callback_answer(callback)
            await _process_file(callback, state, processing_service)
            return
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    current_llm = user.preferred_llm if user else 'openai'
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{'‚úÖ ' if provider_key == current_llm else ''}{provider_name}",
            callback_data=f"select_llm_{provider_key}"
        )]
        for provider_key, provider_name in available_providers.items()
    ])
    
    await safe_edit_text(callback.message, 
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=keyboard
    )


async def _process_file(callback: CallbackQuery, state: FSMContext, processing_service: OptimizedProcessingService):
    """–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞"""
    from src.models.processing import ProcessingRequest
    from src.services.task_queue_manager import task_queue_manager
    from src.models.task_queue import TaskPriority
    from src.ux.queue_tracker import QueueTrackerFactory
    import asyncio
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ state –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –∏–∑ state –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º request (callback):")
        participants_list = data.get('participants_list')
        if participants_list:
            logger.info(f"  participants_list: {len(participants_list)} —á–µ–ª.")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            for i, p in enumerate(participants_list[:3], 1):
                logger.info(f"    {i}. {p.get('name')} ({p.get('role', '–±–µ–∑ —Ä–æ–ª–∏')})")
            if len(participants_list) > 3:
                logger.info(f"    ... –∏ –µ—â–µ {len(participants_list) - 3} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            logger.warning("  participants_list: None (–ù–ï –ü–ï–†–ï–î–ê–ù!)")
        logger.info(f"  meeting_topic: {data.get('meeting_topic')}")
        logger.info(f"  meeting_date: {data.get('meeting_date')}")
        logger.info(f"  meeting_time: {data.get('meeting_time')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ LLM (template_id –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
        if not data.get('llm_provider'):
            await safe_edit_text(callback.message, 
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
            )
            await state.clear()
            return
        
        # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–º–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ template_id
        if not data.get('use_smart_selection') and not data.get('template_id'):
            await safe_edit_text(callback.message, 
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ª–∏–±–æ file_id (–¥–ª—è Telegram —Ñ–∞–π–ª–æ–≤), –ª–∏–±–æ file_path (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
        is_external_file = data.get('is_external_file', False)
        if is_external_file:
            if not data.get('file_path') or not data.get('file_name'):
                await safe_edit_text(callback.message, 
                    "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
                )
                await state.clear()
                return
        else:
            if not data.get('file_id') or not data.get('file_name'):
                await safe_edit_text(callback.message, 
                    "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
                )
                await state.clear()
                return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        request = ProcessingRequest(
            file_id=data.get('file_id') if not is_external_file else None,
            file_path=data.get('file_path') if is_external_file else None,
            file_name=data['file_name'],
            file_url=data.get('file_url'),  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
            template_id=data['template_id'],
            llm_provider=data['llm_provider'],
            user_id=callback.from_user.id,
            language="ru",
            is_external_file=is_external_file,
            # –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ
            participants_list=data.get('participants_list'),
            meeting_topic=data.get('meeting_topic'),
            meeting_date=data.get('meeting_date'),
            meeting_time=data.get('meeting_time')
        )
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ProcessingRequest —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        logger.info(f"üîç ProcessingRequest —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:")
        if request.participants_list:
            logger.info(f"  request.participants_list: {len(request.participants_list)} —á–µ–ª.")
        else:
            logger.warning(f"  request.participants_list: None (–ù–ï –ü–û–ü–ê–õ –í REQUEST!)")
        logger.info(f"  request.meeting_topic: {request.meeting_topic}")
        logger.info(f"  request.meeting_date: {request.meeting_date}")
        logger.info(f"  request.meeting_time: {request.meeting_time}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        queued_task = await task_queue_manager.add_task(
            request=request,
            chat_id=callback.message.chat.id,
            priority=TaskPriority.NORMAL
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
        position = await task_queue_manager.get_queue_position(str(queued_task.task_id))
        total_in_queue = await task_queue_manager.get_queue_size()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        queue_tracker = await QueueTrackerFactory.create_tracker(
            bot=callback.bot,
            chat_id=callback.message.chat.id,
            task_id=str(queued_task.task_id),
            initial_position=position if position is not None else 0,
            total_in_queue=total_in_queue
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –∑–∞–¥–∞—á–µ
        if queue_tracker.message_id:
            queued_task.message_id = queue_tracker.message_id
            from database import db
            await db.update_queue_task_message_id(str(queued_task.task_id), queue_tracker.message_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        from src.handlers.message_handlers import _monitor_queue_position
        asyncio.create_task(_monitor_queue_position(
            queue_tracker, queued_task.task_id, task_queue_manager
        ))
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–ó–∞–¥–∞—á–∞ {queued_task.task_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ callback")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {e}")
        await safe_edit_text(callback.message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
async def _cancel_task_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    from src.services.task_queue_manager import task_queue_manager
    from src.ux.queue_tracker import QueuePositionTracker
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ callback_data
        task_id = callback.data.replace("cancel_task_", "")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        success = await task_queue_manager.cancel_task(task_id)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            tracker = QueuePositionTracker(callback.bot, callback.message.chat.id, task_id)
            tracker.message_id = callback.message.message_id
            await tracker.show_cancelled()
            
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        else:
            # –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            await callback.answer(
                "–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏", show_alert=True)


# –°—Ç–∞—Ä—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ _process_file - —É–¥–∞–ª–µ–Ω–æ
# –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á


async def _send_long_message(chat_id: int, text: str, bot, max_length: int = 4096):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º"""
    # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —á–∞—Å—Ç–∏
    header_template = "üìÑ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏** (—á–∞—Å—Ç—å {}/{})\n\n"
    max_header_length = len(header_template.format(999, 999))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    max_part_length = max_length - max_header_length
    
    if len(text) <= max_length:
        try:
            await bot.send_message(chat_id, text, parse_mode="Markdown")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
            await bot.send_message(chat_id, text)
            return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""
    
    for line in text.split('\n'):
        if len(current_part) + len(line) + 1 <= max_part_length:
            current_part += line + '\n'
        else:
            if current_part:
                parts.append(current_part.strip())
            current_part = line + '\n'
    
    if current_part:
        parts.append(current_part.strip())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    for i, part in enumerate(parts):
        try:
            header = f"üìÑ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏** (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n"
            full_message = header + part
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
            if len(full_message) > max_length:
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
                await bot.send_message(chat_id, full_message)
            else:
                await bot.send_message(chat_id, full_message, parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown
            try:
                header = f"üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n"
                await bot.send_message(chat_id, header + part)
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {e2}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                await bot.send_message(chat_id, part[:max_length])


