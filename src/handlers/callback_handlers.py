"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from services import UserService, TemplateService, EnhancedLLMService, OptimizedProcessingService


def _convert_markdown_to_pdf(markdown_text: str, output_path: str) -> None:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown —Ç–µ–∫—Å—Ç –≤ PDF —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    
    Args:
        markdown_text: —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        output_path: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É
    """
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import cm
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_LEFT
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    import re
    import os
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    # –ò—â–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    font_registered = False
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è macOS
    possible_fonts = [
        # macOS
        '/System/Library/Fonts/Helvetica.ttc',
        '/System/Library/Fonts/Supplemental/Arial Unicode.ttf',
        '/Library/Fonts/Arial Unicode.ttf',
        # Linux
        '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
        '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',
    ]
    
    for font_path in possible_fonts:
        if os.path.exists(font_path):
            try:
                if font_path.endswith('.ttc'):
                    # TrueType Collection - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —à—Ä–∏—Ñ—Ç
                    pdfmetrics.registerFont(TTFont('CustomFont', font_path, subfontIndex=0))
                    pdfmetrics.registerFont(TTFont('CustomFont-Bold', font_path, subfontIndex=1))
                else:
                    pdfmetrics.registerFont(TTFont('CustomFont', font_path))
                    pdfmetrics.registerFont(TTFont('CustomFont-Bold', font_path))
                font_registered = True
                break
            except Exception:
                continue
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Helvetica
    font_name = 'CustomFont' if font_registered else 'Helvetica'
    font_name_bold = 'CustomFont-Bold' if font_registered else 'Helvetica-Bold'
    
    # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
    doc = SimpleDocTemplate(
        output_path,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # –°—Ç–∏–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
    styles = getSampleStyleSheet()
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    styles.add(ParagraphStyle(
        name='CustomTitle',
        fontName=font_name_bold,
        fontSize=24,
        textColor=colors.HexColor('#2c3e50'),
        spaceAfter=12,
        spaceBefore=12,
        leading=28
    ))
    
    styles.add(ParagraphStyle(
        name='CustomHeading2',
        fontName=font_name_bold,
        fontSize=18,
        textColor=colors.HexColor('#34495e'),
        spaceAfter=10,
        spaceBefore=10,
        leading=22
    ))
    
    styles.add(ParagraphStyle(
        name='CustomHeading3',
        fontName=font_name_bold,
        fontSize=14,
        textColor=colors.HexColor('#7f8c8d'),
        spaceAfter=8,
        spaceBefore=8,
        leading=18
    ))
    
    styles.add(ParagraphStyle(
        name='CustomBody',
        fontName=font_name,
        fontSize=12,
        leading=16,
        alignment=TA_LEFT
    ))
    
    # –ü–∞—Ä—Å–∏–Ω–≥ markdown –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    story = []
    lines = markdown_text.split('\n')
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line:
            story.append(Spacer(1, 0.3*cm))
            i += 1
            continue
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        if line.startswith('# '):
            text = line[2:].strip()
            story.append(Paragraph(text, styles['CustomTitle']))
        elif line.startswith('## '):
            text = line[3:].strip()
            story.append(Paragraph(text, styles['CustomHeading2']))
        elif line.startswith('### '):
            text = line[4:].strip()
            story.append(Paragraph(text, styles['CustomHeading3']))
        
        # –°–ø–∏—Å–∫–∏
        elif line.startswith('- ') or line.startswith('* '):
            text = '‚Ä¢ ' + line[2:].strip()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö
            text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
            text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
            story.append(Paragraph(text, styles['CustomBody']))
        elif re.match(r'^\d+\.\s', line):
            text = line
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö
            text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
            text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
            story.append(Paragraph(text, styles['CustomBody']))
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **text**
            text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', line)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å–∏–≤ *text*
            text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
            story.append(Paragraph(text, styles['CustomBody']))
        
        i += 1
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    doc.build(story)


def setup_callback_handlers(user_service: UserService, template_service: TemplateService,
                           llm_service: EnhancedLLMService, processing_service: OptimizedProcessingService) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    router = Router()
    
    @router.callback_query(F.data.startswith("set_llm_"))
    async def set_llm_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ LLM"""
        try:
            llm_provider = callback.data.replace("set_llm_", "")
            
            await user_service.update_user_llm_preference(callback.from_user.id, llm_provider)
            
            available_providers = llm_service.get_available_providers()
            provider_name = available_providers.get(llm_provider, llm_provider)
            
            await callback.message.edit_text(
                f"‚úÖ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {provider_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç LLM –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫."
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_llm_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    @router.callback_query(F.data == "reset_llm_preference")
    async def reset_llm_preference_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π LLM"""
        try:
            await user_service.update_user_llm_preference(callback.from_user.id, None)
            
            await callback.message.edit_text(
                "üîÑ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è LLM —Å–±—Ä–æ—à–µ–Ω—ã.\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä LLM –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_llm_preference_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    @router.callback_query(F.data.startswith("select_template_"))
    async def select_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        try:
            template_id = int(callback.data.replace("select_template_", ""))
            await state.update_data(template_id=template_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data.startswith("use_default_template_"))
    async def use_default_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            template_id = int(callback.data.replace("use_default_template_", ""))
            await state.update_data(template_id=template_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä LLM
            await _show_llm_selection(callback, state, user_service, llm_service, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ use_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    @router.callback_query(F.data == "show_all_templates")
    async def show_all_templates_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            from services import TemplateService
            template_service = TemplateService()
            
            templates = await template_service.get_all_templates()
            
            if not templates:
                await callback.message.edit_text("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"select_template_{t.id}"
                )]
                for t in templates
            ])
            
            await callback.message.edit_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_templates_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    @router.callback_query(F.data.startswith("select_llm_"))
    async def select_llm_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            llm_provider = callback.data.replace("select_llm_", "")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
            await user_service.update_user_llm_preference(callback.from_user.id, llm_provider)
            await state.update_data(llm_provider=llm_provider)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            await _process_file(callback, state, processing_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_llm_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ LLM")
    
    @router.callback_query(F.data.startswith("set_transcription_mode_"))
    async def set_transcription_mode_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        try:
            mode = callback.data.replace("set_transcription_mode_", "")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from config import settings
            settings.transcription_mode = mode
            
            mode_names = {
                "local": "–õ–æ–∫–∞–ª—å–Ω–∞—è (Whisper)",
                "cloud": "–û–±–ª–∞—á–Ω–∞—è (Groq)",
                "hybrid": "–ì–∏–±—Ä–∏–¥–Ω–∞—è (Groq + –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è)",
                "speechmatics": "Speechmatics",
                "deepgram": "Deepgram",
                "leopard": "Leopard (Picovoice)"
            }
            
            mode_name = mode_names.get(mode, mode)
            
            await callback.message.edit_text(
                f"‚úÖ **–†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:** {mode_name}\n\n"
                f"–ù–æ–≤—ã–π —Ä–µ–∂–∏–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ —Ñ–∞–π–ª–æ–≤.",
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_transcription_mode_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    
    @router.callback_query(F.data.startswith("view_template_"))
    async def view_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        try:
            template_id = int(callback.data.replace("view_template_", ""))
            template = await template_service.get_template_by_id(template_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è: –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –Ω–µ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            try:
                user = await user_service.get_user_by_telegram_id(callback.from_user.id)
                owned_ids = set()
                if user:
                    owned_ids.add(user.id)
                owned_ids.add(callback.from_user.id)  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ legacy-—à–∞–±–ª–æ–Ω–æ–≤
                can_delete = (not template.is_default) and (template.created_by in owned_ids)
            except Exception:
                can_delete = False
            
            text = f"üìù **{template.name}**\n\n"
            if template.description:
                text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {template.description}\n\n"
            
            text += f"```\n{template.content}\n```"
            
            # –ö–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
            rows = []
            if can_delete:
                rows.append([InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=f"delete_template_{template.id}"
                )])
            rows.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤",
                callback_data="back_to_templates"
            )])
            keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ view_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —à–∞–±–ª–æ–Ω–∞")

    @router.callback_query(F.data.startswith("delete_template_"))
    async def delete_template_prompt_callback(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            template_id = int(callback.data.replace("delete_template_", ""))
            template = await template_service.get_template_by_id(template_id)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_template_{template_id}"),
                    InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"view_template_{template_id}")
                ]
            ])
            await callback.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω:\n\n‚Ä¢ {template.name}",
                reply_markup=keyboard
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_template_prompt_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")

    @router.callback_query(F.data.startswith("confirm_delete_template_"))
    async def confirm_delete_template_callback(callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            template_id = int(callback.data.replace("confirm_delete_template_", ""))
            success = await template_service.delete_template(callback.from_user.id, template_id)

            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                templates = await template_service.get_all_templates()
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                        callback_data=f"view_template_{t.id}"
                    )] for t in templates
                ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="add_template")]])

                await callback.message.edit_text(
                    "üóë –®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω.\n\nüìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                await callback.answer()
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_template_callback: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")
    
    @router.callback_query(F.data == "back_to_templates")
    async def back_to_templates_callback(callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            templates = await template_service.get_all_templates()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚≠ê ' if t.is_default else ''}{t.name}",
                    callback_data=f"view_template_{t.id}"
                )]
                for t in templates
            ] + [
                [InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data="add_template"
                )]
            ])
            
            await callback.message.edit_text(
                "üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_templates_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @router.callback_query(F.data == "settings_preferred_llm")
    async def settings_preferred_llm_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ò–ò"""
        try:
            available_providers = llm_service.get_available_providers()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ LLM
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"ü§ñ {provider_name}",
                    callback_data=f"set_llm_{provider_key}"
                )] for provider_key, provider_name in available_providers.items()
            ] + [
                [InlineKeyboardButton(
                    text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ",
                    callback_data="reset_llm_preference"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])
            
            await callback.message.edit_text(
                "ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ò–ò**\n\n"
                "–≠—Ç–æ—Ç –ò–ò –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫:",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_preferred_llm_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data == "settings_openai_model")
    async def settings_openai_model_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenAI"""
        try:
            from config import settings as app_settings
            models = getattr(app_settings, 'openai_models', [])
            if not models or len(models) == 0:
                await callback.message.edit_text(
                    "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –º–æ–¥–µ–ª–∏ OpenAI.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è `OPENAI_MODELS` —Å –ø–µ—Ä–µ—á–Ω–µ–º –ø—Ä–µ—Å–µ—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                    ])
                )
                await callback.answer()
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≤—ã–±–æ—Ä
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            selected_key = getattr(user, 'preferred_openai_model_key', None) if user else None

            keyboard_rows = []
            for p in models:
                label = f"{'‚úÖ ' if selected_key == p.key else ''}{p.name}"
                keyboard_rows.append([InlineKeyboardButton(text=label, callback_data=f"set_openai_model_{p.key}")])
            keyboard_rows.append([InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", callback_data="reset_openai_model_preference")])
            keyboard_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")])

            await callback.message.edit_text(
                "üß† **–ú–æ–¥–µ–ª—å OpenAI**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ OpenAI:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_openai_model_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ OpenAI")

    @router.callback_query(F.data.startswith("set_openai_model_"))
    async def set_openai_model_callback(callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å OpenAI"""
        try:
            model_key = callback.data.replace("set_openai_model_", "")
            await user_service.update_user_openai_model_preference(callback.from_user.id, model_key)
            # –ù–∞—Ö–æ–¥–∏–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            try:
                from config import settings as app_settings
                preset = next((p for p in getattr(app_settings, 'openai_models', []) if p.key == model_key), None)
                model_name = preset.name if preset else model_key
            except Exception:
                model_name = model_key
            await callback.message.edit_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å OpenAI –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {model_name}.\n\n"
                "–û–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ OpenAI.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ])
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_openai_model_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")

    @router.callback_query(F.data == "reset_openai_model_preference")
    async def reset_openai_model_preference_callback(callback: CallbackQuery):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å OpenAI"""
        try:
            await user_service.update_user_openai_model_preference(callback.from_user.id, None)
            await callback.message.edit_text(
                "üîÑ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI —Å–±—Ä–æ—à–µ–Ω.\n\n"
                "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ—Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ])
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_openai_model_preference_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    
    
    
    @router.callback_query(F.data == "settings_default_template")
    async def settings_default_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            all_templates = await template_service.get_all_templates()
            
            if not all_templates:
                # –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìù –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω",
                        callback_data="create_template"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await callback.message.edit_text(
                    "üìù **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
                    reply_markup=keyboard
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"{'‚≠ê ' if template.is_default else 'üìù '}{template.name}",
                        callback_data=f"set_default_template_{template.id}"
                    )] for template in all_templates[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                ] + [
                    [InlineKeyboardButton(
                        text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                        callback_data="reset_default_template"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await callback.message.edit_text(
                    "üìù **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:",
                    reply_markup=keyboard
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    @router.callback_query(F.data == "settings_reset")
    async def settings_reset_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_service.update_user_llm_preference(callback.from_user.id, None)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                await user_service.update_user_protocol_output_preference(callback.from_user.id, 'messages')
            except Exception:
                pass
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])
            
            await callback.message.edit_text(
                "üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã**\n\n"
                "–í—Å–µ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n\n"
                "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ò–ò —Å–±—Ä–æ—à–µ–Ω—ã\n"
                "‚Ä¢ –®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω\n"
                "‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_reset_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data == "settings_protocol_output")
    async def settings_protocol_output_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            current = getattr(user, 'protocol_output_mode', None) or 'messages'

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current == 'messages' else ''}üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏—è",
                    callback_data="set_protocol_output_messages"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current == 'file' else ''}üìé –í —Ñ–∞–π–ª md",
                    callback_data="set_protocol_output_file"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current == 'pdf' else ''}üìÑ –í —Ñ–∞–π–ª pdf",
                    callback_data="set_protocol_output_pdf"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])

            await callback.message.edit_text(
                "üì§ **–í—ã–≤–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª:\n"
                "‚Ä¢ üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
                "‚Ä¢ üìé –í —Ñ–∞–π–ª md ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (.md)\n"
                "‚Ä¢ üìÑ –í —Ñ–∞–π–ª pdf ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (.pdf)",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_protocol_output_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    @router.callback_query(F.data.in_({"set_protocol_output_messages", "set_protocol_output_file", "set_protocol_output_pdf"}))
    async def set_protocol_output_mode_callback(callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        try:
            if callback.data.endswith('messages'):
                mode = 'messages'
                mode_text = "üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏—è"
            elif callback.data.endswith('pdf'):
                mode = 'pdf'
                mode_text = "üìÑ –í —Ñ–∞–π–ª pdf"
            else:
                mode = 'file'
                mode_text = "üìé –í —Ñ–∞–π–ª md"
            
            await user_service.update_user_protocol_output_preference(callback.from_user.id, mode)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="back_to_settings"
                )]
            ])

            await callback.message.edit_text(
                f"‚úÖ –†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {mode_text}",
                reply_markup=keyboard
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_protocol_output_mode_callback: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞")
    
    @router.callback_query(F.data == "back_to_settings")
    async def back_to_settings_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            from ux.quick_actions import QuickActionsUI
            
            keyboard = QuickActionsUI.create_settings_menu()
            
            await callback.message.edit_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_settings_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
    
    
    
    @router.callback_query(F.data.startswith("set_default_template_"))
    async def set_default_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            template_id = int(callback.data.replace("set_default_template_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            success = await template_service.set_user_default_template(callback.from_user.id, template_id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
                template = await template_service.get_template_by_id(template_id)
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await callback.message.edit_text(
                    f"‚úÖ **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                    f"–¢–µ–ø–µ—Ä—å —à–∞–±–ª–æ–Ω **{template.name}** –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
                    f"–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —à–∞–±–ª–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                    reply_markup=keyboard
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à–∞–±–ª–æ–Ω–∞")
    
    
    
    @router.callback_query(F.data == "reset_default_template")
    async def reset_default_template_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ template_service
            success = await template_service.reset_user_default_template(callback.from_user.id)
            
            if success:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="back_to_settings"
                    )]
                ])
                
                await callback.message.edit_text(
                    "üîÑ **–®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω**\n\n"
                    "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=keyboard
                )
                await callback.answer()
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_default_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —à–∞–±–ª–æ–Ω–∞")
    
    return router


async def _show_llm_selection(callback: CallbackQuery, state: FSMContext, 
                             user_service: UserService, llm_service: EnhancedLLMService,
                             processing_service: OptimizedProcessingService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä LLM –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    available_providers = llm_service.get_available_providers()
    
    if not available_providers:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if user and user.preferred_llm is not None:
        preferred_llm = user.preferred_llm
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –¥–æ—Å—Ç—É–ø–µ–Ω
        if preferred_llm in available_providers:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await state.update_data(llm_provider=preferred_llm)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: –¥–ª—è OpenAI –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            llm_display = available_providers[preferred_llm]
            if preferred_llm == 'openai':
                try:
                    from config import settings as app_settings
                    selected_key = getattr(user, 'preferred_openai_model_key', None)
                    preset = None
                    if selected_key:
                        preset = next((p for p in getattr(app_settings, 'openai_models', []) if p.key == selected_key), None)
                    if not preset:
                        models = getattr(app_settings, 'openai_models', [])
                        if models:
                            preset = models[0]
                    if preset and getattr(preset, 'name', None):
                        llm_display = preset.name
                except Exception:
                    pass
            await callback.message.edit_text(
                f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LLM: {llm_display}\n\n"
                "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )
            await _process_file(callback, state, processing_service)
            return
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    current_llm = user.preferred_llm if user else 'openai'
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{'‚úÖ ' if provider_key == current_llm else ''}{provider_name}",
            callback_data=f"select_llm_{provider_key}"
        )]
        for provider_key, provider_name in available_providers.items()
    ])
    
    await callback.message.edit_text(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=keyboard
    )


async def _process_file(callback: CallbackQuery, state: FSMContext, processing_service: OptimizedProcessingService):
    """–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞"""
    from src.models.processing import ProcessingRequest
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not data.get('template_id') or not data.get('llm_provider'):
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ª–∏–±–æ file_id (–¥–ª—è Telegram —Ñ–∞–π–ª–æ–≤), –ª–∏–±–æ file_path (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
        is_external_file = data.get('is_external_file', False)
        if is_external_file:
            if not data.get('file_path') or not data.get('file_name'):
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
                )
                await state.clear()
                return
        else:
            if not data.get('file_id') or not data.get('file_name'):
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
                )
                await state.clear()
                return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        request = ProcessingRequest(
            file_id=data.get('file_id') if not is_external_file else None,
            file_path=data.get('file_path') if is_external_file else None,
            file_name=data['file_name'],
            template_id=data['template_id'],
            llm_provider=data['llm_provider'],
            user_id=callback.from_user.id,
            language="ru",
            is_external_file=is_external_file
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–µ—Ä
        from ux.progress_tracker import ProgressFactory
        from ux.message_builder import MessageBuilder
        from ux.feedback_system import QuickFeedbackManager, feedback_collector
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        from config import settings
        
        progress_tracker = await ProgressFactory.create_file_processing_tracker(
            callback.bot, callback.message.chat.id, settings.enable_diarization
        )
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            result = await processing_service.process_file(request, progress_tracker)

            await progress_tracker.complete_all()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            llm_model_name = result.llm_provider_used
            try:
                if result.llm_provider_used == 'openai':
                    from config import settings as app_settings
                    from src.services.user_service import UserService
                    user_service = UserService()
                    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
                    selected_key = getattr(user, 'preferred_openai_model_key', None) if user else None
                    preset = None
                    if selected_key:
                        preset = next((p for p in getattr(app_settings, 'openai_models', []) if p.key == selected_key), None)
                    if not preset:
                        models = getattr(app_settings, 'openai_models', [])
                        if models:
                            preset = models[0]
                    if preset:
                        llm_model_name = preset.name
            except Exception:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                pass

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            result_dict = {
                "template_used": {"name": result.template_used.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')},
                "llm_provider_used": result.llm_provider_used,
                "llm_model_name": llm_model_name,
                "transcription_result": {
                    "transcription": result.transcription_result.transcription,
                    "diarization": result.transcription_result.diarization,
                    "compression_info": result.transcription_result.compression_info
                },
                "processing_duration": result.processing_duration
            }
            
            result_message = MessageBuilder.processing_complete_message(result_dict)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª–∏–Ω—ã
            try:
                await callback.bot.send_message(
                    callback.message.chat.id,
                    result_message,
                    parse_mode="Markdown"
                )
            except Exception as e:
                if "message is too long" in str(e).lower():
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
                    await callback.bot.send_message(
                        callback.message.chat.id,
                        result_message
                    )
                else:
                    raise e
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                from src.services.user_service import UserService as _US
                user_pref_service = _US()
                user = await user_pref_service.get_user_by_telegram_id(callback.from_user.id)
                output_mode = getattr(user, 'protocol_output_mode', None) or 'messages'

                if output_mode in ('file', 'pdf'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    import tempfile
                    from aiogram.types import FSInputFile
                    import os
                    
                    suffix = '.pdf' if output_mode == 'pdf' else '.md'
                    safe_name = 'protocol'
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤–æ–µ –∏–º—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        data = await state.get_data()
                        original = data.get('file_name') or 'protocol'
                        safe_name = os.path.splitext(os.path.basename(original))[0][:40] or 'protocol'
                    except Exception:
                        pass
                    
                    if output_mode == 'pdf':
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as f:
                            temp_path = f.name
                        try:
                            _convert_markdown_to_pdf(result.protocol_text or '', temp_path)
                            file_input = FSInputFile(temp_path, filename=f"{safe_name}.pdf")
                            await callback.message.answer_document(
                                file_input,
                                caption="üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ (PDF)"
                            )
                        finally:
                            try:
                                os.unlink(temp_path)
                            except Exception:
                                pass
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ MD —Ñ–∞–π–ª
                        with tempfile.NamedTemporaryFile('w', suffix='.md', delete=False, encoding='utf-8') as f:
                            f.write(result.protocol_text or '')
                            temp_path = f.name
                        try:
                            file_input = FSInputFile(temp_path, filename=f"{safe_name}.md")
                            await callback.message.answer_document(
                                file_input,
                                caption="üìé –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ (Markdown)"
                            )
                        finally:
                            try:
                                os.unlink(temp_path)
                            except Exception:
                                pass
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                    await _send_long_message(callback.message.chat.id, result.protocol_text, callback.bot)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await callback.bot.send_message(
                    callback.message.chat.id,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            feedback_manager = QuickFeedbackManager(feedback_collector)
            await feedback_manager.request_quick_feedback(
                callback.message.chat.id, callback.bot, result_dict
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            error_message = str(e)
            if "message is too long" in error_message.lower():
                user_message = (
                    "üìÑ **–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**\n\n"
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n"
                    "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                    "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç—å –¥–ª–∏–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —á–∞—Å—Ç–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª"
                )
            elif "too large" in error_message.lower() or "413" in error_message:
                user_message = (
                    "üì¶ **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**\n\n"
                    "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, "
                    "–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n"
                    "‚Ä¢ –°–∂–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                    "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç—å –¥–ª–∏–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å –ª—É—á—à–∏–º —Å–∂–∞—Ç–∏–µ–º (MP3)\n"
                    "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ"
                )
            elif "transcription" in error_message.lower():
                user_message = (
                    "üé§ **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**\n\n"
                    f"–î–µ—Ç–∞–ª–∏: {error_message}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª"
                )
            else:
                user_message = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞**\n\n{error_message}"
            
            await progress_tracker.error("processing", user_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.bot.send_message(
                callback.message.chat.id,
                user_message,
                parse_mode="Markdown"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        await state.clear()


async def _send_long_message(chat_id: int, text: str, bot, max_length: int = 4096):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º"""
    # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —á–∞—Å—Ç–∏
    header_template = "üìÑ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏** (—á–∞—Å—Ç—å {}/{})\n\n"
    max_header_length = len(header_template.format(999, 999))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    max_part_length = max_length - max_header_length
    
    if len(text) <= max_length:
        try:
            await bot.send_message(chat_id, text, parse_mode="Markdown")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
            await bot.send_message(chat_id, text)
            return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""
    
    for line in text.split('\n'):
        if len(current_part) + len(line) + 1 <= max_part_length:
            current_part += line + '\n'
        else:
            if current_part:
                parts.append(current_part.strip())
            current_part = line + '\n'
    
    if current_part:
        parts.append(current_part.strip())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    for i, part in enumerate(parts):
        try:
            header = f"üìÑ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏** (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n"
            full_message = header + part
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
            if len(full_message) > max_length:
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
                await bot.send_message(chat_id, full_message)
            else:
                await bot.send_message(chat_id, full_message, parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown
            try:
                header = f"üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n"
                await bot.send_message(chat_id, header + part)
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {e2}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                await bot.send_message(chat_id, part[:max_length])
