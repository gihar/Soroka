"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
"""

import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.handlers.participants_states import ParticipantsInput
from src.services.participants_service import participants_service
from src.services.user_service import UserService
from src.exceptions.file import FileError


def setup_participants_handlers() -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    router = Router()
    user_service = UserService()
    
    @router.callback_query(F.data == "add_participants")
    async def start_participants_input(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            await callback.answer()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫",
                callback_data="input_new_participants"
            )])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if user and user.saved_participants:
                try:
                    saved = participants_service.participants_from_json(user.saved_participants)
                    if saved:
                        keyboard_buttons.append([InlineKeyboardButton(
                            text=f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ({len(saved)} —á–µ–ª.)",
                            callback_data="use_saved_participants"
                        )])
                except Exception:
                    pass
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (.txt, .csv)",
                callback_data="upload_participants_file"
            )])
            
            # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            keyboard_buttons.append([InlineKeyboardButton(
                text="üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞",
                callback_data="auto_extract_meeting_info"
            )])

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ –∏–º–µ–Ω)",
                callback_data="skip_participants"
            )])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            message_text = (
                "üë• **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. "
                "–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç –≥–æ–≤–æ—Ä—è—â–∏—Ö —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n"
                "**–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**\n\n"
                "üîç **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å** - –∏–∑ email –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–µ\n\n"
                "üìù **–†—É—á–Ω–æ–π –≤–≤–æ–¥** - —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª:\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç (–æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞ —Å—Ç—Ä–æ–∫—É):\n"
                "  `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä`\n"
                "  `–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞`\n\n"
                "‚Ä¢ –§–∞–π–ª .txt –∏–ª–∏ .csv\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await callback.message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    @router.callback_query(F.data == "auto_extract_meeting_info")
    async def prompt_auto_extraction(callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            await callback.answer()
            await state.set_state(ParticipantsInput.waiting_for_participants)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="add_participants")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_participants")]
            ])

            await callback.message.answer(
                "üîç **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–µ (email, —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ).\n\n"
                "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
                "‚Ä¢ Email —Å –ø–æ–ª—è–º–∏ –û—Ç, –ö–æ–º—É, –ö–æ–ø–∏—è, –¢–µ–º–∞, –ö–æ–≥–¥–∞\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö, –¥–∞—Ç–µ –∏ —Ç–µ–º–µ\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "```\n"
                "–û—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
                "–ö–æ–º—É: –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞; –ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤\n"
                "–¢–µ–º–∞: –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
                "–ö–æ–≥–¥–∞: 22 –æ–∫—Ç—è–±—Ä—è 2025 –≥. 15:00-16:00\n"
                "```",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–≤—Ç–æ–∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @router.callback_query(F.data == "input_new_participants")
    async def prompt_participants_input(callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            await callback.answer()
            await state.set_state(ParticipantsInput.waiting_for_participants)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_participants")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="add_participants")]
            ])

            await callback.message.answer(
                "üìù **–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–º (–æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞ —Å—Ç—Ä–æ–∫—É).\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:**\n"
                "‚Ä¢ `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å`\n"
                "‚Ä¢ `–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞ - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫`\n"
                "‚Ä¢ `–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤ (—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫)`\n"
                "‚Ä¢ `–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞`\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    @router.callback_query(F.data == "upload_participants_file")
    async def prompt_file_upload(callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        try:
            await callback.answer()
            await state.set_state(ParticipantsInput.waiting_for_participants)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_participants")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="add_participants")]
            ])
            
            await callback.message.answer(
                "üìé **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –∏–ª–∏ .csv\n\n"
                "**–§–æ—Ä–º–∞—Ç .txt:**\n"
                "```\n"
                "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä\n"
                "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞\n"
                "```\n\n"
                "**–§–æ—Ä–º–∞—Ç .csv:**\n"
                "```\n"
                "name,role\n"
                "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,–º–µ–Ω–µ–¥–∂–µ—Ä\n"
                "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞,\n"
                "```\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    @router.callback_query(F.data == "use_saved_participants")
    async def use_saved_participants(callback: CallbackQuery, state: FSMContext):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            await callback.answer()
            
            user = await user_service.get_user_by_telegram_id(callback.from_user.id)
            
            if not user or not user.saved_participants:
                await callback.message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            participants = participants_service.participants_from_json(user.saved_participants)
            
            if not participants:
                await callback.message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(participants_list=participants)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            display_text = participants_service.format_participants_for_display(participants)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="confirm_participants")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="add_participants")]
            ])
            
            await callback.message.answer(
                f"{display_text}\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫?**",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    @router.callback_query(F.data == "skip_participants")
    async def skip_participants(callback: CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            await callback.answer("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            # –û—á–∏—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.update_data(participants_list=None)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ (—à–∞–≥ 2)
            from src.handlers.message_handlers import _show_template_selection_step2
            from src.services.template_service import TemplateService

            template_service = TemplateService()
            await _show_template_selection_step2(callback.message, template_service, state)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    @router.message(ParticipantsInput.waiting_for_participants, F.content_type == "text")
    async def handle_participants_text(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            text = message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
            if text.startswith('/cancel'):
                await state.clear()
                await message.answer("‚ùå –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
                return

            # –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            meeting_info = participants_service.extract_from_meeting_text(text)
            
            # –í—Å–µ–≥–¥–∞ –ø–∞—Ä—Å–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            text_participants = participants_service.parse_participants_text(text)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            all_participants = []
            participants_dict = {}  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ meeting_info (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if meeting_info and meeting_info.participants:
                for participant in meeting_info.participants:
                    key = participant.name.lower().strip()
                    if key not in participants_dict:
                        participants_dict[key] = {
                            "name": participant.name,
                            "role": participant.role or ""
                        }
                        all_participants.append(participants_dict[key])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            for participant in text_participants:
                key = participant["name"].lower().strip()
                if key not in participants_dict:
                    participants_dict[key] = participant
                    all_participants.append(participant)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            if not all_participants:
                await message.answer(
                    f"‚ùå **–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:**\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                    parse_mode="Markdown"
                )
                return

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            is_valid, error_message = participants_service.validate_participants(all_participants)
            if not is_valid:
                await message.answer(
                    f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n{error_message}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                    parse_mode="Markdown"
                )
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ (—Ç–µ–º–∞/–¥–∞—Ç–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if meeting_info and (meeting_info.topic or meeting_info.start_time):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(meeting_info=meeting_info.model_dump())
                await state.update_data(participants_list=all_participants)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∏ –¥–∞—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
                if meeting_info.topic:
                    await state.update_data(meeting_topic=meeting_info.topic)
                if meeting_info.start_time:
                    await state.update_data(meeting_date=meeting_info.start_time.strftime("%d.%m.%Y"))
                    await state.update_data(meeting_time=meeting_info.start_time.strftime("%H:%M"))

                await state.set_state(ParticipantsInput.confirm_meeting_info)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                display_text = participants_service.format_meeting_info_for_display(meeting_info)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                warning_text = ""
                if meeting_info.topic == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                    warning_text = "\n\n‚ö†Ô∏è –¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="confirm_meeting_info"),
                        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="save_meeting_info")
                    ],
                    [
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="input_new_participants"),
                        InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_participants")
                    ]
                ])

                await message.answer(
                    f"üîç **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ:**\n\n"
                    f"{display_text}{warning_text}\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?**",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

            else:
                # –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ
                await state.update_data(participants_list=all_participants)
                await state.set_state(ParticipantsInput.confirm_participants)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                display_text = participants_service.format_participants_for_display(all_participants)

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_participants"),
                        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="save_and_confirm_participants")
                    ],
                    [
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="input_new_participants"),
                        InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_participants")
                    ]
                ])

                await message.answer(
                    f"{display_text}\n\n**–í—Å–µ –≤–µ—Ä–Ω–æ?**",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    @router.message(ParticipantsInput.waiting_for_participants, F.content_type == "document")
    async def handle_participants_file(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            document = message.document
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_name = document.file_name or "file"
            file_ext = os.path.splitext(file_name)[1].lower()
            
            if file_ext not in ['.txt', '.csv', '.text']:
                await message.answer(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt –∏ .csv\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            temp_file_path = f"temp/participants_{message.from_user.id}_{file_ext}"
            
            try:
                await message.bot.download(document, destination=temp_file_path)
                
                # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
                participants = participants_service.parse_participants_file(temp_file_path)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
                is_valid, error_message = participants_service.validate_participants(participants)
                
                if not is_valid:
                    await message.answer(
                        f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**\n{error_message}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode="Markdown"
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(participants_list=participants)
                await state.set_state(ParticipantsInput.confirm_participants)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                display_text = participants_service.format_participants_for_display(participants)
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_participants"),
                        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="save_and_confirm_participants")
                    ],
                    [
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="upload_participants_file"),
                        InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_participants")
                    ]
                ])
                
                await message.answer(
                    f"{display_text}\n\n**–í—Å–µ –≤–µ—Ä–Ω–æ?**",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
            except FileError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            finally:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
                if os.path.exists(temp_file_path):
                    try:
                        os.remove(temp_file_path)
                    except:
                        pass
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    @router.callback_query(F.data == "confirm_meeting_info")
    async def confirm_meeting_info(callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            data = await state.get_data()
            participants = data.get('participants_list', [])
            participants_count = len(participants)

            await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ (—à–∞–≥ 2)
            from src.handlers.message_handlers import _show_template_selection_step2
            from src.services.template_service import TemplateService

            await callback.message.answer(
                f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({participants_count} —á–µ–ª.)\n\n"
                f"üìù –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:"
            )

            template_service = TemplateService()
            await _show_template_selection_step2(callback.message, template_service, state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @router.callback_query(F.data == "save_meeting_info")
    async def save_meeting_info(callback: CallbackQuery, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            data = await state.get_data()
            meeting_info_data = data.get('meeting_info', {})

            if not meeting_info_data:
                await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            participants = data.get('participants_list', [])
            participants_count = len(participants)
            
            if participants:
                participants_json = participants_service.participants_to_json([
                    {"name": p["name"], "role": p.get("role", "")}
                    for p in participants
                ])

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                from database import db
                await db.update_user_saved_participants(callback.from_user.id, participants_json)

            await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ (—à–∞–≥ 2)
            from src.handlers.message_handlers import _show_template_selection_step2
            from src.services.template_service import TemplateService

            await callback.message.answer(
                f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({participants_count} —á–µ–ª.) –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
                f"üìù –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:"
            )

            template_service = TemplateService()
            await _show_template_selection_step2(callback.message, template_service, state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

    @router.callback_query(F.data == "confirm_participants")
    async def confirm_participants(callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            data = await state.get_data()
            participants = data.get('participants_list', [])
            participants_count = len(participants)

            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ (—à–∞–≥ 2)
            from src.handlers.message_handlers import _show_template_selection_step2
            from src.services.template_service import TemplateService

            await callback.message.answer(
                f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({participants_count} —á–µ–ª.)\n\n"
                f"üìù –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:"
            )

            template_service = TemplateService()
            await _show_template_selection_step2(callback.message, template_service, state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    @router.callback_query(F.data == "save_and_confirm_participants")
    async def save_and_confirm_participants(callback: CallbackQuery, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            data = await state.get_data()
            participants = data.get('participants_list', [])
            participants_count = len(participants)

            if not participants:
                await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç", show_alert=True)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            participants_json = participants_service.participants_to_json(participants)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            from database import db
            await db.update_user_saved_participants(callback.from_user.id, participants_json)

            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ (—à–∞–≥ 2)
            from src.handlers.message_handlers import _show_template_selection_step2
            from src.services.template_service import TemplateService

            await callback.message.answer(
                f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({participants_count} —á–µ–ª.) –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
                f"üìù –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:"
            )

            template_service = TemplateService()
            await _show_template_selection_step2(callback.message, template_service, state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    
    @router.callback_query(F.data == "cancel_participants")
    async def cancel_participants(callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            await callback.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
            await state.clear()
            await callback.message.answer("‚ùå –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
    
    return router


