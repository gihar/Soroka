"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from loguru import logger

from api.monitoring import monitoring_api
from reliability.health_check import health_checker
from services.enhanced_llm_service import EnhancedLLMService
from services.optimized_processing_service import OptimizedProcessingService
from config import settings

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏
try:
    from src.services.cleanup_service import cleanup_service
    CLEANUP_SERVICE_AVAILABLE = True
except ImportError:
    CLEANUP_SERVICE_AVAILABLE = False


def setup_admin_handlers(llm_service: EnhancedLLMService, 
                        processing_service: OptimizedProcessingService) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router = Router()
    
    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    ADMIN_IDS = getattr(settings, 'admin_ids', [])
    
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_IDS if ADMIN_IDS else True  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ Markdown
        escape_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        return text
    
    @router.message(Command("status"))
    async def status_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            report = monitoring_api.format_status_report()
            await message.answer(report, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ status_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    @router.message(Command("health"))
    async def health_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /health - –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
            await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
            
            health_results = await health_checker.check_all()
            
            report_lines = ["üè• **–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è**\n"]
            
            for component, result in health_results.items():
                status_emoji = {
                    "healthy": "‚úÖ",
                    "degraded": "‚ö†Ô∏è",
                    "unhealthy": "‚ùå",
                    "unknown": "‚ùì"
                }.get(result.status.value, "‚ùì")
                
                report_lines.append(f"**{component}:** {status_emoji} {result.status.value}")
                report_lines.append(f"  ‚îî {result.message}")
                
                if result.response_time:
                    report_lines.append(f"  ‚îî –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result.response_time:.3f}—Å")
                
                report_lines.append("")
            
            report = "\n".join(report_lines)
            await message.answer(report, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ health_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    @router.message(Command("stats"))
    async def stats_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            stats = monitoring_api.get_system_stats()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            report_lines = ["üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n"]
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            perf = stats.get("performance", {})
            if perf and "error" not in perf:
                report_lines.extend([
                    "**üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**",
                    f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {perf.get('total_requests', 0)}",
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {perf.get('total_requests', 0) - perf.get('total_errors', 0)}",
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {perf.get('total_errors', 0)} ({perf.get('error_rate', 0):.1f}%)",
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf.get('average_processing_time', 0):.3f}—Å",
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {perf.get('max_processing_time', 0):.3f}—Å",
                    f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {perf.get('min_processing_time', 0):.3f}—Å",
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {perf.get('active_users', 0)}",
                    ""
                ])
            
            # Rate limiting
            rate_limits = stats.get("rate_limits", {})
            if rate_limits and "error" not in rate_limits:
                total_requests = sum(
                    limiter.get("total_requests", 0) 
                    for limiter in rate_limits.values() 
                    if isinstance(limiter, dict)
                )
                total_blocked = sum(
                    limiter.get("blocked_requests", 0) 
                    for limiter in rate_limits.values() 
                    if isinstance(limiter, dict)
                )
                
                report_lines.extend([
                    "**üõ°Ô∏è Rate Limiting:**",
                    f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}",
                    f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {total_blocked}",
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {(total_blocked/max(1, total_requests))*100:.1f}%",
                    ""
                ])
            
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            health = stats.get("health", {})
            components = health.get("components", {})
            if components:
                report_lines.append("**üîß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:**")
                for name, comp in components.items():
                    status = comp.get("status", "unknown")
                    checks = comp.get("total_checks", 0)
                    failures = comp.get("total_failures", 0)
                    failure_rate = comp.get("failure_rate", 0)
                    
                    report_lines.append(f"‚Ä¢ **{name}:** {status}")
                    report_lines.append(f"  ‚îî –ü—Ä–æ–≤–µ—Ä–æ–∫: {checks}, –Ω–µ—É–¥–∞—á: {failures} ({failure_rate:.1f}%)")
                
                report_lines.append("")
            
            report = "\n".join(report_lines)
            await message.answer(report, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    @router.message(Command("reset_reliability"))
    async def reset_reliability_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_reliability - —Å–±—Ä–æ—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            await message.answer("üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await llm_service.reset_reliability_components()
            await processing_service.reset_reliability_components()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º health checker
            for name, cb in health_checker.component_health.items():
                cb.consecutive_failures = 0
                cb.status = health_checker.HealthStatus.UNKNOWN
            
            await message.answer("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_reliability_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
    
    @router.message(Command("export_stats"))
    async def export_stats_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_stats - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            json_stats = monitoring_api.export_stats_json()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            import os
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
                f.write(json_stats)
                temp_path = f.name
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                from aiogram.types import FSInputFile
                
                file_input = FSInputFile(temp_path, filename="bot_stats.json")
                await message.answer_document(
                    file_input,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
                )
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_path)
                except:
                    pass
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ export_stats_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
    
    @router.message(Command("transcription_mode"))
    async def transcription_mode_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /transcription_mode - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if settings.transcription_mode == 'local' else ''}üè† –õ–æ–∫–∞–ª—å–Ω–∞—è (Whisper)",
                    callback_data="set_transcription_mode_local"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if settings.transcription_mode == 'cloud' else ''}‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è (Groq)",
                    callback_data="set_transcription_mode_cloud"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if settings.transcription_mode == 'hybrid' else ''}üîÑ –ì–∏–±—Ä–∏–¥–Ω–∞—è (Groq + –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è)",
                    callback_data="set_transcription_mode_hybrid"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if settings.transcription_mode == 'speechmatics' else ''}üéØ Speechmatics",
                    callback_data="set_transcription_mode_speechmatics"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if settings.transcription_mode == 'deepgram' else ''}üé§ Deepgram",
                    callback_data="set_transcription_mode_deepgram"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if settings.transcription_mode == 'leopard' else ''}üêÜ Leopard (Picovoice)",
                    callback_data="set_transcription_mode_leopard"
                )]
            ])
            
            current_mode = settings.transcription_mode
            mode_descriptions = {
                "local": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Whisper",
                "cloud": "–û–±–ª–∞—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Groq API",
                "hybrid": "–ì–∏–±—Ä–∏–¥–Ω–∞—è: –æ–±–ª–∞—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è + –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è",
                "speechmatics": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Speechmatics API",
                "deepgram": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Deepgram API",
                "leopard": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Picovoice Leopard"
            }
            
            current_description = mode_descriptions.get(current_mode, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
            
            await message.answer(
                f"üéôÔ∏è **–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:** {current_mode}\n"
                f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {current_description}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ transcription_mode_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
    
    @router.message(Command("admin_help"))
    async def admin_help_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        help_text = """
üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ `/status` - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/health` - –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ `/stats` - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/export_stats` - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON

**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ `/performance` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ `/optimize` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/reset_reliability` - —Å–±—Ä–æ—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ `/transcription_mode` - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

**–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:**
‚Ä¢ `/cleanup` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
‚Ä¢ `/cleanup_force` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

**–°–ø—Ä–∞–≤–∫–∞:**
‚Ä¢ `/admin_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        
        await message.answer(help_text, parse_mode="Markdown")
    
    @router.message(Command("performance"))
    async def performance_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /performance - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            from performance import (
                performance_cache, metrics_collector, memory_optimizer, task_pool
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cache_stats = performance_cache.get_stats()
            memory_stats = memory_optimizer.get_optimization_stats()
            task_stats = task_pool.get_stats()
            metrics_stats = metrics_collector.get_current_stats()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**\n\n"
                
                "üíæ **–ö—ç—à:**\n"
                f"‚Ä¢ Hit Rate: {cache_stats['hit_rate_percent']}%\n"
                f"‚Ä¢ –ü–∞–º—è—Ç—å: {cache_stats['memory_usage_mb']}MB "
                f"({cache_stats['memory_usage_percent']}%)\n"
                f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {cache_stats['memory_entries']} + {cache_stats['disk_entries']} (–¥–∏—Å–∫)\n\n"
                
                "üß† **–ü–∞–º—è—Ç—å:**\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {memory_stats['current_memory']['percent']}%\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å: {memory_stats['current_memory']['process_mb']:.1f}MB\n"
                f"‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {'–í–∫–ª' if memory_stats['is_optimizing'] else '–í—ã–∫–ª'}\n\n"
                
                "‚ö° **–ó–∞–¥–∞—á–∏:**\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {task_stats['active_tasks']}\n"
                f"‚Ä¢ –ú–∞–∫—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {task_stats['max_concurrent']}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {task_stats['success_rate']:.1f}%\n\n"
                
                "üìà **–û–±—Ä–∞–±–æ—Ç–∫–∞:**\n"
                f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å: {metrics_stats['processing']['requests_1h']}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics_stats['processing']['success_rate_percent']}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics_stats['processing']['avg_duration_seconds']}—Å\n"
                f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {metrics_stats['processing']['avg_efficiency_ratio']}\n"
            )
            
            await message.answer(report, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ performance_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    @router.message(Command("optimize"))
    async def optimize_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /optimize - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            from performance import memory_optimizer, performance_cache
            
            status_msg = await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...")
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
            memory_result = await memory_optimizer.optimize_memory()
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            await performance_cache.cleanup_expired()
            
            # –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            report = (
                "‚úÖ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory_result['memory_freed_mb']}MB\n"
                f"üßπ –û—á–∏—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {memory_result['objects_cleaned']}\n"
                f"‚ôªÔ∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: {memory_result['gc_collected']} –æ–±—ä–µ–∫—Ç–æ–≤\n\n"
                f"üìä –ü–∞–º—è—Ç—å –¥–æ: {memory_result['memory_before_mb']}MB\n"
                f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ: {memory_result['memory_after_mb']}MB"
            )
            
            await status_msg.edit_text(report, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ optimize_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    @router.message(Command("cleanup"))
    async def cleanup_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not CLEANUP_SERVICE_AVAILABLE:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = cleanup_service.get_cleanup_stats()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = (
                "üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤\n\n"
                f"üìÇ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {stats['temp_files']} ({stats['temp_size_mb']:.1f}MB)\n"
                f"üóÇÔ∏è –ö—ç—à —Ñ–∞–π–ª—ã: {stats['cache_files']} ({stats['cache_size_mb']:.1f}MB)\n\n"
                f"‚è∞ –°—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {stats['old_temp_files']}\n"
                f"‚è∞ –°—Ç–∞—Ä—ã–µ –∫—ç—à —Ñ–∞–π–ª—ã: {stats['old_cache_files']}\n\n"
                f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏: {settings.cleanup_interval_minutes} –º–∏–Ω\n"
                f"‚Ä¢ –ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {settings.temp_file_max_age_hours} —á\n"
                f"‚Ä¢ –ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à —Ñ–∞–π–ª–æ–≤: {settings.cache_max_age_hours} —á\n"
                f"‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: {'‚úÖ' if settings.enable_cleanup else '‚ùå'}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cleanup_force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"
            )
            
            await message.answer(report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    @router.message(Command("cleanup_force"))
    async def cleanup_force_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup_force - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not CLEANUP_SERVICE_AVAILABLE:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        try:
            status_msg = await message.answer("üßπ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            cleaned_count = await cleanup_service.force_cleanup_all()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = cleanup_service.get_cleanup_stats()
            
            report = (
                "‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}\n\n"
                f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
                f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {stats['temp_files']} ({stats['temp_size_mb']:.1f}MB)\n"
                f"‚Ä¢ –ö—ç—à —Ñ–∞–π–ª—ã: {stats['cache_files']} ({stats['cache_size_mb']:.1f}MB)"
            )
            
            await status_msg.edit_text(report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_force_handler: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    return router
