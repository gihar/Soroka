"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
"""

import re
import os
import asyncio
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from services import FileService, TemplateService, OptimizedProcessingService
from services.url_service import URLService
from src.exceptions.file import FileError, FileSizeError, FileTypeError
from src.utils.pdf_converter import convert_markdown_to_pdf
from src.utils.telegram_safe import safe_answer, safe_edit_text


def setup_message_handlers(file_service: FileService, template_service: TemplateService,
                          processing_service: OptimizedProcessingService) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    router = Router()
    
    @router.message(F.content_type.in_({'audio', 'video', 'voice', 'video_note', 'document'}))
    async def media_handler(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file_obj, file_name, content_type = _extract_file_info(message)
            
            if not file_obj:
                await safe_answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑.")
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
            try:
                file_service.validate_file(file_obj, content_type, file_name)
            except FileSizeError as e:
                from ux.message_builder import MessageBuilder
                error_details = {
                    "type": "size",
                    "actual_size": getattr(file_obj, 'file_size', 0),
                    "max_size": 20
                }
                error_message = MessageBuilder.file_validation_error(error_details)
                await safe_answer(message, error_message, parse_mode="Markdown")
                return
            except FileTypeError as e:
                from ux.message_builder import MessageBuilder
                formats = file_service.get_supported_formats()
                error_details = {
                    "type": "format",
                    "extension": file_name.split('.')[-1] if '.' in file_name else "",
                    "supported_formats": formats
                }
                error_message = MessageBuilder.file_validation_error(error_details)
                await safe_answer(message, error_message, parse_mode="Markdown")
                return
            except FileError as e:
                from ux.message_builder import MessageBuilder
                error_message = MessageBuilder.error_message("validation", str(e))
                await safe_answer(message, error_message, parse_mode="Markdown")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ file_id
            if not file_obj.file_id:
                await safe_answer(
                    message,
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                file_id=file_obj.file_id,
                file_name=file_name
            )
            
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: file_id={file_obj.file_id}, file_name={file_name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            await _show_template_selection(message, template_service, state)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ media_handler: {e}")
            await safe_answer(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏
    @router.message(StateFilter(None), F.content_type == 'text')
    async def text_handler(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è URL)"""
        try:
            text = message.text.strip()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ quick_actions
            menu_buttons = [
                "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üìù –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å", "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
            ]
            
            if text in menu_buttons:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ä–æ—É—Ç–µ—Ä
                return
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ command_handlers –∏–ª–∏ admin_handlers
            if text.startswith('/'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ä–æ—É—Ç–µ—Ä
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL
            if not _contains_url(text):
                await safe_answer(
                    message,
                    "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive/–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "üéµ –ê—É–¥–∏–æ: MP3, WAV, M4A, OGG\n"
                    "üé¨ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV"
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            url = _extract_url(text)
            if not url:
                await safe_answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
            await _process_url(message, url, state, template_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ text_handler: {e}")
            await safe_answer(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    return router


async def _show_llm_selection_for_file(message: Message, state: FSMContext, llm_service, processing_service):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        file_id = state_data.get('file_id')
        file_path = state_data.get('file_path')
        file_name = state_data.get('file_name')
        template_id = state_data.get('template_id')
        is_external_file = state_data.get('is_external_file', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ (–ª–∏–±–æ file_id –¥–ª—è Telegram —Ñ–∞–π–ª–æ–≤, –ª–∏–±–æ file_path –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
        if not template_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
            
        if not file_id and not file_path:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        available_providers = llm_service.get_available_providers()
        
        if not available_providers:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è LLM
        from services import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        if user and user.preferred_llm is not None:
            preferred_llm = user.preferred_llm
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –¥–æ—Å—Ç—É–ø–µ–Ω
            if preferred_llm in available_providers:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                await state.update_data(llm_provider=preferred_llm)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: –¥–ª—è OpenAI –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
                llm_display = available_providers[preferred_llm]
                if preferred_llm == 'openai':
                    try:
                        from config import settings as app_settings
                        selected_key = getattr(user, 'preferred_openai_model_key', None)
                        preset = None
                        if selected_key:
                            preset = next((p for p in getattr(app_settings, 'openai_models', []) if p.key == selected_key), None)
                        if not preset:
                            models = getattr(app_settings, 'openai_models', [])
                            if models:
                                preset = models[0]
                        if preset and getattr(preset, 'name', None):
                            llm_display = preset.name
                    except Exception:
                        pass

                text = (
                    f"ü§ñ **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LLM: {llm_display}**\n\n"
                    f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞..."
                )
                await message.answer(text, parse_mode="Markdown")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
                await _start_file_processing(message, state, processing_service)
                return
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        current_llm = user.preferred_llm if user else 'openai'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ LLM
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'‚úÖ ' if provider_key == current_llm else ''}ü§ñ {provider_name}",
                callback_data=f"select_llm_{provider_key}"
            )]
            for provider_key, provider_name in available_providers.items()
        ])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_type = "–≤–Ω–µ—à–Ω–∏–π —Ñ–∞–π–ª" if is_external_file else "—Ñ–∞–π–ª"
        
        await message.answer(
            f"ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n\n"
            f"–§–∞–π–ª: {file_name}\n"
            f"–¢–∏–ø: {file_type}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ LLM: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò.")


async def _start_file_processing(message: Message, state: FSMContext, processing_service):
    """–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞"""
    from src.models.processing import ProcessingRequest
    from src.services.task_queue_manager import task_queue_manager
    from src.models.task_queue import TaskPriority
    from src.ux.queue_tracker import QueueTrackerFactory
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ LLM (template_id –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
        if not data.get('llm_provider'):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
            )
            await state.clear()
            return
        
        # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–º–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ template_id
        if not data.get('use_smart_selection') and not data.get('template_id'):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ª–∏–±–æ file_id (–¥–ª—è Telegram —Ñ–∞–π–ª–æ–≤), –ª–∏–±–æ file_path (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
        is_external_file = data.get('is_external_file', False)
        if is_external_file:
            if not data.get('file_path') or not data.get('file_name'):
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–º —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
                )
                await state.clear()
                return
        else:
            if not data.get('file_id') or not data.get('file_name'):
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å."
                )
                await state.clear()
                return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        request = ProcessingRequest(
            file_id=data.get('file_id') if not is_external_file else None,
            file_path=data.get('file_path') if is_external_file else None,
            file_name=data['file_name'],
            template_id=data['template_id'],
            llm_provider=data['llm_provider'],
            user_id=message.from_user.id,
            language="ru",
            is_external_file=is_external_file,
            participants_list=data.get('participants_list'),  # —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            meeting_topic=data.get('meeting_topic'),  # —Ç–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏
            meeting_date=data.get('meeting_date'),  # –¥–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
            meeting_time=data.get('meeting_time')  # –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        queued_task = await task_queue_manager.add_task(
            request=request,
            chat_id=message.chat.id,
            priority=TaskPriority.NORMAL
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
        position = await task_queue_manager.get_queue_position(str(queued_task.task_id))
        total_in_queue = await task_queue_manager.get_queue_size()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        queue_tracker = await QueueTrackerFactory.create_tracker(
            bot=message.bot,
            chat_id=message.chat.id,
            task_id=str(queued_task.task_id),
            initial_position=position if position is not None else 0,
            total_in_queue=total_in_queue
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –∑–∞–¥–∞—á–µ
        if queue_tracker.message_id:
            queued_task.message_id = queue_tracker.message_id
            from database import db
            await db.update_queue_task_message_id(str(queued_task.task_id), queue_tracker.message_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        asyncio.create_task(_monitor_queue_position(
            queue_tracker, queued_task.task_id, task_queue_manager
        ))
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–ó–∞–¥–∞—á–∞ {queued_task.task_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.")
        await state.clear()


async def _monitor_queue_position(queue_tracker, task_id, queue_manager):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    from config import settings
    
    try:
        while queue_tracker.is_active:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            position = await queue_manager.get_queue_position(str(task_id))
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ (–Ω–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
            if position is None:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –æ—á–µ—Ä–µ–¥—å
                await queue_tracker.delete_message()
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
            total = await queue_manager.get_queue_size()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            await queue_tracker.update_position(position, total)
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(settings.queue_update_interval)
    
    except asyncio.CancelledError:
        logger.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")


async def _send_long_protocol(message: Message, protocol_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —á–∞—Å—Ç—è–º–∏"""
    try:
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
        MAX_LENGTH = 4000
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª–∏–Ω–æ–π {len(protocol_text)} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞
        lines = protocol_text.split('\n')
        logger.info(f"–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ {len(lines)} —Å—Ç—Ä–æ–∫")
        
        for line_num, line in enumerate(lines):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            if len(current_part) + len(line) + 1 <= MAX_LENGTH:
                current_part += line + '\n'
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π
                if current_part.strip():
                    parts.append(current_part.strip())
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(current_part.strip())} —Å–∏–º–≤–æ–ª–æ–≤")
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                current_part = line + '\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if current_part.strip():
            parts.append(current_part.strip())
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(current_part.strip())} —Å–∏–º–≤–æ–ª–æ–≤")
        
        logger.info(f"–ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
        for i, part in enumerate(parts):
            try:
                if i == 0:
                    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
                    part_text = f"üìÑ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏:**\n\n{part}"
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å –Ω–æ–º–µ—Ä–æ–º
                    part_text = f"üìÑ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ (—á–∞—Å—Ç—å {i+1}):**\n\n{part}"
                
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å {i+1}/{len(parts)} –¥–ª–∏–Ω–æ–π {len(part_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                await message.answer(part_text, parse_mode="Markdown")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                import asyncio
                await asyncio.sleep(0.5)
                
            except Exception as part_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}: {part_error}")
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å –±–µ–∑ Markdown
                try:
                    await message.answer(f"üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª (—á–∞—Å—Ç—å {i+1}):\n\n{part}")
                except Exception as fallback_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i+1} –¥–∞–∂–µ –±–µ–∑ Markdown: {fallback_error}")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1} –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–æ)
        try:
            truncated_text = protocol_text[:MAX_LENGTH] + "...\n\n(–ü—Ä–æ—Ç–æ–∫–æ–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª–∏–Ω–æ–π {len(truncated_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            await message.answer(truncated_text, parse_mode="Markdown")
        except Exception as fallback_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {fallback_error}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def _extract_file_info(message: Message) -> tuple:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    file_obj = None
    file_name = None
    content_type = None
    
    if message.audio:
        file_obj = message.audio
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mime_type
        original_name = getattr(message.audio, 'file_name', None)
        if original_name:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            import os
            _, ext = os.path.splitext(original_name)
            file_name = f"audio_{message.message_id}{ext or '.mp3'}"
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ mime_type
            mime_type = getattr(message.audio, 'mime_type', '')
            if 'mp4' in mime_type or 'm4a' in mime_type:
                ext = '.m4a'
            elif 'wav' in mime_type:
                ext = '.wav'
            elif 'ogg' in mime_type:
                ext = '.ogg'
            else:
                ext = '.mp3'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            file_name = f"audio_{message.message_id}{ext}"
        content_type = "audio"
    elif message.voice:
        file_obj = message.voice
        file_name = f"voice_{message.message_id}.ogg"
        content_type = "voice"
    elif message.video:
        file_obj = message.video
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ
        original_name = getattr(message.video, 'file_name', None)
        if original_name:
            import os
            _, ext = os.path.splitext(original_name)
            file_name = f"video_{message.message_id}{ext or '.mp4'}"
        else:
            file_name = f"video_{message.message_id}.mp4"
        content_type = "video"
    elif message.video_note:
        file_obj = message.video_note
        file_name = f"video_note_{message.message_id}.mp4"
        content_type = "video_note"
    elif message.document:
        file_obj = message.document
        file_name = message.document.file_name or f"document_{message.message_id}"
        content_type = "document"
    
    return file_obj, file_name, content_type


async def _show_template_selection(message: Message, template_service: TemplateService, state: FSMContext = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        from services import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        keyboard_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ 1: –£–º–Ω—ã–π –≤—ã–±–æ—Ä (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–≤–æ–π)
        keyboard_buttons.append([InlineKeyboardButton(
            text="ü§ñ –ü—Ä–æ—Ç–æ–∫–æ–ª: –£–º–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞",
            callback_data="quick_smart_select"
        )])
        
        # –ö–Ω–æ–ø–∫–∞ 2: –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if user and user.default_template_id:
            try:
                if user.default_template_id == 0:
                    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É–º–Ω—ã–π –≤—ã–±–æ—Ä
                    button_text = "ü§ñ –ü—Ä–æ—Ç–æ–∫–æ–ª: –£–º–Ω—ã–π –≤—ã–±–æ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
                else:
                    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
                    default_template = await template_service.get_template_by_id(user.default_template_id)
                    if default_template:
                        button_text = f"üìã –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —à–∞–±–ª–æ–Ω—É: {default_template.name}"
                    else:
                        button_text = None
                
                if button_text:
                    keyboard_buttons.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data="use_saved_default"
                    )])
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ 3: –ó–∞–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—Å–µ–≥–¥–∞)
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚öôÔ∏è –ó–∞–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            callback_data="quick_set_default"
        )])
        
        # –ö–Ω–æ–ø–∫–∞ 4: –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
        keyboard_buttons.append([InlineKeyboardButton(
            text="üë• –£–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏",
            callback_data="add_participants"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üìù **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:**\n\n"
            "ü§ñ **–£–º–Ω—ã–π –≤—ã–±–æ—Ä** - –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω\n"
            "üìã **–ü–æ —à–∞–±–ª–æ–Ω—É** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω\n"
            "‚öôÔ∏è **–ó–∞–¥–∞—Ç—å —à–∞–±–ª–æ–Ω** - –≤—ã–±—Ä–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "üë• **–£–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤** - –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã '–°–ø–∏–∫–µ—Ä N' –Ω–∞ –∏–º–µ–Ω–∞",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤.")


def _contains_url(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç URL"""
    url_pattern = r'https?://[^\s]+'
    return bool(re.search(url_pattern, text))


def _extract_url(text: str) -> str:
    """–ò–∑–≤–ª–µ—á—å URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    url_pattern = r'https?://[^\s]+'
    match = re.search(url_pattern, text)
    return match.group(0) if match else ""


async def _process_url(message: Message, url: str, state: FSMContext, template_service: TemplateService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å URL —Ñ–∞–π–ª–∞"""
    status_message = None
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await safe_answer(message, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...")
        if not status_message:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        async with URLService() as url_service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É URL
            if not url_service.is_supported_url(url):
                await safe_edit_text(
                    status_message,
                    "‚ùå –î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n"
                    "‚Ä¢ Google Drive (drive.google.com)\n"
                    "‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (disk.yandex.ru, yadi.sk)"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            await safe_edit_text(status_message, "üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ...")
            
            try:
                filename, file_size, direct_url = await url_service.get_file_info(url)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
                url_service.validate_file_by_info(filename, file_size)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                size_mb = file_size / (1024 * 1024)
                await safe_edit_text(
                    status_message,
                    f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω!\n\n"
                    f"üìÑ –ò–º—è: {filename}\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë\n\n"
                    f"‚¨áÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ..."
                )
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π direct_url, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
                temp_path = await url_service.download_file(direct_url, filename)
                original_filename = filename
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(
                    file_path=temp_path,
                    file_name=original_filename,
                    is_external_file=True  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç Telegram —Ñ–∞–π–ª–æ–≤
                )
                
                await safe_edit_text(
                    status_message,
                    f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {original_filename}"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
                await _show_template_selection(message, template_service, state)
                
            except FileSizeError as e:
                from ux.message_builder import MessageBuilder
                from config import settings
                
                error_details = {
                    "type": "size",
                    "actual_size": file_size,
                    "max_size": settings.max_external_file_size // (1024 * 1024)  # –í –ú–ë
                }
                error_message = MessageBuilder.file_validation_error(error_details)
                await safe_edit_text(status_message, error_message, parse_mode="Markdown")
                
            except FileTypeError as e:
                from ux.message_builder import MessageBuilder
                
                error_details = {
                    "type": "format",
                    "extension": os.path.splitext(filename)[1] if filename else "",
                    "supported_formats": {
                        "audio": ["MP3", "WAV", "M4A", "OGG"],
                        "video": ["MP4", "AVI", "MOV", "MKV", "WEBM", "FLV"]
                    }
                }
                error_message = MessageBuilder.file_validation_error(error_details)
                await safe_edit_text(status_message, error_message, parse_mode="Markdown")
                
            except FileError as e:
                await safe_edit_text(status_message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_answer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å status_message
        if not status_message:
            await safe_answer(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
