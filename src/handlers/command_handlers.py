"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
"""

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from loguru import logger

from services.user_service import UserService
from services.template_service import TemplateService
from services.enhanced_llm_service import EnhancedLLMService
from src.models.user import UserCreate


def setup_command_handlers(user_service: UserService, template_service: TemplateService, 
                          llm_service: EnhancedLLMService) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    router = Router()
    
    @router.message(CommandStart())
    async def start_handler(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_service.get_or_create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            
            from ux.message_builder import MessageBuilder
            from ux.quick_actions import QuickActionsUI
            
            welcome_text = MessageBuilder.welcome_message()
            main_menu = QuickActionsUI.create_main_menu(message.from_user.id)
            
            await message.answer(
                welcome_text,
                reply_markup=main_menu,
                parse_mode="Markdown"
            )
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    @router.message(Command("help"))
    async def help_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        from ux.message_builder import MessageBuilder
        help_text = MessageBuilder.help_message()
        await message.answer(help_text, parse_mode="Markdown")
    
    @router.message(Command("settings"))
    async def settings_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        try:
            user = await user_service.get_user_by_telegram_id(message.from_user.id)
            available_providers = llm_service.get_available_providers()
            
            if not available_providers:
                await message.answer(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π."
                )
                return
            
            current_llm = user.preferred_llm if user else 'openai'
            # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ OpenAI (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            from config import settings as app_settings
            openai_model_name = None
            try:
                if current_llm == 'openai' and getattr(app_settings, 'openai_models', None):
                    selected_key = getattr(user, 'preferred_openai_model_key', None) if user else None
                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Å–µ—Ç: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–µ—Ä–≤—ã–π
                    preset = None
                    if selected_key:
                        preset = next((p for p in app_settings.openai_models if p.key == selected_key), None)
                    if not preset and len(app_settings.openai_models) > 0:
                        preset = app_settings.openai_models[0]
                    if preset:
                        openai_model_name = preset.name
            except Exception:
                openai_model_name = None
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if provider_key == current_llm else ''}{provider_name}",
                    callback_data=f"set_llm_{provider_key}"
                )]
                for provider_key, provider_name in available_providers.items()
            ] + [
                [InlineKeyboardButton(
                    text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)",
                    callback_data="reset_llm_preference"
                )]
            ])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
            auto_select_status = "–≤–∫–ª—é—á—ë–Ω" if user and user.preferred_llm is not None else "–≤—ã–∫–ª—é—á–µ–Ω"
            
            base_text = (
                f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
                f"–¢–µ–∫—É—â–∏–π LLM: {available_providers.get(current_llm, '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}\n"
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä: {auto_select_status}\n"
            )
            if openai_model_name:
                base_text += f"–ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n\n"
            else:
                base_text += "\n"
            base_text += "–í—ã–±–µ—Ä–∏—Ç–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:"

            await message.answer(
                base_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    @router.message(Command("templates"))
    async def templates_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /templates"""
        try:
            templates = await template_service.get_all_templates()
            
            if not templates:
                await message.answer("üìù –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            from collections import defaultdict
            categories = defaultdict(list)
            for template in templates:
                category = template.category or 'general'
                categories[category].append(template)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_names = {
                'management': 'üëî –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ',
                'product': 'üöÄ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ',
                'technical': '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                'general': 'üìã –û–±—â–∏–µ',
                'sales': 'üíº –ü—Ä–æ–¥–∞–∂–∏'
            }
            
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category, cat_templates in sorted(categories.items()):
                category_name = category_names.get(category, f'üìÅ {category.title()}')
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"{category_name} ({len(cat_templates)})",
                    callback_data=f"view_template_category_{category}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —à–∞–±–ª–æ–Ω—ã"
            keyboard_buttons.append([InlineKeyboardButton(
                text="üìù –í—Å–µ —à–∞–±–ª–æ–Ω—ã",
                callback_data="view_template_category_all"
            )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω",
                callback_data="add_template"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await message.answer(
                f"üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:** {len(templates)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ templates_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤.")
    
    @router.message(Command("feedback"))
    async def feedback_handler(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback"""
        from ux.feedback_system import FeedbackUI
        
        keyboard = FeedbackUI.create_feedback_type_keyboard()
        await message.answer(
            "üí¨ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
            "–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    return router
