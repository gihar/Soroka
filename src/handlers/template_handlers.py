"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from services import TemplateService
from models.template import TemplateCreate
from exceptions import TemplateValidationError
from src.utils.telegram_safe import safe_edit_text


class TemplateStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    waiting_for_name = State()
    waiting_for_content = State()
    preview_template = State()


def setup_template_handlers(template_service: TemplateService) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤"""
    router = Router()
    
    @router.callback_query(F.data == "add_template")
    async def add_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        try:
            await state.set_state(TemplateStates.waiting_for_name)
            await safe_edit_text(
                callback.message,
                "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
                parse_mode="Markdown"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.callback_query(F.data == "create_template")
    async def create_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            await state.set_state(TemplateStates.waiting_for_name)
            await safe_edit_text(
                callback.message,
                "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
                parse_mode="Markdown"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.message(TemplateStates.waiting_for_name)
    async def template_name_handler(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        try:
            name = message.text.strip()
            
            if len(name) < 3:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(name) > 100:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            await state.update_data(template_name=name)
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —à–∞–±–ª–æ–Ω–∞
            await state.set_state(TemplateStates.waiting_for_content)

            example_template = """# –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ
**–î–∞—Ç–∞:** {{ date }}
**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {{ participants }}

## –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
{{ decisions }}

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
{{ next_steps }}"""

            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: **{name}**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**\n"
                "‚Ä¢ `{{ participants }}` - —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ `{{ date }}` - –¥–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ `{{ time }}` - –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ `{{ agenda }}` - –ø–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è\n"
                "‚Ä¢ `{{ discussion }}` - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ `{{ decisions }}` - –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
                "‚Ä¢ `{{ tasks }}` - –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
                "‚Ä¢ `{{ next_steps }}` - —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n"
                "‚Ä¢ `{{ key_points }}` - –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"
                "‚Ä¢ `{{ action_items }}` - –∑–∞–¥–∞—á–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é\n"
                "‚Ä¢ `{{ technical_issues }}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                "‚Ä¢ `{{ architecture_decisions }}` - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
                "‚Ä¢ `{{ technical_tasks }}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n"
                "‚Ä¢ `{{ risks_and_blockers }}` - —Ä–∏—Å–∫–∏ –∏ –±–ª–æ–∫–µ—Ä—ã\n"
                "‚Ä¢ `{{ next_sprint_plans }}` - –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç\n"
                "‚Ä¢ `{{ speakers_summary }}` - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–≤–æ—Ä—è—â–∏—Ö\n"
                "‚Ä¢ `{{ speaker_contributions }}` - –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                "‚Ä¢ `{{ dialogue_analysis }}` - –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n\n"
                f"**–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞:**\n```\n{example_template}\n```",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ template_name_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –®–∞–≥ –æ–ø–∏—Å–∞–Ω–∏—è —É–¥–∞–ª—ë–Ω –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    
    @router.message(TemplateStates.waiting_for_content)
    async def template_content_handler(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        try:
            content = message.text.strip()
            
            if len(content) < 10:
                await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–∞
            try:
                template_service.validate_template_content(content)
            except TemplateValidationError as e:
                await message.answer(f"‚ùå {e.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            await state.update_data(template_content=content)
            await state.set_state(TemplateStates.preview_template)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            data = await state.get_data()
            await _show_template_preview(message, data, template_service)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ template_content_handler: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞.")
    
    @router.callback_query(TemplateStates.preview_template, F.data == "save_template")
    async def save_template_callback(callback: CallbackQuery, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        try:
            data = await state.get_data()
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞ –Ω–µ Telegram ID)
            from services import UserService
            user_service = UserService()
            user = await user_service.get_or_create_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name
            )

            template_create = TemplateCreate(
                name=data['template_name'],
                content=data['template_content'],
                description=data.get('template_description'),
                created_by=user.id
            )
            
            created_template = await template_service.create_template(template_create)
            
            await safe_edit_text(
                callback.message,
                f"‚úÖ **–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {created_template.name}\n"
                f"**ID:** {created_template.id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.",
                parse_mode="Markdown"
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Å–æ–∑–¥–∞–ª —à–∞–±–ª–æ–Ω '{created_template.name}'")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            await safe_edit_text(
                callback.message,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}"
            )
        
        await state.clear()
        await callback.answer()
    
    @router.callback_query(TemplateStates.preview_template, F.data == "edit_template")
    async def edit_template_callback(callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        try:
            await state.set_state(TemplateStates.waiting_for_content)
            await safe_edit_text(
                callback.message,
                "üîÑ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞:",
                parse_mode="Markdown"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @router.callback_query(TemplateStates.preview_template, F.data == "cancel_template")
    async def cancel_template_callback(callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        try:
            await state.clear()
            await safe_edit_text(
                callback.message,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_template_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return router


async def _show_template_preview(message: Message, template_data: dict, template_service: TemplateService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        test_variables = {
            "participants": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤, –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
            "date": "15.12.2024",
            "time": "14:00-15:30",
            "agenda": "1. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –Ω–∞ —Å–ø—Ä–∏–Ω—Ç\n2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n3. –ë–ª–æ–∫–µ—Ä—ã –∏ —Ä–∏—Å–∫–∏",
            "discussion": "–û–±—Å—É–∂–¥–∞–ª–∏—Å—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞...",
            "decisions": "1. –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É\n2. –í—ã–¥–µ–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
            "tasks": "1. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API (–ò–≤–∞–Ω) - –¥–æ 20.12\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ê–Ω–Ω–∞) - –¥–æ 22.12",
            "next_steps": "1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
            "key_points": "‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é\n‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É —Å–ø—Ä–∏–Ω—Ç—É",
            "action_items": "1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD\n2. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
            "technical_issues": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "architecture_decisions": "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
            "technical_tasks": "1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n2. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ legacy –∫–æ–¥–∞",
            "risks_and_blockers": "‚Ä¢ –ù–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API",
            "next_sprint_plans": "–§–æ–∫—É—Å –Ω–∞ backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
        }
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        rendered_template = template_service.render_template(
            template_data['template_content'], 
            test_variables
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_text = rendered_template[:2000] + "..." if len(rendered_template) > 2000 else rendered_template
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_template"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_template")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_template")
            ]
        ])
        
        preview_message = (
            f"üëÄ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞**\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {template_data['template_name']}\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {template_data.get('template_description', '*–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è*')}\n\n"
            f"**–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:**\n\n"
            f"```\n{preview_text}\n```"
        )
        
        await message.answer(
            preview_message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞."
        )
