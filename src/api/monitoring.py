"""
API endpoints –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import json
from typing import Dict, Any, Optional
from loguru import logger
from reliability.health_check import health_checker
from reliability.middleware import monitoring_middleware
from reliability.rate_limiter import global_rate_limiter


class MonitoringAPI:
    """API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance=None):
        self.bot_instance = bot_instance
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            return health_checker.get_health_summary()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {"error": str(e), "status": "error"}
    
    def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            return monitoring_middleware.get_stats()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            return {"error": str(e)}
    
    def get_rate_limit_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting"""
        try:
            return global_rate_limiter.get_all_stats()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting: {e}")
            return {"error": str(e)}
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            "health": self.get_health_status(),
            "performance": self.get_performance_metrics(),
            "rate_limits": self.get_rate_limit_stats(),
            "bot_specific": self._get_bot_specific_stats()
        }
    
    def _get_bot_specific_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if self.bot_instance and hasattr(self.bot_instance, 'get_reliability_stats'):
            try:
                return self.bot_instance.get_reliability_stats()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
                return {"error": str(e)}
        
        return {"message": "Bot instance not available"}
    
    def format_status_report(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            stats = self.get_system_stats()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_lines = [
                "üìä **–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã**",
                ""
            ]
            
            # –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            health = stats.get("health", {})
            overall_status = health.get("overall_status", "unknown")
            status_emoji = {
                "healthy": "‚úÖ",
                "degraded": "‚ö†Ô∏è",
                "unhealthy": "‚ùå", 
                "unknown": "‚ùì"
            }.get(overall_status, "‚ùì")
            
            report_lines.extend([
                f"**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {status_emoji} {overall_status.upper()}",
                ""
            ])
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            perf = stats.get("performance", {})
            if perf and "error" not in perf:
                report_lines.extend([
                    "**üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**",
                    f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {perf.get('total_requests', 0)}",
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {perf.get('total_errors', 0)} ({perf.get('error_rate', 0):.1f}%)",
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {perf.get('average_processing_time', 0):.3f}—Å",
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {perf.get('active_users', 0)}",
                    ""
                ])
            
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            components = health.get("components", {})
            if components:
                healthy_count = sum(1 for comp in components.values() if comp.get("status") == "healthy")
                total_count = len(components)
                
                report_lines.extend([
                    f"**üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** {healthy_count}/{total_count} –∑–¥–æ—Ä–æ–≤—ã",
                    ""
                ])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                problematic = [
                    (name, comp) for name, comp in components.items()
                    if comp.get("status") in ["unhealthy", "degraded"]
                ]
                
                if problematic:
                    report_lines.append("**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**")
                    for name, comp in problematic:
                        status = comp.get("status", "unknown")
                        emoji = "‚ùå" if status == "unhealthy" else "‚ö†Ô∏è"
                        report_lines.append(f"‚Ä¢ {emoji} {name}: {status}")
                    report_lines.append("")
            
            # Rate limiting
            rate_limits = stats.get("rate_limits", {})
            if rate_limits and "error" not in rate_limits:
                total_blocked = sum(
                    limiter.get("blocked_requests", 0) 
                    for limiter in rate_limits.values() 
                    if isinstance(limiter, dict)
                )
                
                if total_blocked > 0:
                    report_lines.extend([
                        f"**üõ°Ô∏è Rate Limiting:** {total_blocked} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                        ""
                    ])
            
            report_lines.append(f"*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {health.get('timestamp', 0):.0f}*")
            
            return "\n".join(report_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def export_stats_json(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON"""
        try:
            stats = self.get_system_stats()
            return json.dumps(stats, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ JSON: {e}")
            return json.dumps({"error": str(e)})


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
monitoring_api = MonitoringAPI()
