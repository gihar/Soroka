"""
–°–∏—Å—Ç–µ–º–∞ Fallback –¥–ª—è graceful degradation
"""

import asyncio
from typing import Callable, Any, List, Optional, Dict
from dataclasses import dataclass
from enum import Enum
from loguru import logger


class FallbackStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ fallback"""
    FAIL_FAST = "fail_fast"              # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞–∑
    RETRY_THEN_FALLBACK = "retry_fallback"  # –ü–æ–≤—Ç–æ—Ä, –∑–∞—Ç–µ–º fallback
    GRACEFUL_DEGRADATION = "graceful"    # Graceful degradation
    CACHE_FALLBACK = "cache"             # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞


@dataclass
class FallbackOption:
    """–û–ø—Ü–∏—è fallback"""
    name: str
    handler: Callable
    condition: Optional[Callable] = None  # –£—Å–ª–æ–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    priority: int = 0                     # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–±–æ–ª—å—à–µ = –≤—ã—à–µ)


class FallbackManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, name: str, strategy: FallbackStrategy = FallbackStrategy.GRACEFUL_DEGRADATION):
        self.name = name
        self.strategy = strategy
        self.primary_handler: Optional[Callable] = None
        self.fallback_options: List[FallbackOption] = []
        self.cache: Dict[str, Any] = {}
        self.stats = {
            "total_calls": 0,
            "primary_success": 0,
            "fallback_used": 0,
            "cache_used": 0,
            "failures": 0
        }
    
    def set_primary(self, handler: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        self.primary_handler = handler
        return self
    
    def add_fallback(self, name: str, handler: Callable, condition: Optional[Callable] = None, priority: int = 0):
        """–î–æ–±–∞–≤–∏—Ç—å fallback –æ–ø—Ü–∏—é"""
        fallback = FallbackOption(name, handler, condition, priority)
        self.fallback_options.append(fallback)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–±–æ–ª—å—à–µ = –≤—ã—à–µ)
        self.fallback_options.sort(key=lambda x: x.priority, reverse=True)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω fallback '{name}' –¥–ª—è '{self.name}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
        return self
    
    def cache_result(self, key: str, result: Any, ttl: Optional[float] = None):
        """–ö–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        cache_entry = {
            "result": result,
            "timestamp": asyncio.get_event_loop().time(),
            "ttl": ttl
        }
        self.cache[key] = cache_entry
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è '{self.name}': {key}")
    
    def get_cached_result(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞"""
        if key not in self.cache:
            return None
        
        entry = self.cache[key]
        current_time = asyncio.get_event_loop().time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if entry["ttl"] and (current_time - entry["timestamp"]) > entry["ttl"]:
            del self.cache[key]
            return None
        
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞ –¥–ª—è '{self.name}': {key}")
        return entry["result"]
    
    async def execute(self, *args, cache_key: Optional[str] = None, **kwargs) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å fallback –ª–æ–≥–∏–∫–æ–π"""
        self.stats["total_calls"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–ª—é—á
        if cache_key and self.strategy == FallbackStrategy.CACHE_FALLBACK:
            cached_result = self.get_cached_result(cache_key)
            if cached_result is not None:
                self.stats["cache_used"] += 1
                return cached_result
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if self.primary_handler:
            try:
                logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è '{self.name}'")
                
                if asyncio.iscoroutinefunction(self.primary_handler):
                    result = await self.primary_handler(*args, **kwargs)
                else:
                    result = self.primary_handler(*args, **kwargs)
                
                self.stats["primary_success"] += 1
                
                # –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if cache_key:
                    self.cache_result(cache_key, result)
                
                logger.debug(f"–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{self.name}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
                
            except Exception as e:
                logger.warning(f"–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{self.name}' failed: {e}")
                
                if self.strategy == FallbackStrategy.FAIL_FAST:
                    self.stats["failures"] += 1
                    raise
                
                # –ü—ã—Ç–∞–µ–º—Å—è fallback
                return await self._try_fallbacks(*args, exception=e, cache_key=cache_key, **kwargs)
        
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è fallback
        return await self._try_fallbacks(*args, cache_key=cache_key, **kwargs)
    
    async def _try_fallbacks(self, *args, exception: Optional[Exception] = None, 
                           cache_key: Optional[str] = None, **kwargs) -> Any:
        """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback –æ–ø—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π resort
        if cache_key:
            cached_result = self.get_cached_result(cache_key)
            if cached_result is not None:
                self.stats["cache_used"] += 1
                logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –∫–∞–∫ fallback –¥–ª—è '{self.name}'")
                return cached_result
        
        # –ü—ã—Ç–∞–µ–º—Å—è fallback –æ–ø—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for fallback in self.fallback_options:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                if fallback.condition:
                    if asyncio.iscoroutinefunction(fallback.condition):
                        condition_met = await fallback.condition(exception, *args, **kwargs)
                    else:
                        condition_met = fallback.condition(exception, *args, **kwargs)
                    
                    if not condition_met:
                        continue
                
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback '{fallback.name}' –¥–ª—è '{self.name}'")
                
                if asyncio.iscoroutinefunction(fallback.handler):
                    result = await fallback.handler(*args, **kwargs)
                else:
                    result = fallback.handler(*args, **kwargs)
                
                self.stats["fallback_used"] += 1
                
                # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç fallback
                if cache_key:
                    self.cache_result(cache_key, result, ttl=300)  # –ö–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è fallback
                
                logger.info(f"Fallback '{fallback.name}' –¥–ª—è '{self.name}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
                
            except Exception as fallback_error:
                logger.error(f"Fallback '{fallback.name}' –¥–ª—è '{self.name}' failed: {fallback_error}")
                continue
        
        # –í—Å–µ fallback –æ–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        self.stats["failures"] += 1
        original_error = exception or Exception("–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        logger.error(f"–í—Å–µ fallback –æ–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{self.name}': {original_error}")
        raise Exception(f"–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{self.name}': {original_error}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = max(1, self.stats["total_calls"])
        
        return {
            "name": self.name,
            "strategy": self.strategy.value,
            "total_calls": self.stats["total_calls"],
            "primary_success": self.stats["primary_success"],
            "primary_success_rate": (self.stats["primary_success"] / total) * 100,
            "fallback_used": self.stats["fallback_used"],
            "fallback_rate": (self.stats["fallback_used"] / total) * 100,
            "cache_used": self.stats["cache_used"],
            "cache_hit_rate": (self.stats["cache_used"] / total) * 100,
            "failures": self.stats["failures"],
            "failure_rate": (self.stats["failures"] / total) * 100,
            "fallback_options": len(self.fallback_options),
            "cache_size": len(self.cache)
        }
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"""
        cache_size = len(self.cache)
        self.cache.clear()
        logger.info(f"–û—á–∏—â–µ–Ω –∫–µ—à –¥–ª—è '{self.name}' ({cache_size} –∑–∞–ø–∏—Å–µ–π)")


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ fallback —Ñ—É–Ω–∫—Ü–∏–∏
async def simple_error_message(*args, **kwargs) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def cached_response_fallback(cache_key: str = None, *args, **kwargs) -> str:
    """Fallback —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞"""
    return "üìÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."


def create_llm_fallback_manager() -> FallbackManager:
    """–°–æ–∑–¥–∞—Ç—å fallback –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è LLM"""
    manager = FallbackManager("llm_service", FallbackStrategy.GRACEFUL_DEGRADATION)
    
    # –î–æ–±–∞–≤–ª—è–µ–º fallback –æ–ø—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    manager.add_fallback(
        "simplified_extraction",
        lambda transcript, **kwargs: _simple_text_extraction(transcript),
        priority=10
    )
    
    manager.add_fallback(
        "template_only",
        lambda **kwargs: _template_only_response(),
        priority=5
    )
    
    manager.add_fallback(
        "error_message", 
        simple_error_message,
        priority=1
    )
    
    return manager


def _simple_text_extraction(transcript: str) -> Dict[str, str]:
    """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ LLM"""
    words = transcript.split()
    word_count = len(words)
    
    # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    participants = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á–∏"
    if word_count < 100:
        summary = "–ö–æ—Ä–æ—Ç–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    elif word_count < 500:
        summary = "–í—Å—Ç—Ä–µ—á–∞ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    else:
        summary = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
    
    return {
        "participants": participants,
        "date": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "time": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", 
        "agenda": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
        "discussion": f"{summary}. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {word_count} —Å–ª–æ–≤.",
        "decisions": "–†–µ—à–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
        "tasks": "–ó–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
        "next_steps": "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
        "key_points": f"–í—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, {word_count} —Å–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    }


def _template_only_response() -> Dict[str, str]:
    """–û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Å —à–∞–±–ª–æ–Ω–æ–º"""
    return {
        "participants": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "date": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "time": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "agenda": "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "discussion": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        "decisions": "–ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "tasks": "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
        "next_steps": "–ê–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "key_points": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
