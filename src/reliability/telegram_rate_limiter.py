"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram API rate limiting –∏ flood control
"""

import asyncio
import time
from typing import Optional, Dict, Any, Callable
from dataclasses import dataclass, field
from collections import deque
from loguru import logger

from aiogram.exceptions import TelegramRetryAfter
from aiogram.types import Message


@dataclass
class FloodControlState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ flood control"""
    is_active: bool = False
    blocked_until: float = 0.0
    retry_after: int = 0
    blocked_chats: Dict[int, float] = field(default_factory=dict)
    total_blocks: int = 0
    last_block_time: Optional[float] = None


@dataclass
class QueuedMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    chat_id: int
    text: str
    kwargs: Dict[str, Any]
    callback: Optional[Callable] = None
    priority: int = 0
    created_at: float = field(default_factory=time.time)


class TelegramFloodControl:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º flood control –æ—Ç Telegram"""
    
    def __init__(self):
        self.state = FloodControlState()
        self._lock = asyncio.Lock()
    
    async def register_flood_control(self, retry_after: int, chat_id: Optional[int] = None):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å flood control –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        async with self._lock:
            self.state.is_active = True
            self.state.blocked_until = time.time() + retry_after
            self.state.retry_after = retry_after
            self.state.total_blocks += 1
            self.state.last_block_time = time.time()
            
            if chat_id:
                self.state.blocked_chats[chat_id] = self.state.blocked_until
            
            logger.critical(
                f"üö® FLOOD CONTROL –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! "
                f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {retry_after} —Å–µ–∫—É–Ω–¥ (–¥–æ {time.strftime('%H:%M:%S', time.localtime(self.state.blocked_until))})"
            )
            
            # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–≥–∞—è, –ª–æ–≥–∏—Ä—É–µ–º –æ—Å–æ–±–æ
            if retry_after > 300:  # > 5 –º–∏–Ω—É—Ç
                logger.critical(
                    f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: {retry_after // 60} –º–∏–Ω—É—Ç! "
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—á–∏–Ω."
                )
    
    async def is_blocked(self, chat_id: Optional[int] = None) -> tuple[bool, float]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"""
        async with self._lock:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.state.is_active:
                if current_time < self.state.blocked_until:
                    remaining = self.state.blocked_until - current_time
                    return True, remaining
                else:
                    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    self.state.is_active = False
                    logger.info("‚úÖ Flood control —Å–Ω—è—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            if chat_id and chat_id in self.state.blocked_chats:
                if current_time < self.state.blocked_chats[chat_id]:
                    remaining = self.state.blocked_chats[chat_id] - current_time
                    return True, remaining
                else:
                    del self.state.blocked_chats[chat_id]
            
            return False, 0.0
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É flood control"""
        current_time = time.time()
        
        return {
            "is_active": self.state.is_active,
            "retry_after": self.state.retry_after if self.state.is_active else 0,
            "time_remaining": max(0, self.state.blocked_until - current_time) if self.state.is_active else 0,
            "blocked_chats_count": len(self.state.blocked_chats),
            "total_blocks": self.state.total_blocks,
            "last_block_time": self.state.last_block_time,
            "blocked_until": self.state.blocked_until if self.state.is_active else None
        }


class TelegramMessageQueue:
    """–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è flood control"""
    
    def __init__(self, max_size: int = 100):
        self.max_size = max_size
        self.queue: deque[QueuedMessage] = deque(maxlen=max_size)
        self._lock = asyncio.Lock()
    
    async def enqueue(self, message: QueuedMessage) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        async with self._lock:
            if len(self.queue) >= self.max_size:
                logger.warning(
                    f"–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ({self.max_size}). "
                    f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
                # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for i, msg in enumerate(self.queue):
                    if msg.priority == 0:
                        del self.queue[i]
                        break
            
            self.queue.append(message)
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä: {len(self.queue)})")
            return True
    
    async def dequeue_all(self) -> list[QueuedMessage]:
        """–ò–∑–≤–ª–µ—á—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        async with self._lock:
            messages = list(self.queue)
            self.queue.clear()
            return messages
    
    def get_size(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏"""
        return len(self.queue)


class TelegramRateLimiter:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
    —Å –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–º rate limiting –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π flood control
    """
    
    def __init__(self):
        self.flood_control = TelegramFloodControl()
        self.message_queue = TelegramMessageQueue()
        
        # Rate limiting (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        self.messages_per_second = 20
        self.burst_limit = 3
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.sent_messages: deque[float] = deque(maxlen=100)
        self._rate_lock = asyncio.Lock()
    
    async def check_rate_limit(self) -> tuple[bool, float]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        Returns: (allowed, wait_time)
        """
        async with self._rate_lock:
            current_time = time.time()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã)
            while self.sent_messages and current_time - self.sent_messages[0] > 1.0:
                self.sent_messages.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É
            if len(self.sent_messages) >= self.messages_per_second:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                oldest = self.sent_messages[0]
                wait_time = 1.0 - (current_time - oldest)
                return False, max(0, wait_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º burst –ª–∏–º–∏—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è)
            recent_messages = [t for t in self.sent_messages if current_time - t < 0.1]
            if len(recent_messages) >= self.burst_limit:
                return False, 0.1
            
            return True, 0.0
    
    async def register_sent_message(self):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        async with self._rate_lock:
            self.sent_messages.append(time.time())
    
    async def safe_send_with_retry(
        self,
        send_func: Callable,
        *args,
        chat_id: Optional[int] = None,
        max_retries: int = 2,
        **kwargs
    ) -> Optional[Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            send_func: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (message.answer, message.edit_text –∏ —Ç.–¥.)
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º flood control
        is_blocked, remaining = await self.flood_control.is_blocked(chat_id)
        if is_blocked:
            logger.warning(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ flood control. "
                f"–û—Å—Ç–∞–ª–æ—Å—å {remaining:.0f} —Å–µ–∫—É–Ω–¥."
            )
            return None
        
        for attempt in range(max_retries + 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
                allowed, wait_time = await self.check_rate_limit()
                if not allowed:
                    logger.debug(f"Rate limit: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.2f}—Å")
                    await asyncio.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                result = await send_func(*args, **kwargs)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                await self.register_sent_message()
                
                return result
            
            except TelegramRetryAfter as e:
                retry_after = e.retry_after
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º flood control
                await self.flood_control.register_flood_control(retry_after, chat_id)
                
                # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º
                if retry_after <= 5 and attempt < max_retries:
                    logger.warning(
                        f"–ö–æ—Ä–æ—Ç–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {retry_after}—Å, "
                        f"–æ–∂–∏–¥–∞–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})"
                    )
                    await asyncio.sleep(retry_after + 0.5)
                    continue
                else:
                    logger.error(
                        f"Flood control: {retry_after}—Å. "
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
                    )
                    return None
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                if attempt < max_retries:
                    await asyncio.sleep(0.5 * (attempt + 1))
                    continue
                return None
        
        return None
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            "flood_control": self.flood_control.get_stats(),
            "queue_size": self.message_queue.get_size(),
            "messages_sent_last_second": len([
                t for t in self.sent_messages 
                if time.time() - t < 1.0
            ]),
            "rate_limit": {
                "messages_per_second": self.messages_per_second,
                "burst_limit": self.burst_limit
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_rate_limiter = TelegramRateLimiter()

