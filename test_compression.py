#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Å–∂–∞—Ç–∏—è
"""

import asyncio
import os
from pathlib import Path
from src.services.transcription_service import TranscriptionService
from src.ux.progress_tracker import ProgressTracker
from aiogram import Bot
from aiogram.types import Message

class MockBot:
    async def send_message(self, chat_id, text, parse_mode=None):
        print(f"üì± –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}:")
        print(text)
        print("-" * 50)
        return MockMessage()

class MockMessage:
    async def edit_text(self, text, parse_mode=None):
        print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print(text)
        print("-" * 50)

async def test_compression():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–∂–∞—Ç–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∂–∞—Ç–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    bot = MockBot()
    message = MockMessage()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–µ—Ä
    progress_tracker = ProgressTracker(bot, 123456, message)
    progress_tracker.setup_default_stages()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    transcription_service = TranscriptionService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
    test_file = "temp/test_audio.mp3"
    if not os.path.exists(test_file):
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        os.makedirs("temp", exist_ok=True)
        with open(test_file, "wb") as f:
            f.write(b"fake audio data" * 1000)  # ~16KB —Ñ–∞–π–ª
    
    print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...")
    processed_file, compression_info = transcription_service._preprocess_for_groq(test_file)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {processed_file}")
    print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∂–∞—Ç–∏–∏: {compression_info}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º callback —Å–∂–∞—Ç–∏—è
    if compression_info and compression_info.get("compressed", False):
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback —Å–∂–∞—Ç–∏—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        await progress_tracker.start_stage("transcription")
        
        # –°–æ–∑–¥–∞–µ–º callback
        def test_callback(percent, message, compression_info=None):
            print(f"üìû Callback –≤—ã–∑–≤–∞–Ω: {percent}% - {message}")
            if compression_info:
                print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∂–∞—Ç–∏–∏: {compression_info}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            asyncio.create_task(
                progress_tracker.update_stage_progress(
                    "transcription", percent, message, compression_info
                )
            )
        
        # –í—ã–∑—ã–≤–∞–µ–º callback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∂–∞—Ç–∏–∏
        test_callback(100, "compression_complete", compression_info)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(1)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —ç—Ç–∞–ø
        await progress_tracker.complete_stage("transcription")
        
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª —Å–∂–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç callback")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_compression())
