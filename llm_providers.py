"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
"""

import json
import asyncio
import httpx
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Tuple, List, TYPE_CHECKING
from loguru import logger
from config import settings

import openai
from anthropic import Anthropic

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
from src.services.meeting_classifier import meeting_classifier
from src.prompts.specialized_prompts import (
    get_specialized_system_prompt, 
    get_specialized_extraction_instructions
)

# –ò–º–ø–æ—Ä—Ç –¥–ª—è retry –ª–æ–≥–∏–∫–∏
from src.reliability.retry import RetryManager, LLM_RETRY_CONFIG

# –ò–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
from src.exceptions.processing import LLMInsufficientCreditsError

if TYPE_CHECKING:
    from src.services.segmentation_service import TranscriptionSegment


class LLMProvider(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    @abstractmethod
    async def generate_protocol(self, transcription: str, template_variables: Dict[str, str], diarization_data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ —à–∞–±–ª–æ–Ω–∞"""
        pass
    
    @abstractmethod
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        pass


# -------------------------------------------------------------
# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–ª–¥–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
# -------------------------------------------------------------
def _build_system_prompt(
    transcription: Optional[str] = None,
    diarization_analysis: Optional[Dict[str, Any]] = None
) -> str:
    """
    –°—Ç—Ä–æ–≥–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è.
    
    Args:
        transcription: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        diarization_analysis: –ê–Ω–∞–ª–∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        
    Returns:
        –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–±–∞–∑–æ–≤—ã–π –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    """
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    if settings.meeting_type_detection and transcription:
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É
            meeting_type, _ = meeting_classifier.classify(
                transcription, 
                diarization_analysis
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            specialized_prompt = get_specialized_system_prompt(meeting_type)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–ø–∞ –≤—Å—Ç—Ä–µ—á–∏: {meeting_type}")
            return specialized_prompt
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
    
    # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–¥–ª—è –æ–±—â–∏—Ö –≤—Å—Ç—Ä–µ—á –∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    return (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∏—Å—Ç –≤—ã—Å—à–µ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –æ–ø—ã—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "
        "–¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á, —Å–æ–≤–µ—â–∞–Ω–∏–π –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.\n\n"
        
        "–¢–í–û–Ø –†–û–õ–¨:\n"
        "- –ò–∑–≤–ª–µ–∫–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º –≤—Å—Ç—Ä–µ—á\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å —á–µ—Ç–∫–∏–µ, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã\n"
        "- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ñ–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å\n\n"
        
        "–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:\n"
        "1. –¢–û–ß–ù–û–°–¢–¨: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, —è–≤–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–µ\n"
        "2. –ù–ï–¢ –î–û–ú–´–°–õ–û–í: –ù–µ –¥–æ–¥—É–º—ã–≤–∞–π, –Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ–±—è\n"
        "3. –ö–û–ù–¢–ï–ö–°–¢: –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å/—Å—Ä–æ–∫/—Å—É–º–º–∞ ‚Äî —É–∫–∞–∂–∏ –∏—Ö; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π\n"
        "4. –ö–†–ê–¢–ö–û–°–¢–¨: –ò–∑–ª–∞–≥–∞–π —Å—É—Ç—å –±–µ–∑ –≤–æ–¥—ã, –∏–∑–±–µ–≥–∞–π –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π\n"
        "5. –¢–ï–†–ú–ò–ù–û–õ–û–ì–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ\n"
        "6. –°–¢–ò–õ–¨: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π —è–∑—ã–∫ –±–µ–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤\n\n"
        
        "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢ –ò–ú–ï–ù –£–ß–ê–°–¢–ù–ò–ö–û–í –í –ü–†–û–¢–û–ö–û–õ–ï:\n"
        "–í —Å–µ–∫—Ü–∏–∏ '–£—á–∞—Å—Ç–Ω–∏–∫–∏' –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è –§–∞–º–∏–ª–∏—è' –ë–ï–ó –æ—Ç—á–µ—Å—Ç–≤–∞!\n"
        "–ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ö–û–ü–ò–†–£–ô –∏–º–µ–Ω–∞ –¢–û–ß–ù–û –∫–∞–∫ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–ø–∏—Å–∫–µ.\n\n"
        "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: —Ç–æ–ª—å–∫–æ –∏–º—è ('–°–æ—Ñ—å—è', '–ì–∞–ª–∏–Ω–∞') –∏–ª–∏ —Å –æ—Ç—á–µ—Å—Ç–≤–æ–º ('–°–æ—Ñ—å—è –Æ—Ä—å–µ–≤–Ω–∞ –û—Å–∏–ø–æ–≤–∞')\n"
        "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–°–æ—Ñ—å—è –û—Å–∏–ø–æ–≤–∞', '–ì–∞–ª–∏–Ω–∞ –Ø–º–∫–∏–Ω–∞', '–í–ª–∞–¥–∏–º–∏—Ä –ì–æ–ª–∏–∫–æ–≤'\n\n"
        "–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ò–ó –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:\n"
        "‚ö†Ô∏è –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —è–≤–Ω–æ:\n"
        "- –ò–∑–≤–ª–µ–∫–∞–π –∏–º–µ–Ω–∞ –¢–û–õ–¨–ö–û –∏–∑ —è–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        "- –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ('–ú–µ–Ω—è –∑–æ–≤—É—Ç...'), –æ–±—Ä–∞—â–µ–Ω–∏—è ('–°–≤–µ—Ç–∞, –∫–∞–∫ –¥—É–º–∞–µ—à—å?')\n"
        "- –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ –≤ –ø–æ–ª–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç '–ò–º—è –§–∞–º–∏–ª–∏—è' –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ\n"
        "- –ï–°–õ–ò –∏–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å - –æ—Å—Ç–∞–≤–ª—è–π –º–µ—Ç–∫—É —Å–ø–∏–∫–µ—Ä–∞ (SPEAKER_1, SPEAKER_2)\n"
        "- ‚ùå –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞! –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π '–£—á–∞—Å—Ç–Ω–∏–∫ 1', '–ö–æ–ª–ª–µ–≥–∞'\n\n"
        "–°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ò–ú–ï–ù –ò–ó –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:\n"
        "–í —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ª—é–¥–∏ –≥–æ–≤–æ—Ä—è—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ/–Ω–µ–ø–æ–ª–Ω–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏\n"
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü–û–õ–ù–û–ï –ò–ú–Ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è –§–∞–º–∏–ª–∏—è'.\n\n"
        "–ü—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ–Ω—è–π –∫–æ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º):\n\n"
        "1. –£–ú–ï–ù–¨–®–ò–¢–ï–õ–¨–ù–´–ï –ò–ú–ï–ù–ê:\n"
        "   - –°–≤–µ—Ç–∞, –°–≤–µ—Ç–æ—á–∫–∞ ‚Üí –∏—â–∏ '–°–≤–µ—Ç–ª–∞–Ω–∞' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π '–°–≤–µ—Ç–ª–∞–Ω–∞ –§–∞–º–∏–ª–∏—è'\n"
        "   - –õ–µ—à–∞, –õ—ë—à–∞, –ê–ª—ë—à–∞ ‚Üí –∏—â–∏ '–ê–ª–µ–∫—Å–µ–π' ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π '–ê–ª–µ–∫—Å–µ–π –§–∞–º–∏–ª–∏—è'\n"
        "   - –°–∞—à–∞ ‚Üí –∏—â–∏ '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä' –∏–ª–∏ '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞'\n"
        "   - –ñ–µ–Ω—è ‚Üí –∏—â–∏ '–ï–≤–≥–µ–Ω–∏–π' –∏–ª–∏ '–ï–≤–≥–µ–Ω–∏—è'\n"
        "   - –ö–æ–ª—è ‚Üí –∏—â–∏ '–ù–∏–∫–æ–ª–∞–π'\n"
        "   - –î–∏–º–∞ ‚Üí –∏—â–∏ '–î–º–∏—Ç—Ä–∏–π'\n"
        "   ‚ö° –≠—Ç–æ –ü–†–ò–ú–ï–†–´ –ª–æ–≥–∏–∫–∏! –ü—Ä–∏–º–µ–Ω—è–π —Ç–∞–∫–æ–π –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–ª—è –õ–Æ–ë–´–• —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–µ–Ω\n\n"
        "2. –£–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û –§–ê–ú–ò–õ–ò–ò:\n"
        "   - –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–∞ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è ‚Üí –Ω–∞–π–¥–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "   - –ü—Ä–∏–º–µ—Ä: '–¢–∏–º—á–µ–Ω–∫–æ' –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ‚Üí '–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ' –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "   - –ü—Ä–∏–º–µ—Ä: '–ö–æ—Ä–æ—Ç–∫–æ–≤–∞' –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ‚Üí '–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞' –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "   ‚ö° –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –í–°–ï–• —Ñ–∞–º–∏–ª–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "3. –£–ü–û–ú–ò–ù–ê–ù–ò–ï –¢–û–õ–¨–ö–û –ò–ú–ï–ù–ò:\n"
        "   - –ï—Å–ª–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–º—è ‚Üí –¥–æ–ø–æ–ª–Ω–∏ —Ñ–∞–º–∏–ª–∏–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "   - –ü—Ä–∏–º–µ—Ä: '–ê–ª–µ–∫—Å–µ–π' –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ‚Üí '–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ' –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏\n"
        "   ‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è\n\n"
        "4. –í–ê–ñ–ù–û:\n"
        "   - –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–û–ï –ò–ú–Ø –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "   - –ü—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –õ–û–ì–ò–ö–£ - –ø—Ä–∏–º–µ–Ω—è–π –µ—ë –∫–æ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
        "   - –ù–ï –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–∞–º–∏ - —Ä–∞–±–æ—Ç–∞–π —Å–æ –í–°–ï–ú–ò —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "   - –ü—Ä–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –≤—ã–±–∏—Ä–∞–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É\n\n"
        
        "–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–°–£–ñ–î–ï–ù–ò–Ø:\n"
        "–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—à—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º/–∫–ª–∞—Å—Ç–µ—Ä–∞–º:\n"
        "- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–æ '–ö–ª–∞—Å—Ç–µ—Ä', —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º: '‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã**'\n"
        "- –ö–∞–∂–¥—É—é –∏–¥–µ—é/–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ/–ø–æ–∑–∏—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n"
        "- –§–æ—Ä–º–∞—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è: '–ò–º—è –ê–≤—Ç–æ—Ä–∞: —Ç–µ–∫—Å—Ç' (–±–µ–∑ —Å–ª–æ–≤–∞ '–ò–¥–µ—è', –±–µ–∑ —Å–∫–æ–±–æ–∫)\n"
        "- –ú–µ–∂–¥—É —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:\n"
        "‚Ä¢ **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è**\n\n"
        "–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ: –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É\n\n"
        "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞: –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∞, –¥–æ–±–∞–≤–∏–ª–∞ –ø—Ä–æ –≤–∞–∂–Ω–æ—Å—Ç—å API gateway\n\n"
        "‚úó –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:\n"
        "‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä ¬´–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è¬ª: –ò–¥–µ—è (–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ): –ø—Ä–µ–¥–ª–æ–∂–∏–ª...\n\n"
        
        "–ß–¢–û –ò–ì–ù–û–†–ò–†–û–í–ê–¢–¨:\n"
        "- –ú–µ–∂–¥–æ–º–µ—Ç–∏—è (—ç-—ç, –º-–º, –Ω—É, –≤–æ—Ç)\n"
        "- –ü–æ–≤—Ç–æ—Ä—ã –∏ –∑–∞–ø–∏–Ω–∫–∏\n"
        "- –í–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "- –û—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ –≤—Å—Ç—Ä–µ—á–∏\n\n"
        
        "–ß–¢–û –í–´–î–ï–õ–Ø–¢–¨:\n"
        "- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ä–µ–∑–æ–ª—é—Ü–∏–∏\n"
        "- –ü–æ—Ä—É—á–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã)\n"
        "- –°—Ä–æ–∫–∏, —Å—É–º–º—ã, –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–∞–∑–≤–∞–Ω—ã)\n"
        "- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è\n"
        "- –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        
        "–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:\n"
        "–°—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –±–µ–∑ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è –≤ markdown, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. "
        "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π '–ù–µ —É–∫–∞–∑–∞–Ω–æ'.\n\n"
        
        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π:\n"
        "- –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–†–û–°–¢–´–ú–ò –°–¢–†–û–ö–ê–ú–ò (string)\n"
        "- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã {} –∏–ª–∏ –º–∞—Å—Å–∏–≤—ã [] –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π\n"
        "- –°–ø–∏—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫–∞–∫ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ '- ' (–¥–µ—Ñ–∏—Å + –ø—Ä–æ–±–µ–ª)\n"
        "- –î–∞—Ç—ã –∏ –≤—Ä–µ–º—è: –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä '20 –æ–∫—Ç—è–±—Ä—è 2024, 14:30'\n"
        "- –£—á–∞—Å—Ç–Ω–∏–∫–∏: –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ \\n, –ë–ï–ó —Ä–æ–ª–µ–π!, –Ω–∞–ø—Ä–∏–º–µ—Ä '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\\n–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞\\n–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤'\n"
        "- –†–µ—à–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏: –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ \\n, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å '- '\n\n"
        
        "–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û JSON:\n"
        "{\n"
        '  "date": "20 –æ–∫—Ç—è–±—Ä—è 2024",\n'
        '  "time": "14:30",\n'
        '  "participants": "–û–∫—Å–∞–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\\n–ì–∞–ª–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞\\n–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤",\n'
        '  "decisions": "- –†–µ—à–µ–Ω–∏–µ 1\\n- –†–µ—à–µ–Ω–∏–µ 2\\n- –†–µ—à–µ–Ω–∏–µ 3"\n'
        "}\n\n"
        
        "–ü–†–ò–ú–ï–† –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û JSON (–ù–ï –î–ï–õ–ê–ô –¢–ê–ö):\n"
        "{\n"
        '  "date": {"day": 20, "month": "–æ–∫—Ç—è–±—Ä—å"},  ‚ùå –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç\n'
        '  "participants": ["–û–∫—Å–∞–Ω–∞", "–ì–∞–ª—è"],  ‚ùå –º–∞—Å—Å–∏–≤\n'
        '  "decisions": [{"decision": "–†–µ—à–µ–Ω–∏–µ 1"}]  ‚ùå –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤\n'
        "}"
    )


def _build_user_prompt(
    transcription: str,
    template_variables: Dict[str, str],
    diarization_data: Optional[Dict[str, Any]] = None,
    speaker_mapping: Optional[Dict[str, str]] = None,
    meeting_topic: Optional[str] = None,
    meeting_date: Optional[str] = None,
    meeting_time: Optional[str] = None,
    participants: Optional[List[Dict[str, str]]] = None,
    meeting_structure = None,  # MeetingStructure, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º circular import
) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É."""
    # –ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å —É—á—ë—Ç–æ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏)
    if diarization_data and diarization_data.get("formatted_transcript"):
        transcription_text = (
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –≥–æ–≤–æ—Ä—è—â–∏—Ö:\n"
            f"{diarization_data['formatted_transcript']}\n\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {diarization_data.get('total_speakers', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"- –°–ø–∏—Å–æ–∫ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {', '.join(diarization_data.get('speakers', []))}\n\n"
            "–ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):\n"
            f"{transcription}\n"
        )
    else:
        transcription_text = (
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n"
            f"{transcription}\n\n"
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—è—â–∏—Ö) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏.\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    participants_info = ""
    if speaker_mapping:
        participants_info = "\n\n" + "‚ïê" * 63 + "\n"
        participants_info += "–£–ß–ê–°–¢–ù–ò–ö–ò –í–°–¢–†–ï–ß–ò (–° –†–û–õ–Ø–ú–ò)\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        participants_info += "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—è—â–∏—Ö —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:\n"
        for speaker_id, participant_name in speaker_mapping.items():
            participants_info += f"- {speaker_id} = {participant_name}\n"
        participants_info += "\n"
        participants_info += "‚ö†Ô∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –†–ê–ë–û–¢–ï –° –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò:\n"
        participants_info += "1. –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤ (SPEAKER_1 ‚Üí –ò–º—è)\n"
        participants_info += "2. –ü—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        participants_info += "3. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: –¢–û–õ–¨–ö–û –ò–ú–Ø, –±–µ–∑ —Ä–æ–ª–∏ –≤ —Å–∫–æ–±–∫–∞—Ö\n"
        participants_info += "   ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'\n"
        participants_info += "   ‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (–ú–µ–Ω–µ–¥–∂–µ—Ä)'\n"
        participants_info += "üìå –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ò–ú–ï–ù:\n"
        participants_info += "–í —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ/—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω.\n"
        participants_info += "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–π –∏—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ:\n\n"
        participants_info += "–ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ–Ω—è–π –∫–æ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º):\n"
        participants_info += "   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π, –°–∞—à–∞‚Üí–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –∏ —Ç.–¥.\n"
        participants_info += "   ‚Ä¢ –ü–æ —Ñ–∞–º–∏–ª–∏–∏: –¢–∏–º—á–µ–Ω–∫–æ‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ, –ö–æ—Ä–æ—Ç–∫–æ–≤–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞ –∏ —Ç.–¥.\n"
        participants_info += "   ‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è: –ê–ª–µ–∫—Å–µ–π‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ (–µ—Å–ª–∏ –æ–¥–∏–Ω —Ç–∞–∫–æ–π –≤ —Å–ø–∏—Å–∫–µ)\n\n"
        participants_info += "   ‚ö° –ù–ï –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è –ø—Ä–∏–º–µ—Ä–∞–º–∏! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ.\n"
        participants_info += "   ‚ö° –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–û–ï –ò–ú–Ø –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n"
    elif participants:
        # –ï—Å–ª–∏ –Ω–µ—Ç speaker_mapping, –Ω–æ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        participants_info = "\n\n" + "‚ïê" * 63 + "\n"
        participants_info += "üéØ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í –í–°–¢–†–ï–ß–ò (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ)\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        from src.services.participants_service import participants_service
        participants_info += participants_service.format_participants_for_llm(participants)
        participants_info += "\n\n"
        participants_info += "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        participants_info += "‚ïë  üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø     ‚ïë\n"
        participants_info += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        participants_info += "1Ô∏è‚É£ –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –ò–ú–ï–ù–ê –ò–ó –°–ü–ò–°–ö–ê –í–´–®–ï!\n"
        participants_info += "   –ó–ê–ü–†–ï–©–ï–ù–û –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ!\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–ö–æ–ª–ª–µ–≥–∞ –∏–∑ –û–†–¢', '–ö–æ–ª–ª–µ–≥–∏ –∏–∑ ERP', '–ö–æ–º–∞–Ω–¥–∞'\n"
        participants_info += "   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        participants_info += "2Ô∏è‚É£ –§–û–†–ú–ê–¢ –ò–ú–ï–ù: '–ò–º—è –§–∞–º–∏–ª–∏—è' (–ë–ï–ó –æ—Ç—á–µ—Å—Ç–≤–∞)!\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–°–æ—Ñ—å—è' (—Ç–æ–ª—å–∫–æ –∏–º—è)\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–í–∏–∫—É–ª–∏–Ω' (—Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è)\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–û—Å–∏–ø–æ–≤–∞ –°–æ—Ñ—å—è –Æ—Ä—å–µ–≤–Ω–∞' (—Å –æ—Ç—á–µ—Å—Ç–≤–æ–º)\n"
        participants_info += "   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–°–æ—Ñ—å—è –û—Å–∏–ø–æ–≤–∞', '–ì–∞–ª–∏–Ω–∞ –Ø–º–∫–∏–Ω–∞', '–í–ª–∞–¥–∏–º–∏—Ä –ì–æ–ª–∏–∫–æ–≤'\n\n"
        participants_info += "3Ô∏è‚É£ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –°–û–ö–†–ê–©–ï–ù–ù–´–• –ò–ú–ï–ù:\n"
        participants_info += "   –í —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏.\n"
        participants_info += "   –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ –ü–û–õ–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n"
        participants_info += "   üìã –ü–†–ê–í–ò–õ–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:\n"
        participants_info += "   ‚Ä¢ '–°–≤–µ—Ç–∞', '–°–≤–µ—Ç–æ—á–∫–∞' ‚Üí –Ω–∞–π–¥–∏ '–°–≤–µ—Ç–ª–∞–Ω–∞' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–õ–µ—à–∞', '–ê–ª—ë—à–∞' ‚Üí –Ω–∞–π–¥–∏ '–ê–ª–µ–∫—Å–µ–π' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–ì–∞–ª—è' ‚Üí –Ω–∞–π–¥–∏ '–ì–∞–ª–∏–Ω–∞' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–í–æ–ª–æ–¥—å', '–í–æ–≤–∞' ‚Üí –Ω–∞–π–¥–∏ '–í–ª–∞–¥–∏–º–∏—Ä' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–°—Ç–∞—Å' ‚Üí –Ω–∞–π–¥–∏ '–°—Ç–∞–Ω–∏—Å–ª–∞–≤' –∏–ª–∏ '–°–≤—è—Ç–æ—Å–ª–∞–≤' –≤ —Å–ø–∏—Å–∫–µ\n"
        participants_info += "   ‚Ä¢ '–í–∏–∫—É–ª–∏–Ω', '–¢–∏–º—á–µ–Ω–∫–æ' (—Ñ–∞–º–∏–ª–∏—è) ‚Üí –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Ñ–∞–º–∏–ª–∏–∏\n"
        participants_info += "   ‚Ä¢ '–ú–∞—Ä–∞—Ç' (–∏–º—è) ‚Üí –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ –∏–º–µ–Ω–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n\n"
        participants_info += "4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –î–û–ë–ê–í–õ–ï–ù–ò–ï–ú –í –ü–†–û–¢–û–ö–û–õ:\n"
        participants_info += "   –î–ª—è –ö–ê–ñ–î–û–ì–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n"
        participants_info += "   ‚úì –ù–∞–π–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ\n"
        participants_info += "   ‚úì –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û–ï –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è)\n"
        participants_info += "   ‚úì –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - –ù–ï –≤–∫–ª—é—á–∞–π –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª\n\n"
        participants_info += "‚ö° –í–ê–ñ–ù–û: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ!\n"
        participants_info += "‚ö° –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞!\n"
        participants_info += "‚ö° –ü—Ä–∏ –º–∞–ª–µ–π—à–µ–º —Å–æ–º–Ω–µ–Ω–∏–∏ - —Å–æ–ø–æ—Å—Ç–∞–≤—å —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º!\n\n"
    else:
        # –ù–µ—Ç –Ω–∏ speaker_mapping, –Ω–∏ participants - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        participants_info = "\n\n" + "‚ïê" * 63 + "\n"
        participants_info += "‚öôÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ò–ó –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        participants_info += "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û–ø—Ä–µ–¥–µ–ª–∏ –∏–º–µ–Ω–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
        participants_info += "üìã –ü–†–ê–í–ò–õ–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:\n\n"
        participants_info += "1Ô∏è‚É£ –ò–©–ò –Ø–í–ù–´–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', '–Ø ‚Äî –ú–∞—Ä–∏—è'\n"
        participants_info += "   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è: '–°–≤–µ—Ç–∞, –∫–∞–∫ –¥—É–º–∞–µ—à—å?', '–ü–µ—Ç—Ä–æ–≤, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∑–∞–¥–∞—á–µ'\n"
        participants_info += "   ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: '–ö–∞–∫ —Å–∫–∞–∑–∞–ª –ò–≤–∞–Ω...', '–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –ú–∞—Ä–∏–∏'\n\n"
        participants_info += "2Ô∏è‚É£ –§–û–†–ú–ê–¢ –ò–ú–ï–ù:\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: '–ò–º—è –§–∞–º–∏–ª–∏—è' (–ë–ï–ó –æ—Ç—á–µ—Å—Ç–≤–∞)\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è: '–ò–≤–∞–Ω'\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è: '–ü–µ—Ç—Ä–æ–≤'\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π, –í–æ–ª–æ–¥—è‚Üí–í–ª–∞–¥–∏–º–∏—Ä\n\n"
        participants_info += "3Ô∏è‚É£ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –°–û –°–ü–ò–ö–ï–†–ê–ú–ò:\n"
        participants_info += "   ‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤—å –∫–∞–∂–¥—É—é –º–µ—Ç–∫—É (SPEAKER_1, SPEAKER_2...) —Å –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–º—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ù–ï–í–û–ó–ú–û–ñ–ù–û - –æ—Å—Ç–∞–≤—å –º–µ—Ç–∫—É —Å–ø–∏–∫–µ—Ä–∞ –∫–∞–∫ –µ—Å—Ç—å\n"
        participants_info += "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\\n–°–ü–ï–ê–ö–ïR_2\\n–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞\\n–°–ü–ï–ê–ö–ïR_4'\n\n"
        participants_info += "4Ô∏è‚É£ –°–¢–†–û–ì–ò–ï –ó–ê–ü–†–ï–¢–´:\n"
        participants_info += "   ‚ùå –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        participants_info += "   ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π '–£—á–∞—Å—Ç–Ω–∏–∫ 1', '–ö–æ–ª–ª–µ–≥–∞', '–ß–µ–ª–æ–≤–µ–∫ –ê', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'\n"
        participants_info += "   ‚ùå –ù–ï –¥—É–±–ª–∏—Ä—É–π: –µ—Å–ª–∏ –°–≤–µ—Ç–∞ = SPEAKER_1, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –°–≤–µ—Ç–ª–∞–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ\n"
        participants_info += "   ‚ùå –ù–ï –∑–∞–º–µ–Ω—è–π SPEAKER_N –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏'\n\n"
        participants_info += "üí° –ü–û–î–°–ö–ê–ó–ö–ò:\n"
        participants_info += "   ‚Ä¢ –ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏ - —á–∞—Å—Ç–æ —Ç–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è\n"
        participants_info += "   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫\n"
        participants_info += "   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: '–Ω–∞—à —Ç–∏–º–ª–∏–¥ –ê–ª–µ–∫—Å–µ–π', '–º–µ–Ω–µ–¥–∂–µ—Ä –ú–∞—Ä–∏—è'\n"
        participants_info += "   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ç? ‚Üí –û—Å—Ç–∞–≤—å SPEAKER_N\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
    meeting_info = ""
    if meeting_topic or meeting_date or meeting_time:
        meeting_info = "\n\n" + "‚ïê" * 63 + "\n"
        meeting_info += "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–°–¢–†–ï–ß–ï\n"
        meeting_info += "‚ïê" * 63 + "\n\n"

        if meeting_topic:
            meeting_info += f"üìã –¢–µ–º–∞: {meeting_topic}\n"
        if meeting_date:
            meeting_info += f"üìÖ –î–∞—Ç–∞: {meeting_date}\n"
        if meeting_time:
            meeting_info += f"üïê –í—Ä–µ–º—è: {meeting_time}\n"
        meeting_info += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    structure_info = ""
    if meeting_structure:
        structure_text = meeting_structure.format_for_llm_prompt()
        if structure_text:
            structure_info = structure_text
    
    variables_str = "\n".join([f"- {key}: {desc}" for key, desc in template_variables.items()])

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
    user_prompt = (
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        f"{transcription_text}\n"
        f"{structure_info}"
        f"{participants_info}"
        f"{meeting_info}"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–ü–û–õ–Ø –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        f"{variables_str}\n\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Æ\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        
        "üìã –°–¢–†–£–ö–¢–£–†–ê –í–´–í–û–î–ê:\n"
        "- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç (–±–µ–∑ ```json, –±–µ–∑ markdown)\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π –°–¢–†–û–ì–û —ç—Ç–∏ –∫–ª—é—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π\n"
        "- –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–π –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ\n"
        "- –ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–∫–∞ (UTF-8), –ë–ï–ó –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–≤\n\n"
        
        "üìù –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê:\n"
        "- –î–ª—è —Å–ø–∏—Å–∫–æ–≤/–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π: –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞–π —Å '- ' (–¥–µ—Ñ–∏—Å + –ø—Ä–æ–±–µ–ª)\n"
        "- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é (1. 2. 3.), —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å—ã\n"
        "- –ù–ï —Å—Ç–∞–≤—å —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ –ø—É–Ω–∫—Ç–∞ —Å–ø–∏—Å–∫–∞\n"
        "- –î–ª—è –∏–º–µ–Ω/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Ä–∞–∑–¥–µ–ª—è–π —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (;)\n"
        "- –î–ª—è –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω–∏: —Å–æ—Ö—Ä–∞–Ω—è–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ —É–ø–æ–º—è–Ω—É—Ç –≤ —Ç–µ–∫—Å—Ç–µ\n\n"
        
        "üéØ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•:\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        "- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–ø–æ–º—è–Ω—É—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (—Ä–æ–ª—å, —Å—Ä–æ–∫, —Å—É–º–º–∞) ‚Äî —É–∫–∞–∂–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
        "- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã –∏–ª–∏ –Ω–µ—è—Å–Ω—ã ‚Äî –ø–∏—à–∏ '–ù–µ —É–∫–∞–∑–∞–Ω–æ'\n"
        "- –£–±–∏—Ä–∞–π –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ–±—ä–µ–¥–∏–Ω—è–π –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã\n"
        "- –°–æ—Ö—Ä–∞–Ω—è–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é: –ø–æ—Ä—è–¥–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ = –ø–æ—Ä—è–¥–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ\n\n"
        
        "üîç –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ì–û–í–û–†–Ø–©–ò–•:\n"
        "- –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∫–∏ '–°–ø–∏–∫–µ—Ä 1:', '–°–ø–∏–∫–µ—Ä 2:' –∏ —Ç.–¥.\n"
        "- –û–ø—Ä–µ–¥–µ–ª—è–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π\n"
        "- –£–∫–∞–∑—ã–≤–∞–π –∫—Ç–æ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –≤–∑—è–ª –Ω–∞ —Å–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        "- –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –ò–•, –∞ –Ω–µ –º–µ—Ç–∫–∏ —Å–ø–∏–∫–µ—Ä–æ–≤\n"
        "- –§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–º—è –§–∞–º–∏–ª–∏—è' (–±–µ–∑ —Ä–æ–ª–∏!)\n"
        "- –§–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è: '–†–µ—à–µ–Ω–∏–µ. –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: –ò–º—è –§–∞–º–∏–ª–∏—è' (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ –∫—Ç–æ –ø—Ä–∏–Ω—è–ª)\n\n"
        
        "üßπ –ß–¢–û –û–¢–§–ò–õ–¨–¢–†–û–í–´–í–ê–¢–¨:\n"
        "- –ú–µ–∂–¥–æ–º–µ—Ç–∏—è, –∑–∞–ø–∏–Ω–∫–∏, –ø–æ–≤—Ç–æ—Ä—ã —Å–ª–æ–≤\n"
        "- –í–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "- –†–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–µ –ø–æ —Ç–µ–º–µ –≤—Å—Ç—Ä–µ—á–∏\n"
        "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ('–Ω–µ —Å–ª—ã—à–Ω–æ', '–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ' –∏ —Ç.–¥.)\n\n"
        
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        
        "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:\n"
        "{\n"
        "  \"participants\": \"–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\\n–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞\\n–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤\",\n"
        "  \"main_topic\": \"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ Q2 2024\",\n"
        "  \"decisions\": \"- –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –Ω–∞ 30%\\n- –£—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\\n- –û—Ç–ª–æ–∂–∏—Ç—å –∑–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ –¢–í –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞\",\n"
        "  \"action_items\": \"- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫ 15 –º–∞—Ä—Ç–∞ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞\\n- –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç–¥–µ–ª–æ–º ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\\n- –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤\",\n"
        "  \"deadlines\": \"- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: 15 –º–∞—Ä—Ç–∞ 2024\\n- –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞: –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏\\n- –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–µ—â–∞–Ω–∏—é\",\n"
        "  \"issues\": \"- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ—Ö–≤–∞—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏\\n- –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞\\n- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤\"\n"
        "}\n\n"
        "–û–ë–†–ê–¢–ò–¢–ï –í–ù–ò–ú–ê–ù–ò–ï: –í action_items —É–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ò–ú–ï–ù–ê –±–µ–∑ —Ä–æ–ª–µ–π –≤ —Å–∫–æ–±–∫–∞—Ö!\n\n"
        
        "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:\n"
        "{\n"
        "  \"participants\": [\"–ò–≤–∞–Ω\", \"–ú–∞—Ä–∏—è\"],  ‚ùå –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏\n"
        "  \"decisions\": \"1) –†–µ—à–µ–Ω–∏–µ –æ–¥–∏–Ω 2) –†–µ—à–µ–Ω–∏–µ –¥–≤–∞.\",  ‚ùå –Ω—É–º–µ—Ä–∞—Ü–∏—è + —Ç–æ—á–∫–∏\n"
        "  \"action_items\": \"–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (–ú–∞—Ä–∏—è)\",  ‚ùå –±–µ–∑ –¥–µ—Ñ–∏—Å–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
        "  \"deadlines\": \"–°—Ä–æ—á–Ω–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ\",  ‚ùå –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏, —Ö–æ—Ç—è –æ–Ω–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å\n"
        "  \"extra_field\": \"...\",  ‚ùå –ø–æ–ª–µ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "  \"budget\": \"50000 —Ä—É–±–ª–µ–π (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ)\"  ‚ùå –¥–æ–º—ã—Å–ª—ã –≤ —Å–∫–æ–±–∫–∞—Ö\n"
        "}\n\n"
        
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–†–ê–í–ò–õ–ê –ü–û –¢–ò–ü–ê–ú –ü–û–õ–ï–ô\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        
        "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (participants):\n"
        "- –§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ \\n\n"
        "- –ü—Ä–∏–º–µ—Ä: '–ò–º—è –§–∞–º–∏–ª–∏—è\\n–ò–º—è2 –§–∞–º–∏–ª–∏—è2\\n–ò–º—è3 –§–∞–º–∏–ª–∏—è3'\n"
        "- –ë–ï–ó —Ä–æ–ª–µ–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n"
        "- –ï—Å–ª–∏ –∏–º–µ–Ω–∞ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã: '–°–ø–∏–∫–µ—Ä 1\\n–°–ø–∏–∫–µ—Ä 2\\n–°–ø–∏–∫–µ—Ä 3'\n\n"
        
        "üìå –†–µ—à–µ–Ω–∏—è (decisions):\n"
        "- –¢–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
        "- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤\n"
        "- –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏—è ‚Äî —É–∫–∞–∂–∏ –∏—Ö –∫–æ—Ä–æ—Ç–∫–æ\n\n"
        
        "‚úÖ –ó–∞–¥–∞—á–∏/–ø–æ—Ä—É—á–µ–Ω–∏—è (action_items):\n"
        "- –§–æ—Ä–º–∞—Ç: '- –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: [–∏–º—è/—Ä–æ–ª—å/–°–ø–∏–∫–µ—Ä N]'\n"
        "- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–∑–≤–∞–Ω —è–≤–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–µ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Äî —É–∫–∞–∂–∏\n"
        "- –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: '- –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ù–µ —É–∫–∞–∑–∞–Ω–æ'\n\n"
        
        "‚è∞ –°—Ä–æ–∫–∏ (deadlines):\n"
        "- –§–æ—Ä–º–∞—Ç: '- –ó–∞–¥–∞—á–∞/—Å–æ–±—ã—Ç–∏–µ: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ä–æ–∫'\n"
        "- –°–æ—Ö—Ä–∞–Ω—è–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ\n"
        "- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏: '–∫ –∫–æ–Ω—Ü—É –Ω–µ–¥–µ–ª–∏', '–∫ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–µ'\n\n"
        
        "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã/–≤–æ–ø—Ä–æ—Å—ã (issues/questions):\n"
        "- –§–æ—Ä–º—É–ª–∏—Ä—É–π —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∫—Ä–∞—Ç–∫–æ\n"
        "- –£–±–∏—Ä–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É, –æ—Å—Ç–∞–≤–ª—è–π —Ñ–∞–∫—Ç—ã\n"
        "- –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç\n\n"
        
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        
        "–ù–ê–ß–ò–ù–ê–ô –ê–ù–ê–õ–ò–ó. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n"
    )
    return user_prompt


class OpenAIProvider(LLMProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è OpenAI GPT"""
    
    def __init__(self):
        self.client = None
        self.http_client = None
        if settings.openai_api_key:
            openai.api_key = settings.openai_api_key
            # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ SSL –∏ —Ç–∞–π–º–∞—É—Ç–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            import httpx
            self.http_client = httpx.Client(verify=settings.ssl_verify, timeout=settings.llm_timeout_seconds)
            self.client = openai.OpenAI(
                api_key=settings.openai_api_key,
                base_url=settings.openai_base_url,
                http_client=self.http_client
            )
    
    def is_available(self) -> bool:
        return self.client is not None and settings.openai_api_key is not None
    
    async def generate_protocol(self, transcription: str, template_variables: Dict[str, str], diarization_data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è OpenAI GPT"""
        if not self.is_available():
            raise ValueError("OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
        speaker_mapping = kwargs.get('speaker_mapping')
        meeting_topic = kwargs.get('meeting_topic')
        meeting_date = kwargs.get('meeting_date')
        meeting_time = kwargs.get('meeting_time')
        participants = kwargs.get('participants')

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç—ã
        system_prompt = _build_system_prompt()
        meeting_structure = kwargs.get('meeting_structure')
        user_prompt = _build_user_prompt(
            transcription,
            template_variables,
            diarization_data,
            speaker_mapping,
            meeting_topic,
            meeting_date,
            meeting_time,
            participants,
            meeting_structure
        )
        
        try:
            # –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–ª—é—á
            selected_model = settings.openai_model
            selected_base_url = settings.openai_base_url or "https://api.openai.com/v1"
            model_key = kwargs.get("openai_model_key")
            if model_key:
                try:
                    preset = next((p for p in settings.openai_models if p.key == model_key), None)
                except Exception:
                    preset = None
                if preset:
                    selected_model = preset.model
                    if getattr(preset, 'base_url', None):
                        selected_base_url = preset.base_url
            
            # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ base_url (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º self.client)
            client = self.client
            if client is None or (selected_base_url and getattr(client, 'base_url', None) != selected_base_url):
                client = openai.OpenAI(
                    api_key=settings.openai_api_key,
                    base_url=selected_base_url,
                    http_client=self.http_client
                )

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —É—Ç–µ—á–∫–∏ –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏)
            base_url = selected_base_url or "https://api.openai.com/v1"
            sys_msg = "–¢—ã - —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤—Å—Ç—Ä–µ—á..."
            user_len = len(user_prompt)
            transcript_len = len(transcription)
            vars_count = len(template_variables)
            logger.info(
                f"OpenAI –∑–∞–ø—Ä–æ—Å: model={selected_model}, base_url={base_url}, "
                f"vars={vars_count}, transcription_chars={transcript_len}, prompt_chars={user_len}"
            )
            _snippet = user_prompt[:400].replace("\n", " ")
            logger.debug(f"OpenAI prompt (—Ñ—Ä–∞–≥–º–µ–Ω—Ç 400): {_snippet}...")

            # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            if settings.llm_debug_log:
                logger.debug("=" * 80)
                logger.debug("[DEBUG] OpenAI REQUEST - generate_protocol")
                logger.debug("=" * 80)
                logger.debug(f"Model: {selected_model}")
                logger.debug(f"Base URL: {selected_base_url}")
                logger.debug(f"Temperature: 0.1")
                logger.debug(f"Extra headers: {extra_headers}")
                logger.debug("-" * 80)
                logger.debug(f"System prompt:\n{system_prompt}")
                logger.debug("-" * 80)
                logger.debug(f"User prompt:\n{user_prompt}")
                logger.debug("=" * 80)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å –º–æ–¥–µ–ª—å—é {selected_model}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º extra_headers –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
            extra_headers = {}
            if settings.http_referer:
                extra_headers["HTTP-Referer"] = settings.http_referer
            if settings.x_title:
                extra_headers["X-Title"] = settings.x_title
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            async def _call_openai():
                return await asyncio.to_thread(
                    client.chat.completions.create,
                    model=selected_model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.1,
                    response_format={"type": "json_object"},
                    extra_headers=extra_headers
                )
            
            try:
                response = await _call_openai()
            except openai.APIStatusError as e:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É 402 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                if e.status_code == 402:
                    error_message = e.message
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
                    if hasattr(e, 'response') and e.response:
                        try:
                            error_body = e.response.json()
                            if 'error' in error_body and 'message' in error_body['error']:
                                error_message = error_body['error']['message']
                        except:
                            pass
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è LLM: {error_message}")
                    raise LLMInsufficientCreditsError(
                        message=error_message,
                        provider="openai",
                        model=selected_model
                    )
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise
            
            logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API")
            
            content = response.choices[0].message.content
            
            # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if settings.llm_debug_log:
                logger.debug("=" * 80)
                logger.debug("[DEBUG] OpenAI RESPONSE - generate_protocol")
                logger.debug("=" * 80)
                if hasattr(response, 'usage'):
                    logger.debug(f"Usage: {response.usage}")
                finish_reason = response.choices[0].finish_reason
                logger.debug(f"Finish reason: {finish_reason}")
                logger.debug("-" * 80)
                logger.debug(f"Content:\n{content}")
                logger.debug("=" * 80)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI (–¥–ª–∏–Ω–∞: {len(content) if content else 0}): {content[:200] if content else 'None'}...")
            
            if not content or not content.strip():
                raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –Ω–∞–ø—Ä—è–º—É—é (–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏ response_format=json_object)
                return json.loads(content)
            except json.JSONDecodeError as e:
                # –ú—è–≥–∫–∏–π –ø–∞—Ä—Å–µ—Ä: –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ä–µ–∑–∞—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ —É Anthropic)
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞). –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
                start_idx = content.find('{')
                end_idx = content.rfind('}') + 1
                json_str = content[start_idx:end_idx] if start_idx != -1 and end_idx > start_idx else content
                try:
                    return json.loads(json_str)
                except json.JSONDecodeError as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI (–ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è): {e2}")
                    logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {content}")
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç OpenAI: {e2}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API: {e}")
            raise


class AnthropicProvider(LLMProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è Anthropic Claude"""
    
    def __init__(self):
        self.client = None
        if settings.anthropic_api_key:
            # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ SSL –∏ —Ç–∞–π–º–∞—É—Ç–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            import httpx
            http_client = httpx.Client(verify=settings.ssl_verify, timeout=settings.llm_timeout_seconds)
            self.client = Anthropic(
                api_key=settings.anthropic_api_key,
                http_client=http_client
            )
    
    def is_available(self) -> bool:
        return self.client is not None and settings.anthropic_api_key is not None
    
    async def generate_protocol(self, transcription: str, template_variables: Dict[str, str], diarization_data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è Anthropic Claude"""
        if not self.is_available():
            raise ValueError("Anthropic API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
        speaker_mapping = kwargs.get('speaker_mapping')
        meeting_topic = kwargs.get('meeting_topic')
        meeting_date = kwargs.get('meeting_date')
        meeting_time = kwargs.get('meeting_time')
        participants = kwargs.get('participants')

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç—ã
        system_prompt = _build_system_prompt()
        meeting_structure = kwargs.get('meeting_structure')
        prompt = _build_user_prompt(
            transcription,
            template_variables,
            diarization_data,
            speaker_mapping,
            meeting_topic,
            meeting_date,
            meeting_time,
            participants,
            meeting_structure
        )
        
        try:
            base_url = "Anthropic SDK"
            user_len = len(prompt)
            transcript_len = len(transcription)
            vars_count = len(template_variables)
            logger.info(
                f"Anthropic –∑–∞–ø—Ä–æ—Å: model=claude-3-haiku-20240307, base={base_url}, "
                f"vars={vars_count}, transcription_chars={transcript_len}, prompt_chars={user_len}"
            )
            _a_snippet = prompt[:400].replace("\n", " ")
            logger.debug(f"Anthropic prompt (—Ñ—Ä–∞–≥–º–µ–Ω—Ç 400): {_a_snippet}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º extra_headers –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
            extra_headers = {}
            if settings.http_referer:
                extra_headers["HTTP-Referer"] = settings.http_referer
            if settings.x_title:
                extra_headers["X-Title"] = settings.x_title
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ Anthropic –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            async def _call_anthropic():
                return await asyncio.to_thread(
                    self.client.messages.create,
                    model="claude-3-haiku-20240307",
                    max_tokens=2000,
                    temperature=0.1,
                    system=system_prompt,
                    messages=[
                        {"role": "user", "content": prompt}
                    ],
                    extra_headers=extra_headers
                )
            response = await _call_anthropic()
            
            content = response.content[0].text
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Anthropic (–¥–ª–∏–Ω–∞: {len(content) if content else 0}): {content[:200] if content else 'None'}...")
            
            if not content or not content.strip():
                raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Anthropic API")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            json_str = content[start_idx:end_idx] if start_idx != -1 and end_idx != 0 else content
            
            try:
                return json.loads(json_str)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç Anthropic: {e}")
                logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {content}")
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Anthropic: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Anthropic API: {e}")
            raise


class YandexGPTProvider(LLMProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è Yandex GPT"""
    
    def __init__(self):
        self.api_key = settings.yandex_api_key
        self.folder_id = settings.yandex_folder_id
    
    def is_available(self) -> bool:
        return self.api_key is not None and self.folder_id is not None
    
    async def generate_protocol(self, transcription: str, template_variables: Dict[str, str], diarization_data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è Yandex GPT"""
        if not self.is_available():
            raise ValueError("Yandex GPT API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
        speaker_mapping = kwargs.get('speaker_mapping')
        meeting_topic = kwargs.get('meeting_topic')
        meeting_date = kwargs.get('meeting_date')
        meeting_time = kwargs.get('meeting_time')
        participants = kwargs.get('participants')

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç—ã
        system_prompt = _build_system_prompt()
        meeting_structure = kwargs.get('meeting_structure')
        prompt = _build_user_prompt(
            transcription,
            template_variables,
            diarization_data,
            speaker_mapping,
            meeting_topic,
            meeting_date,
            meeting_time,
            participants,
            meeting_structure
        )
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if settings.http_referer:
            headers["Referer"] = settings.http_referer
        if settings.x_title:
            headers["X-Title"] = settings.x_title
        
        data = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.1,
                "maxTokens": 2000
            },
            "messages": [
                {
                    "role": "system",
                    "text": system_prompt
                },
                {
                    "role": "user", 
                    "text": prompt
                }
            ]
        }
        
        try:
            async with httpx.AsyncClient(verify=settings.ssl_verify) as client:
                response = await client.post(
                    "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                    headers=headers,
                    json=data,
                    timeout=settings.llm_timeout_seconds
                )
                response.raise_for_status()
                
                result = response.json()
                content = result["result"]["alternatives"][0]["message"]["text"]
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT (–¥–ª–∏–Ω–∞: {len(content) if content else 0}): {content[:200] if content else 'None'}...")
                
                if not content or not content.strip():
                    raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT API")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                start_idx = content.find('{')
                end_idx = content.rfind('}') + 1
                json_str = content[start_idx:end_idx] if start_idx != -1 and end_idx != 0 else content
                
                try:
                    return json.loads(json_str)
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT: {e}")
                    logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {content}")
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Yandex GPT: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Yandex GPT API: {e}")
            raise


class LLMManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.providers = {
            "openai": OpenAIProvider(),
            "anthropic": AnthropicProvider(),
            "yandex": YandexGPTProvider()
        }
    
    def get_available_providers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        available = {}
        provider_names = {
            "openai": "OpenAI GPT",
            "anthropic": "Anthropic Claude",
            "yandex": "Yandex GPT"
        }
        
        for key, provider in self.providers.items():
            if provider.is_available():
                available[key] = provider_names[key]
        
        return available
    
    async def generate_protocol(self, provider_name: str, transcription: str, 
                              template_variables: Dict[str, str], diarization_data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider_name not in self.providers:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
        
        provider = self.providers[provider_name]
        if not provider.is_available():
            raise ValueError(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, openai_model_key)
        return await provider.generate_protocol(transcription, template_variables, diarization_data, **kwargs)
    
    async def generate_protocol_with_fallback(self, preferred_provider: str, transcription: str, 
                                            template_variables: Dict[str, str], diarization_data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        available_providers = list(self.get_available_providers().keys())
        
        if not available_providers:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        providers_to_try = [preferred_provider] if preferred_provider in available_providers else []
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
        for provider in available_providers:
            if provider not in providers_to_try:
                providers_to_try.append(provider)
        
        last_error = None
        for provider_name in providers_to_try:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {provider_name}")
                result = await self.generate_protocol(provider_name, transcription, template_variables, diarization_data, **kwargs)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {provider_name}")
                return result
            except Exception as e:
                last_error = e
                logger.warning(f"–û—à–∏–±–∫–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {provider_name}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        raise ValueError(f"–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")


# ===================================================================
# –î–í–£–•–≠–¢–ê–ü–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–¢–û–ö–û–õ–ê
# ===================================================================

def _build_extraction_prompt(
    transcription: str,
    template_variables: Dict[str, str],
    diarization_data: Optional[Dict[str, Any]] = None,
    speaker_mapping: Optional[Dict[str, str]] = None,
    meeting_topic: Optional[str] = None,
    meeting_date: Optional[str] = None,
    meeting_time: Optional[str] = None,
    participants: Optional[List[Dict[str, str]]] = None,
    meeting_structure = None,  # MeetingStructure, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º circular import
) -> str:
    """
    –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    # –ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å —É—á—ë—Ç–æ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏)
    if diarization_data and diarization_data.get("formatted_transcript"):
        transcription_text = (
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –≥–æ–≤–æ—Ä—è—â–∏—Ö:\n"
            f"{diarization_data['formatted_transcript']}\n\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {diarization_data.get('total_speakers', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"- –°–ø–∏—Å–æ–∫ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {', '.join(diarization_data.get('speakers', []))}\n\n"
        )
    else:
        transcription_text = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcription}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
    participants_info = ""
    if speaker_mapping:
        participants_info = "\n–£–ß–ê–°–¢–ù–ò–ö–ò –í–°–¢–†–ï–ß–ò:\n"
        for speaker_id, participant_name in speaker_mapping.items():
            participants_info += f"- {speaker_id} = {participant_name}\n"
        participants_info += "\n‚ö†Ô∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –£–ß–ê–°–¢–ù–ò–ö–ê–ú:\n"
        participants_info += "- –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤\n"
        participants_info += "- –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∏—à–∏ –¢–û–õ–¨–ö–û –ò–ú–Ø (–±–µ–∑ —Ä–æ–ª–∏ –≤ —Å–∫–æ–±–∫–∞—Ö)\n"
        participants_info += "- –§–æ—Ä–º–∞—Ç: '–ó–∞–¥–∞—á–∞ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–º—è –§–∞–º–∏–ª–∏—è'\n\n"
        participants_info += "üìå –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ò–ú–ï–ù:\n"
        participants_info += "–ï—Å–ª–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî\n"
        participants_info += "—Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–π –∏—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ.\n\n"
        participants_info += "–ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏–∫–∏ (–ø—Ä–∏–º–µ–Ω—è–π –∫–æ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞):\n"
        participants_info += "   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π –∏ —Ç.–¥.\n"
        participants_info += "   ‚Ä¢ –ü–æ —Ñ–∞–º–∏–ª–∏–∏: –¢–∏–º—á–µ–Ω–∫–æ‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ –∏ —Ç.–¥.\n"
        participants_info += "   ‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è: –ê–ª–µ–∫—Å–µ–π‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ\n\n"
        participants_info += "‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã!\n"
        participants_info += "‚ö° –í –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–û–ï –ò–ú–Ø –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n"
    elif participants:
        # –ï—Å–ª–∏ –Ω–µ—Ç speaker_mapping, –Ω–æ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_info = "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        participants_info += "‚ïë  üéØ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í (–û–ë–Ø–ó–ê–¢–ï–õ–ï–ù –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ) ‚ïë\n"
        participants_info += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
        from src.services.participants_service import participants_service
        participants_info += participants_service.format_participants_for_llm(participants)
        participants_info += "\n\nüö® –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:\n"
        participants_info += "1. –¢–û–õ–¨–ö–û –∏–º–µ–Ω–∞ –ò–ó –°–ü–ò–°–ö–ê –í–´–®–ï! –§–æ—Ä–º–∞—Ç: '–ò–º—è –§–∞–º–∏–ª–∏—è'\n"
        participants_info += "2. –ó–ê–ü–†–ï–©–ï–ù–û: '–ö–æ–ª–ª–µ–≥–∞ –∏–∑ –û–†–¢', —Ç–æ–ª—å–∫–æ –∏–º—è ('–°–æ—Ñ—å—è'), —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è ('–í–∏–∫—É–ª–∏–Ω')\n"
        participants_info += "3. –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π:\n"
        participants_info += "   ‚Ä¢ '–°–≤–µ—Ç–∞'/'–°–≤–µ—Ç–æ—á–∫–∞' ‚Üí –Ω–∞–π–¥–∏ '–°–≤–µ—Ç–ª–∞–Ω–∞' ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–õ–µ—à–∞'/'–ê–ª—ë—à–∞' ‚Üí –Ω–∞–π–¥–∏ '–ê–ª–µ–∫—Å–µ–π' ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ –§–∞–º–∏–ª–∏—è ('–í–∏–∫—É–ª–∏–Ω') ‚Üí –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π '–ò–º—è –§–∞–º–∏–ª–∏—è'\n"
        participants_info += "   ‚Ä¢ –ò–º—è ('–ú–∞—Ä–∞—Ç') ‚Üí –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π '–ò–º—è –§–∞–º–∏–ª–∏—è'\n"
        participants_info += "4. –ï—Å–ª–∏ –ù–ï –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - –ù–ï –≤–∫–ª—é—á–∞–π\n\n"
        participants_info += "‚ö° –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û–ï –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!\n\n"
    else:
        # –ù–µ—Ç –Ω–∏ speaker_mapping, –Ω–∏ participants - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        participants_info = "\n‚öôÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ò–ó –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        participants_info += "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û–ø—Ä–µ–¥–µ–ª–∏ –∏–º–µ–Ω–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
        participants_info += "üìã –ü–†–ê–í–ò–õ–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:\n\n"
        participants_info += "1Ô∏è‚É£ –ò–©–ò –Ø–í–ù–´–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', '–Ø ‚Äî –ú–∞—Ä–∏—è'\n"
        participants_info += "   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è: '–°–≤–µ—Ç–∞, –∫–∞–∫ –¥—É–º–∞–µ—à—å?', '–ü–µ—Ç—Ä–æ–≤, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∑–∞–¥–∞—á–µ'\n"
        participants_info += "   ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: '–ö–∞–∫ —Å–∫–∞–∑–∞–ª –ò–≤–∞–Ω...', '–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –ú–∞—Ä–∏–∏'\n\n"
        participants_info += "2Ô∏è‚É£ –§–û–†–ú–ê–¢ –ò–ú–ï–ù:\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: '–ò–º—è –§–∞–º–∏–ª–∏—è' (–ë–ï–ó –æ—Ç—á–µ—Å—Ç–≤–∞)\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è: '–ò–≤–∞–Ω'\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è: '–ü–µ—Ç—Ä–æ–≤'\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π, –í–æ–ª–æ–¥—è‚Üí–í–ª–∞–¥–∏–º–∏—Ä\n\n"
        participants_info += "3Ô∏è‚É£ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –°–û –°–ü–ò–ö–ï–†–ê–ú–ò:\n"
        participants_info += "   ‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤—å –∫–∞–∂–¥—É—é –º–µ—Ç–∫—É (SPEAKER_1, SPEAKER_2...) —Å –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–º—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ù–ï–í–û–ó–ú–û–ñ–ù–û - –æ—Å—Ç–∞–≤—å –º–µ—Ç–∫—É —Å–ø–∏–∫–µ—Ä–∞ –∫–∞–∫ –µ—Å—Ç—å\n"
        participants_info += "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\\n–°–ü–ï–ê–ö–ïR_2\\n–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞\\n–°–ü–ï–ê–ö–ïR_4'\n\n"
        participants_info += "4Ô∏è‚É£ –°–¢–†–û–ì–ò–ï –ó–ê–ü–†–ï–¢–´:\n"
        participants_info += "   ‚ùå –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        participants_info += "   ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π '–£—á–∞—Å—Ç–Ω–∏–∫ 1', '–ö–æ–ª–ª–µ–≥–∞', '–ß–µ–ª–æ–≤–µ–∫ –ê', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'\n"
        participants_info += "   ‚ùå –ù–ï –¥—É–±–ª–∏—Ä—É–π: –µ—Å–ª–∏ –°–≤–µ—Ç–∞ = SPEAKER_1, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –°–≤–µ—Ç–ª–∞–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ\n"
        participants_info += "   ‚ùå –ù–ï –∑–∞–º–µ–Ω—è–π SPEAKER_N –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏'\n\n"
        participants_info += "üí° –ü–û–î–°–ö–ê–ó–ö–ò:\n"
        participants_info += "   ‚Ä¢ –ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏ - —á–∞—Å—Ç–æ —Ç–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è\n"
        participants_info += "   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫\n"
        participants_info += "   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: '–Ω–∞—à —Ç–∏–º–ª–∏–¥ –ê–ª–µ–∫—Å–µ–π', '–º–µ–Ω–µ–¥–∂–µ—Ä –ú–∞—Ä–∏—è'\n"
        participants_info += "   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ç? ‚Üí –û—Å—Ç–∞–≤—å SPEAKER_N\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
    meeting_info = ""
    if meeting_topic or meeting_date or meeting_time:
        meeting_info = "\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–°–¢–†–ï–ß–ï:\n"
        if meeting_topic:
            meeting_info += f"- –¢–µ–º–∞: {meeting_topic}\n"
        if meeting_date:
            meeting_info += f"- –î–∞—Ç–∞: {meeting_date}\n"
        if meeting_time:
            meeting_info += f"- –í—Ä–µ–º—è: {meeting_time}\n"
        meeting_info += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    structure_info = ""
    if meeting_structure:
        structure_text = meeting_structure.format_for_llm_prompt()
        if structure_text:
            structure_info = structure_text
    
    variables_str = "\n".join([f"- {key}: {desc}" for key, desc in template_variables.items()])
    
    prompt = f"""–≠–¢–ê–ü 1: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò

{transcription_text}{structure_info}{participants_info}{meeting_info}

–ó–ê–î–ê–ß–ê:
–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π:
{variables_str}

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–°–£–ñ–î–ï–ù–ò–Ø:
–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—à—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º/–∫–ª–∞—Å—Ç–µ—Ä–∞–º:
- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–æ "–ö–ª–∞—Å—Ç–µ—Ä", —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º: "‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã**"
- –ö–∞–∂–¥—É—é –∏–¥–µ—é/–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ/–ø–æ–∑–∏—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
- –§–æ—Ä–º–∞—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è: "–ò–º—è –ê–≤—Ç–æ—Ä–∞: —Ç–µ–∫—Å—Ç" (–±–µ–∑ —Å–ª–æ–≤–∞ "–ò–¥–µ—è", –±–µ–∑ —Å–∫–æ–±–æ–∫)
- –ú–µ–∂–¥—É —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ **–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã**

–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ: –ø—Ä–µ–¥–ª–æ–∂–∏–ª –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã

–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞: –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∞ –∏–¥–µ—é

‚úó –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä ¬´–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã¬ª: –ò–¥–µ—è (–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ): –ø—Ä–µ–¥–ª–æ–∂–∏–ª...

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —è–≤–Ω–æ - –ø–∏—à–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
3. –°–æ—Ö—Ä–∞–Ω—è–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
4. –ù–ï –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∏ –ù–ï –¥–æ–±–∞–≤–ª—è–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã
5. –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: "- –ø—É–Ω–∫—Ç1\\n- –ø—É–Ω–∫—Ç2"
6. –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ \\n, –ë–ï–ó —Ä–æ–ª–µ–π!

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–†–û–°–¢–´–ú–ò –°–¢–†–û–ö–ê–ú–ò (string)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã {{}} –∏–ª–∏ –º–∞—Å—Å–∏–≤—ã [] –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π
- –î–∞—Ç—ã: "20 –æ–∫—Ç—è–±—Ä—è 2024", –ù–ï {{"day": 20, "month": "–æ–∫—Ç—è–±—Ä—å"}}
- –£—á–∞—Å—Ç–Ω–∏–∫–∏: "–ò–º—è1\\n–ò–º—è2\\n–ò–º—è3", –ù–ï [{{"name": "–ò–º—è"}}], –ù–ï "–ò–º—è, —Ä–æ–ª—å; –ò–º—è2"
- –°–ø–∏—Å–∫–∏: "- —ç–ª–µ–º–µ–Ω—Ç1\\n- —ç–ª–µ–º–µ–Ω—Ç2", –ù–ï ["—ç–ª–µ–º–µ–Ω—Ç1", "—ç–ª–µ–º–µ–Ω—Ç2"]

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û JSON:
{{
  "date": "20 –æ–∫—Ç—è–±—Ä—è 2024",
  "participants": "–û–∫—Å–∞–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\\n–ì–∞–ª–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞\\n–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤",
  "decisions": "- –†–µ—à–µ–Ω–∏–µ 1\\n- –†–µ—à–µ–Ω–∏–µ 2"
}}

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
–í–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π –≤—ã—à–µ.
–ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞ (UTF-8).

–í—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

    return prompt


def _build_reflection_prompt(
    extracted_data: Dict[str, Any],
    transcription: str,
    template_variables: Dict[str, str],
    diarization_analysis: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
    """
    extracted_json = json.dumps(extracted_data, ensure_ascii=False, indent=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    diarization_context = ""
    if diarization_analysis:
        speakers_info = diarization_analysis.get('speakers', {})
        if speakers_info:
            diarization_context = "\n\n–ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í:\n"
            for speaker_id, info in speakers_info.items():
                role = info.get('role', '—É—á–∞—Å—Ç–Ω–∏–∫')
                time_percent = info.get('speaking_time_percent', 0)
                diarization_context += f"- {speaker_id} ({role}): {time_percent:.1f}% –≤—Ä–µ–º–µ–Ω–∏\n"
    
    prompt = f"""–≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –ò –£–õ–£–ß–®–ï–ù–ò–ï

–ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï (—ç—Ç–∞–ø 1):
{extracted_json}
{diarization_context}

–ò–°–•–û–î–ù–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø:
{transcription}


–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–≤–µ—Ä—å –∏ —É–ª—É—á—à–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é:

1. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´:
   - –í—Å–µ –ª–∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç—Ä–∞–∂–µ–Ω—ã?
   - –ù–µ—Ç –ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º?
   - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—è?

2. –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò:
   - –í—Å–µ –ª–∏ —Ñ–∞–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏?
   - –ù–µ—Ç –ª–∏ –¥–æ–º—ã—Å–ª–æ–≤ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π?
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ª–∏ –∏–º–µ–Ω–∞ –∏ —Ç–µ—Ä–º–∏–Ω—ã?

3. –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –î–ò–ê–†–ò–ó–ê–¶–ò–ò:
   - –£–∫–∞–∑–∞–Ω—ã –ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞ –∑–∞–¥–∞—á–∏ –∏–∑ —á–∏—Å–ª–∞ —Å–ø–∏–∫–µ—Ä–æ–≤?
   - –û—Ç—Ä–∞–∂–µ–Ω –ª–∏ –≤–∫–ª–∞–¥ —Ä–∞–∑–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö —Å–ø–∏–∫–µ—Ä–æ–≤?

4. –°–¢–†–£–ö–¢–£–†–ê:
   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å–ø–∏—Å–∫–∏ (—Å –¥–µ—Ñ–∏—Å–∞–º–∏)?
   - –ù–µ—Ç –ª–∏ –ª–∏—à–Ω–µ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏?
   - –õ–æ–≥–∏—á–µ–Ω –ª–∏ –ø–æ—Ä—è–¥–æ–∫ –ø—É–Ω–∫—Ç–æ–≤?

5. –ü–†–û–í–ï–†–ö–ê –£–ß–ê–°–¢–ù–ò–ö–û–í –ò –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–•:
   - –£–∫–∞–∑–∞–Ω—ã –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤?
   - –í –∑–∞–¥–∞—á–∞—Ö –∏ —Ä–µ—à–µ–Ω–∏—è—Ö –∏–º–µ–Ω–∞ –ë–ï–ó —Ä–æ–ª–µ–π –≤ —Å–∫–æ–±–∫–∞—Ö?
   - –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ —Å–º—ã—Å–ª—É –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π?
   - –§–æ—Ä–º–∞—Ç: '–ó–∞–¥–∞—á–∞ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–º—è –§–∞–º–∏–ª–∏—è' (–ù–ï '–ò–º—è –§–∞–º–∏–ª–∏—è (—Ä–æ–ª—å)')

6. –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ò–ú–ï–ù:
   - –í—Å–µ –ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ/—É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø–æ–ª–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?
   - –í—Å–µ –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞?
   - –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–æ–ª—å–∫–æ –∏–º—è, –∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø–æ–ª–Ω–æ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø–æ–ª–Ω–æ–µ?
   - –ü—Ä–æ–≤–µ—Ä—å –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã!

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:
- –ï—Å–ª–∏ –Ω–∞—à–µ–ª –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –¥–æ–±–∞–≤—å –µ—ë
- –ï—Å–ª–∏ –Ω–∞—à–µ–ª –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å - –∏—Å–ø—Ä–∞–≤—å –µ—ë
- –ï—Å–ª–∏ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É - —É–ª—É—á—à–∏
- –ï—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ–±–∞–≤—å
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ä–æ–ª—å –≤ —Å–∫–æ–±–∫–∞—Ö —É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ - –£–ë–ï–†–ò –µ—ë (–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –∏–º—è)
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –ù–ï–¢ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
–í–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç —Å —Ç–µ–º–∏ –∂–µ –∫–ª—é—á–∞–º–∏, –Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
–í—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

    return prompt


async def generate_protocol_two_stage(
    manager: 'LLMManager',
    provider_name: str,
    transcription: str,
    template_variables: Dict[str, str],
    diarization_data: Optional[Dict[str, Any]] = None,
    diarization_analysis: Optional[Dict[str, Any]] = None,
    meeting_structure = None,  # MeetingStructure
    **kwargs
) -> Dict[str, Any]:
    """
    –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ + —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
    
    Args:
        manager: –ú–µ–Ω–µ–¥–∂–µ—Ä LLM
        provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        transcription: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        template_variables: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        diarization_analysis: –ê–Ω–∞–ª–∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    """
    logger.info("–ù–∞—á–∞–ª–æ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
    speaker_mapping = kwargs.get('speaker_mapping')
    meeting_topic = kwargs.get('meeting_topic')
    meeting_date = kwargs.get('meeting_date')
    meeting_time = kwargs.get('meeting_time')
    participants = kwargs.get('participants')

    # –≠–¢–ê–ü 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    logger.info("–≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    extraction_prompt = _build_extraction_prompt(
        transcription,
        template_variables,
        diarization_data,
        speaker_mapping,
        meeting_topic,
        meeting_date,
        meeting_time,
        participants,
        meeting_structure
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—Å —É—á–µ—Ç–æ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    system_prompt = _build_system_prompt(transcription, diarization_analysis)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if provider_name == "openai":
        provider = manager.providers[provider_name]
        openai_model_key = kwargs.get("openai_model_key")
        
        # –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        selected_model = settings.openai_model
        selected_base_url = settings.openai_base_url or "https://api.openai.com/v1"
        
        if openai_model_key:
            try:
                preset = next((p for p in settings.openai_models if p.key == openai_model_key), None)
                if preset:
                    selected_model = preset.model
                    if getattr(preset, 'base_url', None):
                        selected_base_url = preset.base_url
            except Exception:
                pass
        
        # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ base_url
        client = provider.client
        if client is None or (selected_base_url and getattr(client, 'base_url', None) != selected_base_url):
            client = openai.OpenAI(
                api_key=settings.openai_api_key,
                base_url=selected_base_url,
                http_client=provider.http_client
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º extra_headers –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
        extra_headers = {}
        if settings.http_referer:
            extra_headers["HTTP-Referer"] = settings.http_referer
        if settings.x_title:
            extra_headers["X-Title"] = settings.x_title
        
        # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —ç—Ç–∞–ø–∞ 1
        if settings.llm_debug_log:
            logger.debug("=" * 80)
            logger.debug("[DEBUG] OpenAI REQUEST - Two-Stage Extraction (Stage 1)")
            logger.debug("=" * 80)
            logger.debug(f"Model: {selected_model}")
            logger.debug(f"System prompt:\n{system_prompt}")
            logger.debug("-" * 80)
            logger.debug(f"Extraction prompt:\n{extraction_prompt}")
            logger.debug("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
        async def _call_openai_stage1():
            return await asyncio.to_thread(
                client.chat.completions.create,
                model=selected_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": extraction_prompt}
                ],
                temperature=0.1,
                response_format={"type": "json_object"},
                extra_headers=extra_headers
            )
        
        try:
            response1 = await _call_openai_stage1()
        except openai.APIStatusError as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É 402 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
            if e.status_code == 402:
                error_message = e.message
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
                if hasattr(e, 'response') and e.response:
                    try:
                        error_body = e.response.json()
                        if 'error' in error_body and 'message' in error_body['error']:
                            error_message = error_body['error']['message']
                    except:
                        pass
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è LLM (—ç—Ç–∞–ø 1): {error_message}")
                raise LLMInsufficientCreditsError(
                    message=error_message,
                    provider="openai",
                    model=selected_model
                )
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise
        
        content1 = response1.choices[0].message.content
        
        # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —ç—Ç–∞–ø–∞ 1
        if settings.llm_debug_log:
            logger.debug("=" * 80)
            logger.debug("[DEBUG] OpenAI RESPONSE - Two-Stage Extraction (Stage 1)")
            logger.debug("=" * 80)
            if hasattr(response1, 'usage'):
                logger.debug(f"Usage: {response1.usage}")
            logger.debug(f"Content:\n{content1}")
            logger.debug("=" * 80)
        
        try:
            extracted_data = json.loads(content1)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ —ç—Ç–∞–ø–µ 1: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
            start_idx = content1.find('{')
            end_idx = content1.rfind('}') + 1
            json_str = content1[start_idx:end_idx] if start_idx != -1 and end_idx > start_idx else content1
            extracted_data = json.loads(json_str)
        
        logger.info(f"–≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_data)} –ø–æ–ª–µ–π")
        
        # –≠–¢–ê–ü 2: –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ
        logger.info("–≠—Ç–∞–ø 2: –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ")
        reflection_prompt = _build_reflection_prompt(
            extracted_data, transcription, template_variables, diarization_analysis
        )
        
        # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —ç—Ç–∞–ø–∞ 2
        if settings.llm_debug_log:
            logger.debug("=" * 80)
            logger.debug("[DEBUG] OpenAI REQUEST - Two-Stage Reflection (Stage 2)")
            logger.debug("=" * 80)
            logger.debug(f"Reflection prompt:\n{reflection_prompt}")
            logger.debug("=" * 80)
        
        async def _call_openai_stage2():
            return await asyncio.to_thread(
                client.chat.completions.create,
                model=selected_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": reflection_prompt}
                ],
                temperature=0.1,
                response_format={"type": "json_object"},
                extra_headers=extra_headers
            )
        
        try:
            response2 = await _call_openai_stage2()
        except openai.APIStatusError as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É 402 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
            if e.status_code == 402:
                error_message = e.message
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
                if hasattr(e, 'response') and e.response:
                    try:
                        error_body = e.response.json()
                        if 'error' in error_body and 'message' in error_body['error']:
                            error_message = error_body['error']['message']
                    except:
                        pass
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è LLM (—ç—Ç–∞–ø 2): {error_message}")
                raise LLMInsufficientCreditsError(
                    message=error_message,
                    provider="openai",
                    model=selected_model
                )
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise
        
        content2 = response2.choices[0].message.content
        finish_reason = response2.choices[0].finish_reason
        
        # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —ç—Ç–∞–ø–∞ 2
        if settings.llm_debug_log:
            logger.debug("=" * 80)
            logger.debug("[DEBUG] OpenAI RESPONSE - Two-Stage Reflection (Stage 2)")
            logger.debug("=" * 80)
            if hasattr(response2, 'usage'):
                logger.debug(f"Usage: {response2.usage}")
            logger.debug(f"Finish reason: {response2.choices[0].finish_reason}")
            logger.debug(f"Content:\n{content2}")
            logger.debug("=" * 80)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"–≠—Ç–∞–ø 2: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(content2) if content2 else 0} —Å–∏–º–≤–æ–ª–æ–≤, finish_reason={finish_reason}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not content2 or not content2.strip():
            logger.warning(f"–≠—Ç–∞–ø 2: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1")
            logger.debug(f"Response details: finish_reason={finish_reason}, model={selected_model}")
            return extracted_data
        
        try:
            improved_data = json.loads(content2)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ —ç—Ç–∞–ø–µ 2: {e}")
            logger.error(f"Content preview (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {content2[:500]}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
            start_idx = content2.find('{')
            end_idx = content2.rfind('}') + 1
            
            if start_idx != -1 and end_idx > start_idx:
                json_str = content2[start_idx:end_idx]
                try:
                    improved_data = json.loads(json_str)
                    logger.info("JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                except json.JSONDecodeError as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON: {e2}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1")
                    return extracted_data
            else:
                logger.error("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1")
                return extracted_data
        
        logger.info(f"–≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return improved_data
    
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        logger.warning(f"–î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è {provider_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
        return await manager.generate_protocol(
            provider_name, transcription, template_variables, diarization_data, **kwargs
        )


# ===================================================================
# CHAIN-OF-THOUGHT –î–õ–Ø –î–õ–ò–ù–ù–´–• –í–°–¢–†–ï–ß
# ===================================================================

def _build_segment_analysis_prompt(
    segment_text: str,
    segment_id: int,
    total_segments: int,
    template_variables: Dict[str, str],
    speaker_mapping: Optional[Dict[str, str]] = None,
    participants: Optional[List[Dict[str, str]]] = None
) -> str:
    """
    –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    """
    variables_str = "\n".join([f"- {key}: {desc}" for key, desc in template_variables.items()])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    participants_info = ""
    if speaker_mapping:
        participants_info = "\n" + "‚ïê" * 63 + "\n"
        participants_info += "–£–ß–ê–°–¢–ù–ò–ö–ò –í–°–¢–†–ï–ß–ò (–° –†–û–õ–Ø–ú–ò)\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        participants_info += "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—è—â–∏—Ö —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:\n"
        for speaker_id, participant_name in speaker_mapping.items():
            participants_info += f"- {speaker_id} = {participant_name}\n"
        participants_info += "\n"
        participants_info += "‚ö†Ô∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –†–ê–ë–û–¢–ï –° –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò:\n"
        participants_info += "1. –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤ (SPEAKER_1 ‚Üí –ò–º—è)\n"
        participants_info += "2. –ü—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        participants_info += "3. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: –¢–û–õ–¨–ö–û –ò–ú–Ø, –±–µ–∑ —Ä–æ–ª–∏ –≤ —Å–∫–æ–±–∫–∞—Ö\n"
        participants_info += "   ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'\n"
        participants_info += "   ‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (–ú–µ–Ω–µ–¥–∂–µ—Ä)'\n"
        participants_info += "üìå –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ò–ú–ï–ù:\n"
        participants_info += "–í —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ/—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω.\n"
        participants_info += "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–π –∏—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ:\n\n"
        participants_info += "–ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ–Ω—è–π –∫–æ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º):\n"
        participants_info += "   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π, –°–∞—à–∞‚Üí–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –∏ —Ç.–¥.\n"
        participants_info += "   ‚Ä¢ –ü–æ —Ñ–∞–º–∏–ª–∏–∏: –¢–∏–º—á–µ–Ω–∫–æ‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ, –ö–æ—Ä–æ—Ç–∫–æ–≤–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞ –∏ —Ç.–¥.\n"
        participants_info += "   ‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è: –ê–ª–µ–∫—Å–µ–π‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ (–µ—Å–ª–∏ –æ–¥–∏–Ω —Ç–∞–∫–æ–π –≤ —Å–ø–∏—Å–∫–µ)\n\n"
        participants_info += "   ‚ö° –ù–ï –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è –ø—Ä–∏–º–µ—Ä–∞–º–∏! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ.\n"
        participants_info += "   ‚ö° –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–û–ï –ò–ú–Ø –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n\n"
    elif participants:
        # –ï—Å–ª–∏ –Ω–µ—Ç speaker_mapping, –Ω–æ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        participants_info = "\n" + "‚ïê" * 63 + "\n"
        participants_info += "üéØ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í –í–°–¢–†–ï–ß–ò (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ)\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        from src.services.participants_service import participants_service
        participants_info += participants_service.format_participants_for_llm(participants)
        participants_info += "\n\n"
        participants_info += "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        participants_info += "‚ïë  üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø     ‚ïë\n"
        participants_info += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        participants_info += "1Ô∏è‚É£ –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –ò–ú–ï–ù–ê –ò–ó –°–ü–ò–°–ö–ê –í–´–®–ï!\n"
        participants_info += "   –ó–ê–ü–†–ï–©–ï–ù–û –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ!\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–ö–æ–ª–ª–µ–≥–∞ –∏–∑ –û–†–¢', '–ö–æ–ª–ª–µ–≥–∏ –∏–∑ ERP', '–ö–æ–º–∞–Ω–¥–∞'\n"
        participants_info += "   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        participants_info += "2Ô∏è‚É£ –§–û–†–ú–ê–¢ –ò–ú–ï–ù: '–ò–º—è –§–∞–º–∏–ª–∏—è' (–ë–ï–ó –æ—Ç—á–µ—Å—Ç–≤–∞)!\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–°–æ—Ñ—å—è' (—Ç–æ–ª—å–∫–æ –∏–º—è)\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–í–∏–∫—É–ª–∏–Ω' (—Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è)\n"
        participants_info += "   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–û—Å–∏–ø–æ–≤–∞ –°–æ—Ñ—å—è –Æ—Ä—å–µ–≤–Ω–∞' (—Å –æ—Ç—á–µ—Å—Ç–≤–æ–º)\n"
        participants_info += "   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–°–æ—Ñ—å—è –û—Å–∏–ø–æ–≤–∞', '–ì–∞–ª–∏–Ω–∞ –Ø–º–∫–∏–Ω–∞', '–í–ª–∞–¥–∏–º–∏—Ä –ì–æ–ª–∏–∫–æ–≤'\n\n"
        participants_info += "3Ô∏è‚É£ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –°–û–ö–†–ê–©–ï–ù–ù–´–• –ò–ú–ï–ù:\n"
        participants_info += "   –í —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏.\n"
        participants_info += "   –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ –ü–û–õ–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n"
        participants_info += "   üìã –ü–†–ê–í–ò–õ–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:\n"
        participants_info += "   ‚Ä¢ '–°–≤–µ—Ç–∞', '–°–≤–µ—Ç–æ—á–∫–∞' ‚Üí –Ω–∞–π–¥–∏ '–°–≤–µ—Ç–ª–∞–Ω–∞' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–õ–µ—à–∞', '–ê–ª—ë—à–∞' ‚Üí –Ω–∞–π–¥–∏ '–ê–ª–µ–∫—Å–µ–π' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–ì–∞–ª—è' ‚Üí –Ω–∞–π–¥–∏ '–ì–∞–ª–∏–Ω–∞' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–í–æ–ª–æ–¥—å', '–í–æ–≤–∞' ‚Üí –Ω–∞–π–¥–∏ '–í–ª–∞–¥–∏–º–∏—Ä' –≤ —Å–ø–∏—Å–∫–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        participants_info += "   ‚Ä¢ '–°—Ç–∞—Å' ‚Üí –Ω–∞–π–¥–∏ '–°—Ç–∞–Ω–∏—Å–ª–∞–≤' –∏–ª–∏ '–°–≤—è—Ç–æ—Å–ª–∞–≤' –≤ —Å–ø–∏—Å–∫–µ\n"
        participants_info += "   ‚Ä¢ '–í–∏–∫—É–ª–∏–Ω', '–¢–∏–º—á–µ–Ω–∫–æ' (—Ñ–∞–º–∏–ª–∏—è) ‚Üí –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Ñ–∞–º–∏–ª–∏–∏\n"
        participants_info += "   ‚Ä¢ '–ú–∞—Ä–∞—Ç' (–∏–º—è) ‚Üí –Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ –∏–º–µ–Ω–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ –∏–º—è\n\n"
        participants_info += "4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –î–û–ë–ê–í–õ–ï–ù–ò–ï–ú –í –ü–†–û–¢–û–ö–û–õ:\n"
        participants_info += "   –î–ª—è –ö–ê–ñ–î–û–ì–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n"
        participants_info += "   ‚úì –ù–∞–π–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ\n"
        participants_info += "   ‚úì –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û–ï –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è)\n"
        participants_info += "   ‚úì –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - –ù–ï –≤–∫–ª—é—á–∞–π –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª\n\n"
        participants_info += "‚ö° –í–ê–ñ–ù–û: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ!\n"
        participants_info += "‚ö° –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞!\n"
        participants_info += "‚ö° –ü—Ä–∏ –º–∞–ª–µ–π—à–µ–º —Å–æ–º–Ω–µ–Ω–∏–∏ - —Å–æ–ø–æ—Å—Ç–∞–≤—å —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º!\n\n"
    else:
        # –ù–µ—Ç –Ω–∏ speaker_mapping, –Ω–∏ participants - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        participants_info = "\n" + "‚ïê" * 63 + "\n"
        participants_info += "‚öôÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ò–ó –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò\n"
        participants_info += "‚ïê" * 63 + "\n\n"
        participants_info += "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û–ø—Ä–µ–¥–µ–ª–∏ –∏–º–µ–Ω–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
        participants_info += "üìã –ü–†–ê–í–ò–õ–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:\n\n"
        participants_info += "1Ô∏è‚É£ –ò–©–ò –Ø–í–ù–´–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', '–Ø ‚Äî –ú–∞—Ä–∏—è'\n"
        participants_info += "   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è: '–°–≤–µ—Ç–∞, –∫–∞–∫ –¥—É–º–∞–µ—à—å?', '–ü–µ—Ç—Ä–æ–≤, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∑–∞–¥–∞—á–µ'\n"
        participants_info += "   ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: '–ö–∞–∫ —Å–∫–∞–∑–∞–ª –ò–≤–∞–Ω...', '–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –ú–∞—Ä–∏–∏'\n\n"
        participants_info += "2Ô∏è‚É£ –§–û–†–ú–ê–¢ –ò–ú–ï–ù:\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: '–ò–º—è –§–∞–º–∏–ª–∏—è' (–ë–ï–ó –æ—Ç—á–µ—Å—Ç–≤–∞)\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è: '–ò–≤–∞–Ω'\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è: '–ü–µ—Ç—Ä–æ–≤'\n"
        participants_info += "   ‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π, –í–æ–ª–æ–¥—è‚Üí–í–ª–∞–¥–∏–º–∏—Ä\n\n"
        participants_info += "3Ô∏è‚É£ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –°–û –°–ü–ò–ö–ï–†–ê–ú–ò:\n"
        participants_info += "   ‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤—å –∫–∞–∂–¥—É—é –º–µ—Ç–∫—É (SPEAKER_1, SPEAKER_2...) —Å –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n"
        participants_info += "   ‚Ä¢ –ï—Å–ª–∏ –∏–º—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ù–ï–í–û–ó–ú–û–ñ–ù–û - –æ—Å—Ç–∞–≤—å –º–µ—Ç–∫—É —Å–ø–∏–∫–µ—Ä–∞ –∫–∞–∫ –µ—Å—Ç—å\n"
        participants_info += "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\\n–°–ü–ï–ê–ö–ïR_2\\n–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞\\n–°–ü–ï–ê–ö–ïR_4'\n\n"
        participants_info += "4Ô∏è‚É£ –°–¢–†–û–ì–ò–ï –ó–ê–ü–†–ï–¢–´:\n"
        participants_info += "   ‚ùå –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        participants_info += "   ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π '–£—á–∞—Å—Ç–Ω–∏–∫ 1', '–ö–æ–ª–ª–µ–≥–∞', '–ß–µ–ª–æ–≤–µ–∫ –ê', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'\n"
        participants_info += "   ‚ùå –ù–ï –¥—É–±–ª–∏—Ä—É–π: –µ—Å–ª–∏ –°–≤–µ—Ç–∞ = SPEAKER_1, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –°–≤–µ—Ç–ª–∞–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ\n"
        participants_info += "   ‚ùå –ù–ï –∑–∞–º–µ–Ω—è–π SPEAKER_N –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏'\n\n"
        participants_info += "üí° –ü–û–î–°–ö–ê–ó–ö–ò:\n"
        participants_info += "   ‚Ä¢ –ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏ - —á–∞—Å—Ç–æ —Ç–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è\n"
        participants_info += "   ‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫\n"
        participants_info += "   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: '–Ω–∞—à —Ç–∏–º–ª–∏–¥ –ê–ª–µ–∫—Å–µ–π', '–º–µ–Ω–µ–¥–∂–µ—Ä –ú–∞—Ä–∏—è'\n"
        participants_info += "   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ç? ‚Üí –û—Å—Ç–∞–≤—å SPEAKER_N\n\n"
    
    prompt = f"""CHAIN-OF-THOUGHT: –ê–ù–ê–õ–ò–ó –°–ï–ì–ú–ï–ù–¢–ê {segment_id + 1} –ò–ó {total_segments}

–°–ï–ì–ú–ï–ù–¢ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:
{segment_text}
{participants_info}
–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
{variables_str}

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–°–£–ñ–î–ï–ù–ò–Ø:
–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—à—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º/–∫–ª–∞—Å—Ç–µ—Ä–∞–º:
- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–æ "–ö–ª–∞—Å—Ç–µ—Ä", —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º: "‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã**"
- –ö–∞–∂–¥—É—é –∏–¥–µ—é/–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ/–ø–æ–∑–∏—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
- –§–æ—Ä–º–∞—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è: "–ò–º—è –ê–≤—Ç–æ—Ä–∞: —Ç–µ–∫—Å—Ç" (–±–µ–∑ —Å–ª–æ–≤–∞ "–ò–¥–µ—è", –±–µ–∑ —Å–∫–æ–±–æ–∫)
- –ú–µ–∂–¥—É —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è**

–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ: –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

‚úó –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è¬ª: –ò–¥–µ—è (–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ): –ø—Ä–µ–¥–ª–æ–∂–∏–ª...

–í–ê–ñ–ù–û:
- –≠—Ç–æ —Å–µ–≥–º–µ–Ω—Ç {segment_id + 1} –∏–∑ {total_segments} —á–∞—Å—Ç–µ–π –≤—Å—Ç—Ä–µ—á–∏
- –ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≠–¢–û–ì–û —Å–µ–≥–º–µ–Ω—Ç–∞
- –ï—Å–ª–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∫–æ–π-—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–∏—à–∏ "–ù–µ—Ç –≤ —ç—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ"
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —ç—Ç–æ —á–∞—Å—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: "- –ø—É–Ω–∫—Ç1\\n- –ø—É–Ω–∫—Ç2"

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã—à–µ.
–ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞.

–í—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

    return prompt


def _build_synthesis_prompt(
    segment_results: List[Dict[str, Any]],
    transcription: str,
    template_variables: Dict[str, str],
    diarization_analysis: Optional[Dict[str, Any]] = None,
    participants: Optional[List[Dict[str, str]]] = None
) -> str:
    """
    –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    segments_summary = ""
    for i, result in enumerate(segment_results):
        segments_summary += f"\n--- –°–ï–ì–ú–ï–ù–¢ {i + 1} ---\n"
        segments_summary += json.dumps(result, ensure_ascii=False, indent=2)
        segments_summary += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    diarization_context = ""
    if diarization_analysis:
        speakers_info = diarization_analysis.get('speakers', {})
        if speakers_info:
            diarization_context = "\n\n–ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í –í–°–¢–†–ï–ß–ò:\n"
            for speaker_id, info in speakers_info.items():
                role = info.get('role', '—É—á–∞—Å—Ç–Ω–∏–∫')
                time_percent = info.get('speaking_time_percent', 0)
                diarization_context += f"- {speaker_id} ({role}): {time_percent:.1f}% –≤—Ä–µ–º–µ–Ω–∏\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    participants_context = ""
    if participants:
        participants_context = "\n\n–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í:\n"
        from src.services.participants_service import participants_service
        participants_context += participants_service.format_participants_for_llm(participants)
        participants_context += "\n"
    
    variables_str = "\n".join([f"- {key}: {desc}" for key, desc in template_variables.items()])
    
    prompt = f"""CHAIN-OF-THOUGHT: –°–ò–ù–¢–ï–ó –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–ï–ì–ú–ï–ù–¢–û–í:
{segments_summary}
{diarization_context}
{participants_context}

–ó–ê–î–ê–ß–ê:
–û–±—ä–µ–¥–∏–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π —Å–≤—è–∑–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
{variables_str}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–ò–ù–¢–ï–ó–£:
1. –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –°–æ–±–µ—Ä–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
2. –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø: –£–¥–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
3. –•–†–û–ù–û–õ–û–ì–ò–Ø: –°–æ—Ö—Ä–∞–Ω–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π
4. –°–í–Ø–ó–ù–û–°–¢–¨: –°–æ–∑–¥–∞–π —Å–≤—è–∑–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
5. –ü–û–õ–ù–û–¢–ê: –í–∫–ª—é—á–∏ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
6. –ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–∞—Ö –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö

–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é
- –û–±—ä–µ–¥–∏–Ω—è–π –ø–æ—Ö–æ–∂–∏–µ –ø—É–Ω–∫—Ç—ã –≤ —Å–ø–∏—Å–∫–∞—Ö
- –ì—Ä—É–ø–ø–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º
- –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –æ–±—ä–µ–¥–∏–Ω–∏ –≤—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö, –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ë–ï–ó —Ä–æ–ª–µ–π
- –î–ª—è –∑–∞–¥–∞—á: —É–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ

–°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ò–ú–ï–ù:
- –ï—Å–ª–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –°–û–ü–û–°–¢–ê–í–õ–Ø–ô –∏—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ
- –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏–∫–∏ (–ø—Ä–∏–º–µ–Ω—è–π –∫–æ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞):
  ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω—ã–µ: –°–≤–µ—Ç–∞‚Üí–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ—Ä–æ—Ç–∫–æ–≤–∞, –õ–µ—à–∞‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ –∏ —Ç.–¥.
  ‚Ä¢ –ü–æ —Ñ–∞–º–∏–ª–∏–∏: –¢–∏–º—á–µ–Ω–∫–æ‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ –∏ —Ç.–¥.
  ‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è: –ê–ª–µ–∫—Å–µ–π‚Üí–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ
- ‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è —ç—Ç–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏!
- –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–´–ï –ò–ú–ï–ù–ê –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–°–£–ñ–î–ï–ù–ò–Ø:
–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—à—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º/–∫–ª–∞—Å—Ç–µ—Ä–∞–º:
- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–æ "–ö–ª–∞—Å—Ç–µ—Ä", —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –º–∞—Ä–∫–µ—Ä–æ–º: "‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã**"
- –ö–∞–∂–¥—É—é –∏–¥–µ—é/–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ/–ø–æ–∑–∏—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
- –§–æ—Ä–º–∞—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è: "–ò–º—è –ê–≤—Ç–æ—Ä–∞: —Ç–µ–∫—Å—Ç" (–±–µ–∑ —Å–ª–æ–≤–∞ "–ò–¥–µ—è", –±–µ–∑ —Å–∫–æ–±–æ–∫)
- –ú–µ–∂–¥—É —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏ –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é –ª–æ–≥–∏—Å—Ç–∏–∫—É**

–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–µ—Ö–∞–Ω–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è

–ì–∞–ª–∏–Ω–∞ –Ø–º–∫–∏–Ω–∞: –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π

‚úó –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä ¬´–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é –ª–æ–≥–∏—Å—Ç–∏–∫—É¬ª: –ò–¥–µ—è (–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ): —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å...

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π:
- –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–†–û–°–¢–´–ú–ò –°–¢–†–û–ö–ê–ú–ò (string)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã {{}} –∏–ª–∏ –º–∞—Å—Å–∏–≤—ã [] –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π
- –°–ø–∏—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫–∞–∫ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç: "- –ø—É–Ω–∫—Ç1\\n- –ø—É–Ω–∫—Ç2\\n- –ø—É–Ω–∫—Ç3"
- –î–∞—Ç—ã: –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "20 –æ–∫—Ç—è–±—Ä—è 2024", –ù–ï {{"day": 20}}
- –£—á–∞—Å—Ç–Ω–∏–∫–∏: –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ "–ò–º—è1\\n–ò–º—è2\\n–ò–º—è3", –ë–ï–ó —Ä–æ–ª–µ–π!, –ù–ï [{{"name": "–ò–º—è"}}]
- –í—Ä–µ–º—è: "14:30" –∏–ª–∏ "—Å 14:00 –¥–æ 15:30", –ù–ï {{"start": "14:00"}}

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–í–û–î–ê:
{{
  "date": "20 –æ–∫—Ç—è–±—Ä—è 2024",
  "participants": "–û–∫—Å–∞–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\\n–ì–∞–ª–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞\\n–ê–ª–µ–∫—Å–µ–π –¢–∏–º—á–µ–Ω–∫–æ",
  "decisions": "- –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–∞–º–∏\\n- –ù–µ —Å—Ç–æ–ø–æ—Ä–∏—Ç—å –ø–æ—Ç–æ–∫ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫\\n- –û—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ CAP-–∑–∞–¥–∞—á–∏"
}}

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
JSON-–æ–±—ä–µ–∫—Ç —Å —Ç–µ–º–∏ –∂–µ –∫–ª—é—á–∞–º–∏, –Ω–æ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–í—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

    return prompt


async def _process_single_segment(
    segment: 'TranscriptionSegment',
    segment_idx: int,
    total_segments: int,
    client: openai.OpenAI,
    selected_model: str,
    system_prompt: str,
    template_variables: Dict[str, str],
    extra_headers: Dict[str, str],
    retry_manager: RetryManager,
    speaker_mapping: Optional[Dict[str, str]] = None,
    participants: Optional[List[Dict[str, str]]] = None
) -> Tuple[int, Dict[str, Any]]:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    Args:
        segment: –°–µ–≥–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        segment_idx: –ò–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞
        total_segments: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        client: OpenAI –∫–ª–∏–µ–Ω—Ç
        selected_model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        template_variables: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        extra_headers: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
        retry_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        speaker_mapping: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–∏–Ω–¥–µ–∫—Å_—Å–µ–≥–º–µ–Ω—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–æ–±—Ä–∞–±–æ—Ç–∫–∏)
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {segment_idx + 1}/{total_segments}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π
    segment_text = segment.formatted_text if segment.formatted_text else segment.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
    segment_prompt = _build_segment_analysis_prompt(
        segment_text=segment_text,
        segment_id=segment_idx,
        total_segments=total_segments,
        template_variables=template_variables,
        speaker_mapping=speaker_mapping,
        participants=participants
    )
    
    # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
    if settings.llm_debug_log:
        logger.debug("=" * 80)
        logger.debug(f"[DEBUG] OpenAI REQUEST - Chain-of-Thought Segment {segment_idx + 1}/{total_segments}")
        logger.debug("=" * 80)
        logger.debug(f"Segment prompt:\n{segment_prompt}")
        logger.debug("=" * 80)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenAI API
    async def _call_openai_api():
        return await asyncio.to_thread(
            client.chat.completions.create,
            model=selected_model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": segment_prompt}
            ],
            temperature=0.1,
            response_format={"type": "json_object"},
            extra_headers=extra_headers
        )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
    try:
        response = await retry_manager.execute_with_retry(_call_openai_api)
    except openai.APIStatusError as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É 402 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
        if e.status_code == 402:
            error_message = e.message
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
            if hasattr(e, 'response') and e.response:
                try:
                    error_body = e.response.json()
                    if 'error' in error_body and 'message' in error_body['error']:
                        error_message = error_body['error']['message']
                except:
                    pass
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è LLM: {error_message}")
            raise LLMInsufficientCreditsError(
                message=error_message,
                provider="openai",
                model=selected_model
            )
        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
        raise
    
    content = response.choices[0].message.content
    
    # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
    if settings.llm_debug_log:
        logger.debug("=" * 80)
        logger.debug(f"[DEBUG] OpenAI RESPONSE - Chain-of-Thought Segment {segment_idx + 1}/{total_segments}")
        logger.debug("=" * 80)
        if hasattr(response, 'usage'):
            logger.debug(f"Usage: {response.usage}")
        logger.debug(f"Content:\n{content}")
        logger.debug("=" * 80)
    
    # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        segment_result = json.loads(content)
    except json.JSONDecodeError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {segment_idx + 1}: {e}, –ø—ã—Ç–∞—é—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞")
        start_idx = content.find('{')
        end_idx = content.rfind('}') + 1
        if start_idx != -1 and end_idx > start_idx:
            json_str = content[start_idx:end_idx]
            segment_result = json.loads(json_str)  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è - –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç retry
        else:
            raise  # –ù–µ—Ç JSON –≤ –æ—Ç–≤–µ—Ç–µ - retry
    
    logger.info(f"–°–µ–≥–º–µ–Ω—Ç {segment_idx + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    return (segment_idx, segment_result)


def _merge_segment_results_fallback(
    segment_results: List[Dict[str, Any]], 
    template_variables: Dict[str, str]
) -> Dict[str, Any]:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ LLM –Ω–µ —É–¥–∞–ª—Å—è.
    
    Args:
        segment_results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        template_variables: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        
    Returns:
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    """
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    merged = {}
    
    for key in template_variables.keys():
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        values = []
        for segment in segment_results:
            if key in segment and segment[key]:
                value = segment[key].strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
                if value and value != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and value != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" and "–û—à–∏–±–∫–∞" not in value:
                    values.append(value)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if values:
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
            seen = set()
            unique_values = []
            for v in values:
                # –î–ª—è —Å–ø–∏—Å–∫–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "- ") —Ä–∞–∑–±–∏—Ä–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
                if v.startswith("- ") or v.startswith("‚Ä¢ "):
                    items = [line.strip() for line in v.split('\n') if line.strip()]
                    for item in items:
                        if item not in seen:
                            seen.add(item)
                            unique_values.append(item)
                else:
                    if v not in seen:
                        seen.add(v)
                        unique_values.append(v)
            
            merged[key] = "\n".join(unique_values) if unique_values else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            merged[key] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    return merged


async def generate_protocol_chain_of_thought(
    manager: 'LLMManager',
    provider_name: str,
    transcription: str,
    template_variables: Dict[str, str],
    segments: List['TranscriptionSegment'],
    diarization_data: Optional[Dict[str, Any]] = None,
    diarization_analysis: Optional[Dict[str, Any]] = None,
    meeting_structure = None,  # MeetingStructure
    **kwargs
) -> Dict[str, Any]:
    """
    Chain-of-Thought –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
    
    –≠—Ç–∞–ø—ã:
    1. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    2. –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    
    Args:
        manager: –ú–µ–Ω–µ–¥–∂–µ—Ä LLM
        provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        transcription: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        template_variables: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        diarization_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        diarization_analysis: –ê–Ω–∞–ª–∏–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    """
    logger.info(f"–ù–∞—á–∞–ª–æ Chain-of-Thought –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
    speaker_mapping = kwargs.get('speaker_mapping')
    participants = kwargs.get('participants')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—Å —É—á–µ—Ç–æ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    system_prompt = _build_system_prompt(transcription, diarization_analysis)
    
    segment_results = []
    
    # –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    logger.info("–≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    if provider_name == "openai":
        provider = manager.providers[provider_name]
        openai_model_key = kwargs.get("openai_model_key")
        
        # –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        selected_model = settings.openai_model
        selected_base_url = settings.openai_base_url or "https://api.openai.com/v1"
        
        if openai_model_key:
            try:
                preset = next((p for p in settings.openai_models if p.key == openai_model_key), None)
                if preset:
                    selected_model = preset.model
                    if getattr(preset, 'base_url', None):
                        selected_base_url = preset.base_url
            except Exception:
                pass
        
        # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ base_url
        client = provider.client
        if client is None or (selected_base_url and getattr(client, 'base_url', None) != selected_base_url):
            client = openai.OpenAI(
                api_key=settings.openai_api_key,
                base_url=selected_base_url,
                http_client=provider.http_client
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º extra_headers –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
        extra_headers = {}
        if settings.http_referer:
            extra_headers["HTTP-Referer"] = settings.http_referer
        if settings.x_title:
            extra_headers["X-Title"] = settings.x_title
        
        # –°–æ–∑–¥–∞–µ–º retry manager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        retry_manager = RetryManager(LLM_RETRY_CONFIG)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        max_parallel = settings.max_parallel_segments
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if max_parallel:
            logger.info(
                f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ "
                f"(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {max_parallel} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)"
            )
            semaphore = asyncio.Semaphore(max_parallel)
            
            async def _process_with_semaphore(segment):
                async with semaphore:
                    return await _process_single_segment(
                        segment=segment,
                        segment_idx=segment.segment_id,
                        total_segments=len(segments),
                        client=client,
                        selected_model=selected_model,
                        system_prompt=system_prompt,
                        template_variables=template_variables,
                        extra_headers=extra_headers,
                        retry_manager=retry_manager,
                        speaker_mapping=speaker_mapping,
                        participants=participants
                    )
            
            tasks = [_process_with_semaphore(segment) for segment in segments]
        else:
            logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")
            
            tasks = [
                _process_single_segment(
                    segment=segment,
                    segment_idx=segment.segment_id,
                    total_segments=len(segments),
                    client=client,
                    selected_model=selected_model,
                    system_prompt=system_prompt,
                    template_variables=template_variables,
                    extra_headers=extra_headers,
                    retry_manager=retry_manager,
                    speaker_mapping=speaker_mapping,
                    participants=participants
                )
                for segment in segments
            ]
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_count = 0
        failed_count = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        for result in results:
            if isinstance(result, Exception):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                if isinstance(result, LLMInsufficientCreditsError):
                    logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                    raise result
                
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–≥–º–µ–Ω—Ç–∞: {result}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                segment_results.append({
                    key: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞" 
                    for key in template_variables.keys()
                })
            else:
                successful_count += 1
                segment_id, data = result
                segment_results.append(data)
        
        logger.info(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ {successful_count}/{len(segments)}, "
            f"–æ—à–∏–±–æ–∫ {failed_count}/{len(segments)}"
        )
        
        # –≠–¢–ê–ü 2: –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        logger.info("–≠—Ç–∞–ø 2: –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        participants = kwargs.get('participants')
        synthesis_prompt = _build_synthesis_prompt(
            segment_results=segment_results,
            transcription=transcription,
            template_variables=template_variables,
            diarization_analysis=diarization_analysis,
            participants=participants
        )
        
        # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω—Ç–µ–∑–∞
        if settings.llm_debug_log:
            logger.debug("=" * 80)
            logger.debug(f"[DEBUG] OpenAI REQUEST - Chain-of-Thought Synthesis ({len(segment_results)} segments)")
            logger.debug("=" * 80)
            logger.debug(f"Synthesis prompt:\n{synthesis_prompt}")
            logger.debug("=" * 80)
        
        async def _call_openai_synthesis():
            return await asyncio.to_thread(
                client.chat.completions.create,
                model=selected_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": synthesis_prompt}
                ],
                temperature=0.1,
                response_format={"type": "json_object"},
                extra_headers=extra_headers
            )
        
        try:
            response_synthesis = await _call_openai_synthesis()
        except openai.APIStatusError as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É 402 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
            if e.status_code == 402:
                error_message = e.message
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
                if hasattr(e, 'response') and e.response:
                    try:
                        error_body = e.response.json()
                        if 'error' in error_body and 'message' in error_body['error']:
                            error_message = error_body['error']['message']
                    except:
                        pass
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è LLM (—Å–∏–Ω—Ç–µ–∑): {error_message}")
                raise LLMInsufficientCreditsError(
                    message=error_message,
                    provider="openai",
                    model=selected_model
                )
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise
        
        content_synthesis = response_synthesis.choices[0].message.content
        
        # DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞
        if settings.llm_debug_log:
            logger.debug("=" * 80)
            logger.debug("[DEBUG] OpenAI RESPONSE - Chain-of-Thought Synthesis")
            logger.debug("=" * 80)
            if hasattr(response_synthesis, 'usage'):
                logger.debug(f"Usage: {response_synthesis.usage}")
            logger.debug(f"Content:\n{content_synthesis}")
            logger.debug("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not content_synthesis or not content_synthesis.strip():
            logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM –Ω–∞ —ç—Ç–∞–ø–µ —Å–∏–Ω—Ç–µ–∑–∞")
            logger.warning("–ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return _merge_segment_results_fallback(segment_results, template_variables)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ JSON
        if '{' not in content_synthesis or '}' not in content_synthesis:
            logger.error(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –î–ª–∏–Ω–∞: {len(content_synthesis)}, –Ω–∞—á–∞–ª–æ: {content_synthesis[:200]}")
            logger.warning("–ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return _merge_segment_results_fallback(segment_results, template_variables)
        
        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: –ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥
        try:
            final_protocol = json.loads(content_synthesis)
            logger.info("Chain-of-Thought –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥)")
            return final_protocol
        except json.JSONDecodeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ —ç—Ç–∞–ø–µ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            logger.debug(f"–ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: line {e.lineno}, column {e.colno}, char {e.pos}")
            
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
            start_idx = content_synthesis.find('{')
            end_idx = content_synthesis.rfind('}') + 1
            
            if start_idx != -1 and end_idx > start_idx:
                json_str = content_synthesis[start_idx:end_idx]
                logger.debug(f"–ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞: –¥–ª–∏–Ω–∞ {len(json_str)}, –Ω–∞—á–∞–ª–æ: {json_str[:100]}")
                
                try:
                    final_protocol = json.loads(json_str)
                    logger.info("Chain-of-Thought –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞)")
                    return final_protocol
                except json.JSONDecodeError as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ JSON: {e2}")
                    logger.error(f"–ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: line {e2.lineno}, column {e2.colno}, char {e2.pos}")
                    logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n{content_synthesis[:1000]}")
                    logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n{content_synthesis[-500:]}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—ã JSON –≤ –æ—Ç–≤–µ—Ç–µ")
                logger.error(f"–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:\n{content_synthesis}")
            
            # Fallback: –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            logger.warning("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–µ —É–¥–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            return _merge_segment_results_fallback(segment_results, template_variables)
    
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        logger.warning(
            f"Chain-of-Thought –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è {provider_name}, "
            f"–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
        )
        # –ü–µ—Ä–µ–¥–∞–µ–º meeting_structure —á–µ—Ä–µ–∑ kwargs
        if meeting_structure:
            kwargs['meeting_structure'] = meeting_structure
        return await manager.generate_protocol(
            provider_name, transcription, template_variables, diarization_data, **kwargs
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ LLM
llm_manager = LLMManager()
