#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–±–æ—Ä–∫—É –∏ multi-platform —Å–±–æ—Ä–∫—É

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
IMAGE_NAME="gihar/soroka"
DEFAULT_VERSION="latest"
LOCAL_TAG="soroka-bot:optimized"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞"
    echo "=============================================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  ./build.sh [–æ–ø—Ü–∏–∏] [–≤–µ—Ä—Å–∏—è]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -l, --local      –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  -m, --multi      Multi-platform —Å–±–æ—Ä–∫–∞ –¥–ª—è Docker Hub"
    echo "  -c, --clean      –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π"
    echo "  -h, --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./build.sh                    # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞"
    echo "  ./build.sh -l                 # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π"
    echo "  ./build.sh -m v1.0.0          # Multi-platform —Å–±–æ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ 1.0.0"
    echo "  ./build.sh -m -c latest       # Multi-platform —Å–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
build_local() {
    local clean=$1
    local version=${2:-$DEFAULT_VERSION}
    
    echo "üîß –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–±–æ—Ä–∫—É..."
    echo "=============================================="
    echo "–û–±—Ä–∞–∑: $LOCAL_TAG"
    echo "–í–µ—Ä—Å–∏—è: $version"
    echo ""
    
    if [ "$clean" = "true" ]; then
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker system prune -f
    fi
    
    echo "üì¶ –°–±–æ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
    docker build \
        --tag $LOCAL_TAG \
        --tag "soroka-bot:$version" \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --progress=plain \
        .
    
    echo ""
    echo "üìä –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞:"
    docker images soroka-bot:optimized --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if docker images soroka-bot:latest --format "{{.Size}}" 2>/dev/null; then
        echo ""
        echo "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤:"
        echo "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑:"
        docker images soroka-bot:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        echo "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑:"
        docker images soroka-bot:optimized --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
    fi
    
    echo ""
    echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üîç –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    echo "   docker run -d --name soroka-bot $LOCAL_TAG"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è multi-platform —Å–±–æ—Ä–∫–∏
build_multi() {
    local clean=$1
    local version=${2:-$DEFAULT_VERSION}
    local platforms="linux/amd64,linux/arm64"
    
    echo "üöÄ –°–±–æ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ multi-platform –æ–±—Ä–∞–∑–∞"
    echo "=============================================="
    echo "–û–±—Ä–∞–∑: $IMAGE_NAME:$version"
    echo "–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: $platforms"
    echo ""
    
    if [ "$clean" = "true" ]; then
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker system prune -f
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker Buildx
    if ! docker buildx version &> /dev/null; then
        echo "‚ùå Docker Buildx –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ Docker."
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π builder –¥–ª—è multi-platform —Å–±–æ—Ä–∫–∏
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multi-platform builder..."
    docker buildx create --name multiplatform-builder --use 2>/dev/null || \
    docker buildx use multiplatform-builder
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ builder –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multi-platform
    if ! docker buildx inspect --bootstrap | grep -q "linux/amd64\|linux/arm64"; then
        echo "‚ùå –í–∞—à Docker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multi-platform —Å–±–æ—Ä–∫—É."
        echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Docker Desktop –∏–ª–∏ Docker —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Buildx."
        exit 1
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º multi-platform –æ–±—Ä–∞–∑
    echo "üê≥ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º..."
    docker buildx build \
        --platform $platforms \
        --tag $IMAGE_NAME:$version \
        --tag $IMAGE_NAME:latest \
        --push \
        .
    
    echo ""
    echo "‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Docker Hub!"
    echo ""
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ:"
    echo "   –ò–º—è: $IMAGE_NAME"
    echo "   –í–µ—Ä—Å–∏—è: $version"
    echo "   –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: $platforms"
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–∑ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π:"
    echo "   docker buildx imagetools inspect $IMAGE_NAME:$version"
    echo ""
    echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "   docker run -d --name soroka-bot $IMAGE_NAME:$version"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
MODE="local"
CLEAN="false"
VERSION=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--local)
            MODE="local"
            shift
            ;;
        -m|--multi)
            MODE="multi"
            shift
            ;;
        -c|--clean)
            CLEAN="true"
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
        *)
            VERSION="$1"
            shift
            ;;
    esac
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
case $MODE in
    "local")
        build_local "$CLEAN" "$VERSION"
        ;;
    "multi")
        build_multi "$CLEAN" "$VERSION"
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $MODE"
        exit 1
        ;;
esac