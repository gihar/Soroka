#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–±–æ—Ä–∫—É –∏ multi-platform —Å–±–æ—Ä–∫—É
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
IMAGE_NAME="gihar/soroka"
DEFAULT_VERSION="latest"
LOCAL_TAG="soroka-bot:optimized"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"
    echo "================================================================"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  ./build.sh [–æ–ø—Ü–∏–∏] [–≤–µ—Ä—Å–∏—è]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -l, --local      –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  -m, --multi      Multi-platform —Å–±–æ—Ä–∫–∞ –¥–ª—è Docker Hub"
    echo "  -c, --clean      –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π"
    echo "  -s, --squash     –°–∂–∞—Ç–∏–µ —Å–ª–æ–µ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏)"
    echo "  -x, --exclude    –ò—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–±–æ—Ä–∫–∏"
    echo "  --lite           –°–±–æ—Ä–∫–∞ –ª—ë–≥–∫–æ–≥–æ –æ–±—Ä–∞–∑–∞ (–±–µ–∑ Whisper/Torch/pyannote)"
    echo "  -h, --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./build.sh                    # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞"
    echo "  ./build.sh -l -s              # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ —Å–∂–∞—Ç–∏–µ–º"
    echo "  ./build.sh -m v1.0.0          # Multi-platform —Å–±–æ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ 1.0.0"
    echo "  ./build.sh -m -c latest       # Multi-platform —Å–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π"
    echo "  ./build.sh -x                 # –°–±–æ—Ä–∫–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  ./build.sh --lite             # –õ–æ–∫–∞–ª—å–Ω–∞—è –ª—ë–≥–∫–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö ML"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è .dockerignore –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
create_optimized_dockerignore() {
    echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ .dockerignore..."
    cat > .dockerignore << 'EOF'
# Git –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
.git
.gitignore
.gitattributes

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
docs/
*.md
README*

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à
temp/
cache/
logs/
*.log
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/
ENV/
env.bak/
venv.bak/

# IDE –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
.vscode/
.idea/
*.swp
*.swo
*~

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db

# Docker —Ñ–∞–π–ª—ã
Dockerfile*
docker-compose*.yml
.dockerignore

# –°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
build.sh
install.sh
*.sh

# –¢–µ—Å—Ç—ã
tests/
test_*.py
*_test.py

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
.env
.env.local
.env.development

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
*.db
*.sqlite
*.sqlite3

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
config.local.py
config.dev.py
EOF
    echo "‚úÖ .dockerignore —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker —Å–∏—Å—Ç–µ–º—ã
clean_docker_system() {
    echo "üßπ –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    echo "  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -a -f 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker container prune -f 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π
    echo "  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π..."
    docker network prune -f 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤
    echo "  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤..."
    docker volume prune -f 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö build cache
    echo "  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ build cache..."
    docker builder prune -a -f 2>/dev/null || true
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    echo "  –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    docker system prune -a -f 2>/dev/null || true
    
    echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
build_local() {
    local clean=$1
    local squash=$2
    local exclude=$3
    local version=${4:-$DEFAULT_VERSION}
    local lite=${5:-false}
    
    echo "üîß –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–±–æ—Ä–∫—É..."
    echo "=============================================="
    echo "–û–±—Ä–∞–∑: $LOCAL_TAG"
    echo "–í–µ—Ä—Å–∏—è: $version"
    echo "–°–∂–∞—Ç–∏–µ —Å–ª–æ–µ–≤: $squash"
    echo "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: $exclude"
    echo ""
    
    if [ "$clean" = "true" ]; then
        clean_docker_system
    fi
    
    if [ "$exclude" = "true" ]; then
        create_optimized_dockerignore
    fi
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ —Å–±–æ—Ä–∫–∏
    local build_flags="--tag $LOCAL_TAG --tag soroka-bot:$version"
    if [ "$lite" = "true" ]; then
        build_flags="$build_flags --build-arg FLAVOR=lite"
        echo "üçÉ –í–∫–ª—é—á—ë–Ω –ª—ë–≥–∫–∏–π —Ä–µ–∂–∏–º: FLAVOR=lite"
    else
        build_flags="$build_flags --build-arg FLAVOR=full"
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∂–∞—Ç–∏–µ —Å–ª–æ–µ–≤ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if [ "$squash" = "true" ]; then
        build_flags="$build_flags --squash"
        echo "üì¶ –í–∫–ª—é—á–µ–Ω–æ —Å–∂–∞—Ç–∏–µ —Å–ª–æ–µ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞..."
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    build_flags="$build_flags --build-arg BUILDKIT_INLINE_CACHE=1"
    build_flags="$build_flags --build-arg DOCKER_BUILDKIT=1"
    build_flags="$build_flags --progress=plain"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    build_flags="$build_flags --label org.opencontainers.image.version=$version"
    build_flags="$build_flags --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
    build_flags="$build_flags --label org.opencontainers.image.description=Soroka-Bot-optimized-image"
    
    echo "üì¶ –°–±–æ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º buildx –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ —Ç–æ–∂–µ, –ø–æ—Å–∫–æ–ª—å–∫—É Docker –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç build –Ω–∞ buildx
    build_flags="$build_flags --load"
    
    docker buildx build $build_flags .
    
    echo ""
    echo "üìä –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞:"
    docker images soroka-bot:optimized --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if docker images soroka-bot:latest --format "{{.Size}}" 2>/dev/null; then
        echo ""
        echo "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤:"
        echo "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑:"
        docker images soroka-bot:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        echo "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑:"
        docker images soroka-bot:optimized --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è
        local original_size=$(docker images soroka-bot:latest --format "{{.Size}}" | sed 's/[^0-9.]//g')
        local optimized_size=$(docker images soroka-bot:optimized --format "{{.Size}}" | sed 's/[^0-9.]//g')
        if [[ "$original_size" =~ ^[0-9.]+$ ]] && [[ "$optimized_size" =~ ^[0-9.]+$ ]]; then
            local reduction=$(echo "scale=1; (($original_size - $optimized_size) / $original_size) * 100" | bc -l 2>/dev/null || echo "0")
            echo ""
            echo "üéØ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: ${reduction}%"
        fi
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤ –æ–±—Ä–∞–∑–∞
    echo ""
    echo "üîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤ –æ–±—Ä–∞–∑–∞:"
    docker history soroka-bot:optimized --format "table {{.CreatedBy}}\t{{.Size}}\t{{.CreatedAt}}" | head -10
    
    echo ""
    echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üîç –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    echo "   docker run -d --name soroka-bot $LOCAL_TAG"
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .dockerignore –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
    if [ "$exclude" = "true" ]; then
        rm -f .dockerignore
        echo "üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π .dockerignore —É–¥–∞–ª–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è multi-platform —Å–±–æ—Ä–∫–∏
build_multi() {
    local clean=$1
    local version=${2:-$DEFAULT_VERSION}
    local lite=${3:-false}
    local platforms="linux/amd64,linux/arm64"
    
    echo "üöÄ –°–±–æ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ multi-platform –æ–±—Ä–∞–∑–∞"
    echo "=============================================="
    echo "–û–±—Ä–∞–∑: $IMAGE_NAME:$version"
    echo "–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: $platforms"
    echo ""
    
    if [ "$clean" = "true" ]; then
        clean_docker_system
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker daemon
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–ª–∏ Docker daemon."
        echo "   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: open -a 'Docker Desktop' (–Ω–∞ macOS)"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker Buildx
    if ! docker buildx version &> /dev/null; then
        echo "‚ùå Docker Buildx –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ Docker."
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π builder –¥–ª—è multi-platform —Å–±–æ—Ä–∫–∏
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multi-platform builder..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π builder
    if docker buildx ls | grep -q "multiplatform-builder.*running"; then
        echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π multiplatform-builder"
        docker buildx use multiplatform-builder
    elif docker buildx ls | grep -E "default.*running.*linux/amd64.*linux/arm64|desktop-linux.*running.*linux/amd64.*linux/arm64" &> /dev/null; then
        echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π builder —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multi-platform"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π builder, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    else
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π builder —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ multi-platform builder..."
        if docker buildx create --name multiplatform-builder --use 2>/dev/null; then
            echo "‚úÖ –ù–æ–≤—ã–π multiplatform-builder —Å–æ–∑–¥–∞–Ω"
        else
            echo "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π multiplatform-builder"
            docker buildx use multiplatform-builder
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π builder –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multi-platform
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º..."
    if ! docker buildx inspect --bootstrap 2>/dev/null | grep -q "linux/amd64\|linux/arm64"; then
        echo "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π builder –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç multi-platform —Å–±–æ—Ä–∫—É."
        echo "   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ builder:"
        docker buildx ls | head -10
        echo ""
        echo "   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
        echo "   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Desktop"
        echo "   2. –û–±–Ω–æ–≤–∏—Ç—å Docker Desktop –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"
        echo "   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É: ./build.sh -l"
        echo ""
        echo "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É..."
        echo ""
        build_local "$clean" "false" "false" "$version" "$lite"
        return
    fi
    
    echo "‚úÖ Multi-platform —Å–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞"
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è multi-platform —Å–±–æ—Ä–∫–∏
    local build_flags="--platform $platforms"
    build_flags="$build_flags --tag $IMAGE_NAME:$version"
    build_flags="$build_flags --tag $IMAGE_NAME:latest"
    if [ "$lite" = "true" ]; then
        build_flags="$build_flags --build-arg FLAVOR=lite"
        echo "üçÉ –í–∫–ª—é—á—ë–Ω –ª—ë–≥–∫–∏–π —Ä–µ–∂–∏–º: FLAVOR=lite"
    else
        build_flags="$build_flags --build-arg FLAVOR=full"
    fi
    build_flags="$build_flags --build-arg BUILDKIT_INLINE_CACHE=1"
    build_flags="$build_flags --build-arg DOCKER_BUILDKIT=1"
    build_flags="$build_flags --cache-from type=registry,ref=$IMAGE_NAME:buildcache"
    build_flags="$build_flags --cache-to type=registry,ref=$IMAGE_NAME:buildcache,mode=max"
    build_flags="$build_flags --push"
    
    # –°–æ–±–∏—Ä–∞–µ–º multi-platform –æ–±—Ä–∞–∑
    echo "üê≥ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º..."
    docker buildx build $build_flags .
    
    echo ""
    echo "‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Docker Hub!"
    echo ""
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ:"
    echo "   –ò–º—è: $IMAGE_NAME"
    echo "   –í–µ—Ä—Å–∏—è: $version"
    echo "   –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: $platforms"
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–∑ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π:"
    echo "   docker buildx imagetools inspect $IMAGE_NAME:$version"
    echo ""
    echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "   docker run -d --name soroka-bot $IMAGE_NAME:$version"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
MODE="local"
CLEAN="false"
SQUASH="false"
EXCLUDE="false"
VERSION=""
LITE="false"

while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--local)
            MODE="local"
            shift
            ;;
        -m|--multi)
            MODE="multi"
            shift
            ;;
        -c|--clean)
            CLEAN="true"
            shift
            ;;
        -s|--squash)
            SQUASH="true"
            shift
            ;;
        -x|--exclude)
            EXCLUDE="true"
            shift
            ;;
        --lite)
            LITE="true"
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
        *)
            VERSION="$1"
            shift
            ;;
    esac
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
case $MODE in
    "local")
        build_local "$CLEAN" "$SQUASH" "$EXCLUDE" "$VERSION" "$LITE"
        ;;
    "multi")
        build_multi "$CLEAN" "$VERSION" "$LITE"
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $MODE"
        exit 1
        ;;
esac
