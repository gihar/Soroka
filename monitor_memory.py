#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ Soroka
"""

import os
import sys
import time
import psutil
import argparse
from datetime import datetime
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

try:
    from src.performance.oom_protection import get_oom_protection
    OOM_PROTECTION_AVAILABLE = True
except ImportError:
    OOM_PROTECTION_AVAILABLE = False
    logger.warning("OOM Protection –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


def get_memory_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"""
    system_memory = psutil.virtual_memory()
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    bot_process = None
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['cmdline'] and any('main.py' in cmd for cmd in proc.info['cmdline']):
                bot_process = proc
                break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    result = {
        "timestamp": datetime.now().isoformat(),
        "system": {
            "total_mb": round(system_memory.total / (1024 * 1024), 2),
            "available_mb": round(system_memory.available / (1024 * 1024), 2),
            "used_mb": round(system_memory.used / (1024 * 1024), 2),
            "percent": round(system_memory.percent, 2)
        },
        "bot_process": None
    }
    
    if bot_process:
        try:
            process_memory = bot_process.memory_info()
            result["bot_process"] = {
                "pid": bot_process.pid,
                "rss_mb": round(process_memory.rss / (1024 * 1024), 2),
                "vms_mb": round(process_memory.vms / (1024 * 1024), 2),
                "cpu_percent": bot_process.cpu_percent()
            }
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            result["bot_process"] = {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"}
    
    return result


def print_memory_status(memory_info):
    """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    timestamp = memory_info["timestamp"]
    system = memory_info["system"]
    bot_process = memory_info["bot_process"]
    
    print(f"\n{'='*60}")
    print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ Soroka Bot - {timestamp}")
    print(f"{'='*60}")
    
    print(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å:")
    print(f"  –í—Å–µ–≥–æ: {system['total_mb']:.1f} MB")
    print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {system['used_mb']:.1f} MB ({system['percent']:.1f}%)")
    print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {system['available_mb']:.1f} MB")
    
    if bot_process and "error" not in bot_process:
        print(f"\n–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ (PID: {bot_process['pid']}):")
        print(f"  RSS: {bot_process['rss_mb']:.1f} MB")
        print(f"  VMS: {bot_process['vms_mb']:.1f} MB")
        print(f"  CPU: {bot_process['cpu_percent']:.1f}%")
    elif bot_process and "error" in bot_process:
        print(f"\n–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞: {bot_process['error']}")
    else:
        print(f"\n–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if system['percent'] >= 95:
        status = "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
    elif system['percent'] >= 85:
        status = "‚ö†Ô∏è  –í–´–°–û–ö–ò–ô"
    elif system['percent'] >= 70:
        status = "üü° –°–†–ï–î–ù–ò–ô"
    else:
        status = "‚úÖ –ù–û–†–ú–ê–õ–¨–ù–´–ô"
    
    print(f"\n–°—Ç–∞—Ç—É—Å: {status}")


def monitor_continuous(interval=10, max_iterations=None):
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
    
    iteration = 0
    try:
        while True:
            if max_iterations and iteration >= max_iterations:
                break
                
            memory_info = get_memory_info()
            print_memory_status(memory_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OOM –∑–∞—â–∏—Ç—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if OOM_PROTECTION_AVAILABLE:
                oom_protection = get_oom_protection()
                oom_stats = oom_protection.get_statistics()
                
                if oom_stats['oom_events_count'] > 0:
                    print(f"\nüö® OOM —Å–æ–±—ã—Ç–∏—è: {oom_stats['oom_events_count']}")
                if oom_stats['memory_warnings_count'] > 0:
                    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {oom_stats['memory_warnings_count']}")
            
            iteration += 1
            time.sleep(interval)
            
    except KeyboardInterrupt:
        print(f"\n\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")


def check_oom_protection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å OOM –∑–∞—â–∏—Ç—ã"""
    if not OOM_PROTECTION_AVAILABLE:
        print("‚ùå OOM Protection –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    oom_protection = get_oom_protection()
    stats = oom_protection.get_statistics()
    
    print(f"\n{'='*60}")
    print(f"–°—Ç–∞—Ç—É—Å OOM Protection")
    print(f"{'='*60}")
    
    print(f"–ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞: {'‚úÖ' if stats['protection_enabled'] else '‚ùå'}")
    print(f"OOM —Å–æ–±—ã—Ç–∏—è: {stats['oom_events_count']}")
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {stats['memory_warnings_count']}")
    print(f"–°–æ–±—ã—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏: {stats['cleanup_events_count']}")
    
    memory_status = stats['current_memory_status']
    print(f"\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏:")
    print(f"  –°–∏—Å—Ç–µ–º–∞: {memory_status['system']['percent']:.1f}%")
    print(f"  –ü—Ä–æ—Ü–µ—Å—Å: {memory_status['process']['rss_mb']:.1f} MB")
    print(f"  –°—Ç–∞—Ç—É—Å: {memory_status['status']}")
    
    if stats['recent_events']['oom_events']:
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ OOM —Å–æ–±—ã—Ç–∏—è:")
        for event in stats['recent_events']['oom_events'][-3:]:
            print(f"  - {event['timestamp']}: {event['type']}")


def main():
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ Soroka Bot")
    parser.add_argument("--interval", "-i", type=int, default=10, 
                       help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    parser.add_argument("--once", action="store_true", 
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤—ã–π—Ç–∏")
    parser.add_argument("--max-iterations", type=int, 
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
    parser.add_argument("--check-oom", action="store_true", 
                       help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å OOM –∑–∞—â–∏—Ç—ã")
    
    args = parser.parse_args()
    
    if args.check_oom:
        check_oom_protection()
    elif args.once:
        memory_info = get_memory_info()
        print_memory_status(memory_info)
    else:
        monitor_continuous(args.interval, args.max_iterations)


if __name__ == "__main__":
    main()
