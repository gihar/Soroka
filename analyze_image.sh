#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ Docker –æ–±—Ä–∞–∑–∞
# –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${BLUE}üîç –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ Docker –æ–±—Ä–∞–∑–∞${NC}"
    echo "=============================================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  ./analyze_image.sh [–∏–º—è_–æ–±—Ä–∞–∑–∞]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./analyze_image.sh soroka-bot:latest"
    echo "  ./analyze_image.sh soroka-bot:optimized"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞
analyze_image() {
    local image_name=$1
    
    if [ -z "$image_name" ]; then
        echo -e "${RED}‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –æ–±—Ä–∞–∑–∞${NC}"
        show_help
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞
    if ! docker images "$image_name" --format "{{.Repository}}:{{.Tag}}" | grep -q "$image_name"; then
        echo -e "${RED}‚ùå –û–±—Ä–∞–∑ $image_name –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üîç –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞: $image_name${NC}"
    echo "=============================================="
    echo ""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ
    echo -e "${GREEN}üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
    docker images "$image_name" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤
    echo -e "${GREEN}üîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤:${NC}"
    echo "–°–ª–æ–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É):"
    echo ""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—è—Ö –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    docker history "$image_name" --format "{{.Size}}\t{{.CreatedBy}}" | \
    while IFS=$'\t' read -r size command; do
        if [[ "$size" != "<missing>" ]]; then
            echo -e "${YELLOW}$size${NC}\t$command"
        fi
    done | sort -hr
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—Ä–∞–∑–∞
    echo -e "${GREEN}üìÅ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:${NC}"
    echo "–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    local temp_container=$(docker create "$image_name")
    
    if [ -n "$temp_container" ]; then
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω: $temp_container"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        echo ""
        echo -e "${YELLOW}üìä –†–∞–∑–º–µ—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:${NC}"
        docker exec "$temp_container" sh -c "du -sh /* 2>/dev/null | sort -hr" 2>/dev/null || \
        docker exec "$temp_container" sh -c "du -sh /app/* 2>/dev/null | sort -hr" 2>/dev/null || \
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python –ø–∞–∫–µ—Ç—ã
        echo ""
        echo -e "${YELLOW}üêç Python –ø–∞–∫–µ—Ç—ã:${NC}"
        docker exec "$temp_container" sh -c "pip list --format=freeze 2>/dev/null | wc -l" 2>/dev/null || \
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python –ø–∞–∫–µ—Ç–∞—Ö"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        echo ""
        echo -e "${YELLOW}üì¶ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:${NC}"
        docker exec "$temp_container" sh -c "dpkg -l | wc -l 2>/dev/null" 2>/dev/null || \
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö"
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        docker rm "$temp_container" >/dev/null 2>&1
        echo ""
        echo "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω"
    else
        echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä${NC}"
    fi
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    echo ""
    echo -e "${GREEN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:${NC}"
    echo "=============================================="
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞
    local image_size=$(docker images "$image_name" --format "{{.Size}}" | sed 's/[^0-9.]//g')
    
    if [[ "$image_size" =~ ^[0-9.]+$ ]]; then
        if (( $(echo "$image_size > 1000" | bc -l) )); then
            echo -e "${RED}‚ö†Ô∏è  –û–±—Ä–∞–∑ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (>1GB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:${NC}"
            echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å multi-stage —Å–±–æ—Ä–∫—É"
            echo "   - –£–±—Ä–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .dockerignore"
            echo "   - –°–∂–∞—Ç—å —Å–ª–æ–∏ (--squash)"
        elif (( $(echo "$image_size > 500" | bc -l) )); then
            echo -e "${YELLOW}‚ö†Ô∏è  –û–±—Ä–∞–∑ –±–æ–ª—å—à–æ–π (>500MB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:${NC}"
            echo "   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .dockerignore"
            echo "   - –£–±—Ä–∞—Ç—å dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–≥–∫–∏–µ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã"
        else
            echo -e "${GREEN}‚úÖ –û–±—Ä–∞–∑ –∏–º–µ–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–∞–∑–º–µ—Ä${NC}"
        fi
    fi
    
    echo ""
    echo -e "${BLUE}üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:${NC}"
    echo "   ./build.sh -s -x          # –°–±–æ—Ä–∫–∞ —Å–æ —Å–∂–∞—Ç–∏–µ–º –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤"
    echo "   ./build.sh -c             # –°–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞"
    echo "   docker system prune -a    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker"
    echo ""
    
    echo -e "${GREEN}‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

analyze_image "$1"
